/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Hopper.Hts.Airlines.Client;
using Com.Hopper.Hts.Airlines.Client.Auth;
using Com.Hopper.Hts.Airlines.Model;

namespace Com.Hopper.Hts.Airlines.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnalyticsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Send a Frontend Event
        /// </summary>
        /// <remarks>
        /// Events can also be sent directly from a frontend running on end customer&#39;s device using the session ID
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfarEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PostCustomerEvents(CfarEvent cfarEvent, int operationIndex = 0);

        /// <summary>
        /// Send a Frontend Event
        /// </summary>
        /// <remarks>
        /// Events can also be sent directly from a frontend running on end customer&#39;s device using the session ID
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfarEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCustomerEventsWithHttpInfo(CfarEvent cfarEvent, int operationIndex = 0);
        /// <summary>
        /// Send a Backend Event
        /// </summary>
        /// <remarks>
        /// Events can be send directly from partner backend using the same authentication as the other endpoints
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PostEvents(Event varEvent, int operationIndex = 0);

        /// <summary>
        /// Send a Backend Event
        /// </summary>
        /// <remarks>
        /// Events can be send directly from partner backend using the same authentication as the other endpoints
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostEventsWithHttpInfo(Event varEvent, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnalyticsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Send a Frontend Event
        /// </summary>
        /// <remarks>
        /// Events can also be sent directly from a frontend running on end customer&#39;s device using the session ID
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfarEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCustomerEventsAsync(CfarEvent cfarEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Send a Frontend Event
        /// </summary>
        /// <remarks>
        /// Events can also be sent directly from a frontend running on end customer&#39;s device using the session ID
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfarEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCustomerEventsWithHttpInfoAsync(CfarEvent cfarEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Send a Backend Event
        /// </summary>
        /// <remarks>
        /// Events can be send directly from partner backend using the same authentication as the other endpoints
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostEventsAsync(Event varEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Send a Backend Event
        /// </summary>
        /// <remarks>
        /// Events can be send directly from partner backend using the same authentication as the other endpoints
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostEventsWithHttpInfoAsync(Event varEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnalyticsApi : IAnalyticsApiSync, IAnalyticsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnalyticsApi : IAnalyticsApi
    {
        private Com.Hopper.Hts.Airlines.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnalyticsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnalyticsApi(string basePath)
        {
            this.Configuration = Com.Hopper.Hts.Airlines.Client.Configuration.MergeConfigurations(
                Com.Hopper.Hts.Airlines.Client.GlobalConfiguration.Instance,
                new Com.Hopper.Hts.Airlines.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Hopper.Hts.Airlines.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Hopper.Hts.Airlines.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Hopper.Hts.Airlines.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnalyticsApi(Com.Hopper.Hts.Airlines.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Hopper.Hts.Airlines.Client.Configuration.MergeConfigurations(
                Com.Hopper.Hts.Airlines.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Hopper.Hts.Airlines.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Hopper.Hts.Airlines.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Hopper.Hts.Airlines.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AnalyticsApi(Com.Hopper.Hts.Airlines.Client.ISynchronousClient client, Com.Hopper.Hts.Airlines.Client.IAsynchronousClient asyncClient, Com.Hopper.Hts.Airlines.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Hopper.Hts.Airlines.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Hopper.Hts.Airlines.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Hopper.Hts.Airlines.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Hopper.Hts.Airlines.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Hopper.Hts.Airlines.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Send a Frontend Event Events can also be sent directly from a frontend running on end customer&#39;s device using the session ID
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfarEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PostCustomerEvents(CfarEvent cfarEvent, int operationIndex = 0)
        {
            PostCustomerEventsWithHttpInfo(cfarEvent);
        }

        /// <summary>
        /// Send a Frontend Event Events can also be sent directly from a frontend running on end customer&#39;s device using the session ID
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfarEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Hopper.Hts.Airlines.Client.ApiResponse<Object> PostCustomerEventsWithHttpInfo(CfarEvent cfarEvent, int operationIndex = 0)
        {
            // verify the required parameter 'cfarEvent' is set
            if (cfarEvent == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'cfarEvent' when calling AnalyticsApi->PostCustomerEvents");
            }

            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = cfarEvent;

            localVarRequestOptions.Operation = "AnalyticsApi.PostCustomerEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SessionAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("HC-Session-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", this.Configuration.GetApiKeyWithPrefix("HC-Session-ID"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/customer/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCustomerEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a Frontend Event Events can also be sent directly from a frontend running on end customer&#39;s device using the session ID
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfarEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCustomerEventsAsync(CfarEvent cfarEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await PostCustomerEventsWithHttpInfoAsync(cfarEvent, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Send a Frontend Event Events can also be sent directly from a frontend running on end customer&#39;s device using the session ID
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfarEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Hopper.Hts.Airlines.Client.ApiResponse<Object>> PostCustomerEventsWithHttpInfoAsync(CfarEvent cfarEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'cfarEvent' is set
            if (cfarEvent == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'cfarEvent' when calling AnalyticsApi->PostCustomerEvents");
            }


            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = cfarEvent;

            localVarRequestOptions.Operation = "AnalyticsApi.PostCustomerEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SessionAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("HC-Session-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", this.Configuration.GetApiKeyWithPrefix("HC-Session-ID"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/customer/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCustomerEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a Backend Event Events can be send directly from partner backend using the same authentication as the other endpoints
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PostEvents(Event varEvent, int operationIndex = 0)
        {
            PostEventsWithHttpInfo(varEvent);
        }

        /// <summary>
        /// Send a Backend Event Events can be send directly from partner backend using the same authentication as the other endpoints
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Com.Hopper.Hts.Airlines.Client.ApiResponse<Object> PostEventsWithHttpInfo(Event varEvent, int operationIndex = 0)
        {
            // verify the required parameter 'varEvent' is set
            if (varEvent == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'varEvent' when calling AnalyticsApi->PostEvents");
            }

            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = varEvent;

            localVarRequestOptions.Operation = "AnalyticsApi.PostEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SessionAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("HC-Session-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", this.Configuration.GetApiKeyWithPrefix("HC-Session-ID"));
            }
            // authentication (PartnerAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a Backend Event Events can be send directly from partner backend using the same authentication as the other endpoints
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostEventsAsync(Event varEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await PostEventsWithHttpInfoAsync(varEvent, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Send a Backend Event Events can be send directly from partner backend using the same authentication as the other endpoints
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Com.Hopper.Hts.Airlines.Client.ApiResponse<Object>> PostEventsWithHttpInfoAsync(Event varEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'varEvent' is set
            if (varEvent == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'varEvent' when calling AnalyticsApi->PostEvents");
            }


            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = varEvent;

            localVarRequestOptions.Operation = "AnalyticsApi.PostEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SessionAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("HC-Session-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", this.Configuration.GetApiKeyWithPrefix("HC-Session-ID"));
            }
            // authentication (PartnerAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
