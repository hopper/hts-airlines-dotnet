// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Com.Hopper.Hts.Airlines.Client;
using Com.Hopper.Hts.Airlines.Model;
using System.Diagnostics.CodeAnalysis;

namespace Com.Hopper.Hts.Airlines.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICancelForAnyReasonCFARApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CancelForAnyReasonCFARApiEvents Events { get; }

        /// <summary>
        /// Get a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Get a CFAR contract
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCfarContractsIdApiResponse"/>&gt;</returns>
        Task<IGetCfarContractsIdApiResponse> GetCfarContractsIdAsync(string id, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Get a CFAR contract
        /// </remarks>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCfarContractsIdApiResponse"/>?&gt;</returns>
        Task<IGetCfarContractsIdApiResponse?> GetCfarContractsIdOrDefaultAsync(string id, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create CFAR Exercise
        /// </summary>
        /// <remarks>
        /// Record that a request to exercise a CFAR contract has occurred.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCfarContractExercisesApiResponse"/>&gt;</returns>
        Task<IPostCfarContractExercisesApiResponse> PostCfarContractExercisesAsync(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create CFAR Exercise
        /// </summary>
        /// <remarks>
        /// Record that a request to exercise a CFAR contract has occurred.
        /// </remarks>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCfarContractExercisesApiResponse"/>?&gt;</returns>
        Task<IPostCfarContractExercisesApiResponse?> PostCfarContractExercisesOrDefaultAsync(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Create a CFAR contract from selected CFAR offer(s).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCfarContractsApiResponse"/>&gt;</returns>
        Task<IPostCfarContractsApiResponse> PostCfarContractsAsync(CreateCfarContractRequest createCfarContractRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Create a CFAR contract from selected CFAR offer(s).
        /// </remarks>
        /// <param name="createCfarContractRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCfarContractsApiResponse"/>?&gt;</returns>
        Task<IPostCfarContractsApiResponse?> PostCfarContractsOrDefaultAsync(CreateCfarContractRequest createCfarContractRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process CFAR Payment
        /// </summary>
        /// <remarks>
        /// When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the CFAR fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl - -request POST - -url https://core.spreedly.com/v1/payment_methods.json - -header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; - -data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process CFAR Payment request below.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCfarContractsIdPaymentApiResponse"/>&gt;</returns>
        Task<IPostCfarContractsIdPaymentApiResponse> PostCfarContractsIdPaymentAsync(string id, ProcessCfarPaymentRequest processCfarPaymentRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process CFAR Payment
        /// </summary>
        /// <remarks>
        /// When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the CFAR fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl - -request POST - -url https://core.spreedly.com/v1/payment_methods.json - -header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; - -data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process CFAR Payment request below.
        /// </remarks>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCfarContractsIdPaymentApiResponse"/>?&gt;</returns>
        Task<IPostCfarContractsIdPaymentApiResponse?> PostCfarContractsIdPaymentOrDefaultAsync(string id, ProcessCfarPaymentRequest processCfarPaymentRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create CFAR Offers
        /// </summary>
        /// <remarks>
        /// Create CFAR offers for a user&#39;s trip
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarOfferRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCfarOffersApiResponse"/>&gt;</returns>
        Task<IPostCfarOffersApiResponse> PostCfarOffersAsync(CreateCfarOfferRequest createCfarOfferRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create CFAR Offers
        /// </summary>
        /// <remarks>
        /// Create CFAR offers for a user&#39;s trip
        /// </remarks>
        /// <param name="createCfarOfferRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCfarOffersApiResponse"/>?&gt;</returns>
        Task<IPostCfarOffersApiResponse?> PostCfarOffersOrDefaultAsync(CreateCfarOfferRequest createCfarOfferRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Complete CFAR Exercise
        /// </summary>
        /// <remarks>
        /// Record that a request to exercise a CFAR contract has been completed
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a exercise</param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCfarContractExercisesIdMarkCompletedApiResponse"/>&gt;</returns>
        Task<IPutCfarContractExercisesIdMarkCompletedApiResponse> PutCfarContractExercisesIdMarkCompletedAsync(string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Complete CFAR Exercise
        /// </summary>
        /// <remarks>
        /// Record that a request to exercise a CFAR contract has been completed
        /// </remarks>
        /// <param name="id">A unique identifier for a exercise</param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCfarContractExercisesIdMarkCompletedApiResponse"/>?&gt;</returns>
        Task<IPutCfarContractExercisesIdMarkCompletedApiResponse?> PutCfarContractExercisesIdMarkCompletedOrDefaultAsync(string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update forms of payment of a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Update forms of payment linked with a CFAR contract
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarFormOfPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCfarContractsIdFormsOfPaymentApiResponse"/>&gt;</returns>
        Task<IPutCfarContractsIdFormsOfPaymentApiResponse> PutCfarContractsIdFormsOfPaymentAsync(string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update forms of payment of a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Update forms of payment linked with a CFAR contract
        /// </remarks>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarFormOfPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCfarContractsIdFormsOfPaymentApiResponse"/>?&gt;</returns>
        Task<IPutCfarContractsIdFormsOfPaymentApiResponse?> PutCfarContractsIdFormsOfPaymentOrDefaultAsync(string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update CFAR Contract Status
        /// </summary>
        /// <remarks>
        /// Update the CFAR contract
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarContractRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCfarContractsIdUpdateStatusApiResponse"/>&gt;</returns>
        Task<IPutCfarContractsIdUpdateStatusApiResponse> PutCfarContractsIdUpdateStatusAsync(string id, UpdateCfarContractRequest updateCfarContractRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update CFAR Contract Status
        /// </summary>
        /// <remarks>
        /// Update the CFAR contract
        /// </remarks>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarContractRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCfarContractsIdUpdateStatusApiResponse"/>?&gt;</returns>
        Task<IPutCfarContractsIdUpdateStatusApiResponse?> PutCfarContractsIdUpdateStatusOrDefaultAsync(string id, UpdateCfarContractRequest updateCfarContractRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetCfarContractsIdApiResponse"/>
    /// </summary>
    public interface IGetCfarContractsIdApiResponse : Com.Hopper.Hts.Airlines.Client.IApiResponse, IOk<Com.Hopper.Hts.Airlines.Model.CfarContract?>, IBadRequest<Com.Hopper.Hts.Airlines.Model.BadRequest?>, IUnprocessableContent<Com.Hopper.Hts.Airlines.Model.UnprocessableEntity?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPostCfarContractExercisesApiResponse"/>
    /// </summary>
    public interface IPostCfarContractExercisesApiResponse : Com.Hopper.Hts.Airlines.Client.IApiResponse, ICreated<Com.Hopper.Hts.Airlines.Model.CfarContractExercise?>, IBadRequest<Com.Hopper.Hts.Airlines.Model.BadRequest?>, IUnprocessableContent<Com.Hopper.Hts.Airlines.Model.UnprocessableEntity?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPostCfarContractsApiResponse"/>
    /// </summary>
    public interface IPostCfarContractsApiResponse : Com.Hopper.Hts.Airlines.Client.IApiResponse, ICreated<Com.Hopper.Hts.Airlines.Model.CfarContract?>, IBadRequest<Com.Hopper.Hts.Airlines.Model.BadRequest?>, IUnprocessableContent<Com.Hopper.Hts.Airlines.Model.UnprocessableEntity?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPostCfarContractsIdPaymentApiResponse"/>
    /// </summary>
    public interface IPostCfarContractsIdPaymentApiResponse : Com.Hopper.Hts.Airlines.Client.IApiResponse, IOk<Com.Hopper.Hts.Airlines.Model.CfarPayment?>, IBadRequest<Com.Hopper.Hts.Airlines.Model.BadRequest?>, IUnprocessableContent<Com.Hopper.Hts.Airlines.Model.UnprocessableEntity?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPostCfarOffersApiResponse"/>
    /// </summary>
    public interface IPostCfarOffersApiResponse : Com.Hopper.Hts.Airlines.Client.IApiResponse, ICreated<List<CfarOffer>?>, IBadRequest<Com.Hopper.Hts.Airlines.Model.BadRequest?>, IUnprocessableContent<Com.Hopper.Hts.Airlines.Model.UnprocessableEntity?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutCfarContractExercisesIdMarkCompletedApiResponse"/>
    /// </summary>
    public interface IPutCfarContractExercisesIdMarkCompletedApiResponse : Com.Hopper.Hts.Airlines.Client.IApiResponse, IOk<Com.Hopper.Hts.Airlines.Model.CfarContractExercise?>, IBadRequest<Com.Hopper.Hts.Airlines.Model.BadRequest?>, IUnprocessableContent<Com.Hopper.Hts.Airlines.Model.UnprocessableEntity?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutCfarContractsIdFormsOfPaymentApiResponse"/>
    /// </summary>
    public interface IPutCfarContractsIdFormsOfPaymentApiResponse : Com.Hopper.Hts.Airlines.Client.IApiResponse, IOk<Com.Hopper.Hts.Airlines.Model.CfarContract?>, IBadRequest<Com.Hopper.Hts.Airlines.Model.BadRequest?>, IUnprocessableContent<Com.Hopper.Hts.Airlines.Model.UnprocessableEntity?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPutCfarContractsIdUpdateStatusApiResponse"/>
    /// </summary>
    public interface IPutCfarContractsIdUpdateStatusApiResponse : Com.Hopper.Hts.Airlines.Client.IApiResponse, IOk<Com.Hopper.Hts.Airlines.Model.CfarContract?>, IBadRequest<Com.Hopper.Hts.Airlines.Model.BadRequest?>, IUnprocessableContent<Com.Hopper.Hts.Airlines.Model.UnprocessableEntity?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CancelForAnyReasonCFARApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetCfarContractsId;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetCfarContractsId;

        internal void ExecuteOnGetCfarContractsId(CancelForAnyReasonCFARApi.GetCfarContractsIdApiResponse apiResponse)
        {
            OnGetCfarContractsId?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCfarContractsId(Exception exception)
        {
            OnErrorGetCfarContractsId?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostCfarContractExercises;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostCfarContractExercises;

        internal void ExecuteOnPostCfarContractExercises(CancelForAnyReasonCFARApi.PostCfarContractExercisesApiResponse apiResponse)
        {
            OnPostCfarContractExercises?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostCfarContractExercises(Exception exception)
        {
            OnErrorPostCfarContractExercises?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostCfarContracts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostCfarContracts;

        internal void ExecuteOnPostCfarContracts(CancelForAnyReasonCFARApi.PostCfarContractsApiResponse apiResponse)
        {
            OnPostCfarContracts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostCfarContracts(Exception exception)
        {
            OnErrorPostCfarContracts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostCfarContractsIdPayment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostCfarContractsIdPayment;

        internal void ExecuteOnPostCfarContractsIdPayment(CancelForAnyReasonCFARApi.PostCfarContractsIdPaymentApiResponse apiResponse)
        {
            OnPostCfarContractsIdPayment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostCfarContractsIdPayment(Exception exception)
        {
            OnErrorPostCfarContractsIdPayment?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostCfarOffers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostCfarOffers;

        internal void ExecuteOnPostCfarOffers(CancelForAnyReasonCFARApi.PostCfarOffersApiResponse apiResponse)
        {
            OnPostCfarOffers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostCfarOffers(Exception exception)
        {
            OnErrorPostCfarOffers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutCfarContractExercisesIdMarkCompleted;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutCfarContractExercisesIdMarkCompleted;

        internal void ExecuteOnPutCfarContractExercisesIdMarkCompleted(CancelForAnyReasonCFARApi.PutCfarContractExercisesIdMarkCompletedApiResponse apiResponse)
        {
            OnPutCfarContractExercisesIdMarkCompleted?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutCfarContractExercisesIdMarkCompleted(Exception exception)
        {
            OnErrorPutCfarContractExercisesIdMarkCompleted?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutCfarContractsIdFormsOfPayment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutCfarContractsIdFormsOfPayment;

        internal void ExecuteOnPutCfarContractsIdFormsOfPayment(CancelForAnyReasonCFARApi.PutCfarContractsIdFormsOfPaymentApiResponse apiResponse)
        {
            OnPutCfarContractsIdFormsOfPayment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutCfarContractsIdFormsOfPayment(Exception exception)
        {
            OnErrorPutCfarContractsIdFormsOfPayment?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutCfarContractsIdUpdateStatus;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutCfarContractsIdUpdateStatus;

        internal void ExecuteOnPutCfarContractsIdUpdateStatus(CancelForAnyReasonCFARApi.PutCfarContractsIdUpdateStatusApiResponse apiResponse)
        {
            OnPutCfarContractsIdUpdateStatus?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutCfarContractsIdUpdateStatus(Exception exception)
        {
            OnErrorPutCfarContractsIdUpdateStatus?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CancelForAnyReasonCFARApi : ICancelForAnyReasonCFARApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CancelForAnyReasonCFARApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CancelForAnyReasonCFARApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CancelForAnyReasonCFARApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CancelForAnyReasonCFARApi(ILogger<CancelForAnyReasonCFARApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CancelForAnyReasonCFARApiEvents cancelForAnyReasonCFARApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CancelForAnyReasonCFARApi>();
            HttpClient = httpClient;
            Events = cancelForAnyReasonCFARApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatGetCfarContractsId(ref string id, ref Option<string> hCSessionID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="hCSessionID"></param>
        /// <returns></returns>
        private void ValidateGetCfarContractsId(string id, Option<string> hCSessionID)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (hCSessionID.IsSet && hCSessionID.Value == null)
                throw new ArgumentNullException(nameof(hCSessionID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="hCSessionID"></param>
        private void AfterGetCfarContractsIdDefaultImplementation(IGetCfarContractsIdApiResponse apiResponseLocalVar, string id, Option<string> hCSessionID)
        {
            bool suppressDefaultLog = false;
            AfterGetCfarContractsId(ref suppressDefaultLog, apiResponseLocalVar, id, hCSessionID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="hCSessionID"></param>
        partial void AfterGetCfarContractsId(ref bool suppressDefaultLog, IGetCfarContractsIdApiResponse apiResponseLocalVar, string id, Option<string> hCSessionID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="hCSessionID"></param>
        private void OnErrorGetCfarContractsIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> hCSessionID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCfarContractsId(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, hCSessionID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="hCSessionID"></param>
        partial void OnErrorGetCfarContractsId(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> hCSessionID);

        /// <summary>
        /// Get a CFAR Contract Get a CFAR contract
        /// </summary>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCfarContractsIdApiResponse"/>&gt;</returns>
        public async Task<IGetCfarContractsIdApiResponse?> GetCfarContractsIdOrDefaultAsync(string id, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCfarContractsIdAsync(id, hCSessionID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a CFAR Contract Get a CFAR contract
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCfarContractsIdApiResponse"/>&gt;</returns>
        public async Task<IGetCfarContractsIdApiResponse> GetCfarContractsIdAsync(string id, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCfarContractsId(id, hCSessionID);

                FormatGetCfarContractsId(ref id, ref hCSessionID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cfar_contracts/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (hCSessionID.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("HC-Session-ID", ClientUtils.ParameterToString(hCSessionID.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetCfarContractsIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCfarContractsIdApiResponse>();

                        GetCfarContractsIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cfar_contracts/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCfarContractsIdDefaultImplementation(apiResponseLocalVar, id, hCSessionID);

                        Events.ExecuteOnGetCfarContractsId(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCfarContractsIdDefaultImplementation(e, "/cfar_contracts/{id}", uriBuilderLocalVar.Path, id, hCSessionID);
                Events.ExecuteOnErrorGetCfarContractsId(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCfarContractsIdApiResponse"/>
        /// </summary>
        public partial class GetCfarContractsIdApiResponse : Com.Hopper.Hts.Airlines.Client.ApiResponse, IGetCfarContractsIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCfarContractsIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCfarContractsIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCfarContractsIdApiResponse(ILogger<GetCfarContractsIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.CfarContract? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.CfarContract>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.CfarContract? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.BadRequest? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.BadRequest>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.BadRequest? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.UnprocessableEntity? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.UnprocessableEntity>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.UnprocessableEntity? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostCfarContractExercises(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, ref Option<string> hCSessionID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="hCSessionID"></param>
        /// <returns></returns>
        private void ValidatePostCfarContractExercises(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, Option<string> hCSessionID)
        {
            if (createCfarContractExerciseRequest == null)
                throw new ArgumentNullException(nameof(createCfarContractExerciseRequest));

            if (hCSessionID.IsSet && hCSessionID.Value == null)
                throw new ArgumentNullException(nameof(hCSessionID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="hCSessionID"></param>
        private void AfterPostCfarContractExercisesDefaultImplementation(IPostCfarContractExercisesApiResponse apiResponseLocalVar, CreateCfarContractExerciseRequest createCfarContractExerciseRequest, Option<string> hCSessionID)
        {
            bool suppressDefaultLog = false;
            AfterPostCfarContractExercises(ref suppressDefaultLog, apiResponseLocalVar, createCfarContractExerciseRequest, hCSessionID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="hCSessionID"></param>
        partial void AfterPostCfarContractExercises(ref bool suppressDefaultLog, IPostCfarContractExercisesApiResponse apiResponseLocalVar, CreateCfarContractExerciseRequest createCfarContractExerciseRequest, Option<string> hCSessionID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="hCSessionID"></param>
        private void OnErrorPostCfarContractExercisesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateCfarContractExerciseRequest createCfarContractExerciseRequest, Option<string> hCSessionID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostCfarContractExercises(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createCfarContractExerciseRequest, hCSessionID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="hCSessionID"></param>
        partial void OnErrorPostCfarContractExercises(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateCfarContractExerciseRequest createCfarContractExerciseRequest, Option<string> hCSessionID);

        /// <summary>
        /// Create CFAR Exercise Record that a request to exercise a CFAR contract has occurred.
        /// </summary>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCfarContractExercisesApiResponse"/>&gt;</returns>
        public async Task<IPostCfarContractExercisesApiResponse?> PostCfarContractExercisesOrDefaultAsync(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostCfarContractExercisesAsync(createCfarContractExerciseRequest, hCSessionID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create CFAR Exercise Record that a request to exercise a CFAR contract has occurred.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCfarContractExercisesApiResponse"/>&gt;</returns>
        public async Task<IPostCfarContractExercisesApiResponse> PostCfarContractExercisesAsync(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostCfarContractExercises(createCfarContractExerciseRequest, hCSessionID);

                FormatPostCfarContractExercises(createCfarContractExerciseRequest, ref hCSessionID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cfar_contract_exercises";

                    if (hCSessionID.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("HC-Session-ID", ClientUtils.ParameterToString(hCSessionID.Value));

                    httpRequestMessageLocalVar.Content = (createCfarContractExerciseRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createCfarContractExerciseRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostCfarContractExercisesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostCfarContractExercisesApiResponse>();

                        PostCfarContractExercisesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cfar_contract_exercises", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostCfarContractExercisesDefaultImplementation(apiResponseLocalVar, createCfarContractExerciseRequest, hCSessionID);

                        Events.ExecuteOnPostCfarContractExercises(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostCfarContractExercisesDefaultImplementation(e, "/cfar_contract_exercises", uriBuilderLocalVar.Path, createCfarContractExerciseRequest, hCSessionID);
                Events.ExecuteOnErrorPostCfarContractExercises(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostCfarContractExercisesApiResponse"/>
        /// </summary>
        public partial class PostCfarContractExercisesApiResponse : Com.Hopper.Hts.Airlines.Client.ApiResponse, IPostCfarContractExercisesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostCfarContractExercisesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostCfarContractExercisesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostCfarContractExercisesApiResponse(ILogger<PostCfarContractExercisesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.CfarContractExercise? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.CfarContractExercise>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.CfarContractExercise? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.BadRequest? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.BadRequest>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.BadRequest? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.UnprocessableEntity? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.UnprocessableEntity>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.UnprocessableEntity? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostCfarContracts(CreateCfarContractRequest createCfarContractRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createCfarContractRequest"></param>
        /// <returns></returns>
        private void ValidatePostCfarContracts(CreateCfarContractRequest createCfarContractRequest)
        {
            if (createCfarContractRequest == null)
                throw new ArgumentNullException(nameof(createCfarContractRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createCfarContractRequest"></param>
        private void AfterPostCfarContractsDefaultImplementation(IPostCfarContractsApiResponse apiResponseLocalVar, CreateCfarContractRequest createCfarContractRequest)
        {
            bool suppressDefaultLog = false;
            AfterPostCfarContracts(ref suppressDefaultLog, apiResponseLocalVar, createCfarContractRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createCfarContractRequest"></param>
        partial void AfterPostCfarContracts(ref bool suppressDefaultLog, IPostCfarContractsApiResponse apiResponseLocalVar, CreateCfarContractRequest createCfarContractRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createCfarContractRequest"></param>
        private void OnErrorPostCfarContractsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateCfarContractRequest createCfarContractRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostCfarContracts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createCfarContractRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createCfarContractRequest"></param>
        partial void OnErrorPostCfarContracts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateCfarContractRequest createCfarContractRequest);

        /// <summary>
        /// Create a CFAR Contract Create a CFAR contract from selected CFAR offer(s).
        /// </summary>
        /// <param name="createCfarContractRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCfarContractsApiResponse"/>&gt;</returns>
        public async Task<IPostCfarContractsApiResponse?> PostCfarContractsOrDefaultAsync(CreateCfarContractRequest createCfarContractRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostCfarContractsAsync(createCfarContractRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a CFAR Contract Create a CFAR contract from selected CFAR offer(s).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCfarContractsApiResponse"/>&gt;</returns>
        public async Task<IPostCfarContractsApiResponse> PostCfarContractsAsync(CreateCfarContractRequest createCfarContractRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostCfarContracts(createCfarContractRequest);

                FormatPostCfarContracts(createCfarContractRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cfar_contracts";

                    httpRequestMessageLocalVar.Content = (createCfarContractRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createCfarContractRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostCfarContractsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostCfarContractsApiResponse>();

                        PostCfarContractsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cfar_contracts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostCfarContractsDefaultImplementation(apiResponseLocalVar, createCfarContractRequest);

                        Events.ExecuteOnPostCfarContracts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostCfarContractsDefaultImplementation(e, "/cfar_contracts", uriBuilderLocalVar.Path, createCfarContractRequest);
                Events.ExecuteOnErrorPostCfarContracts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostCfarContractsApiResponse"/>
        /// </summary>
        public partial class PostCfarContractsApiResponse : Com.Hopper.Hts.Airlines.Client.ApiResponse, IPostCfarContractsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostCfarContractsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostCfarContractsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostCfarContractsApiResponse(ILogger<PostCfarContractsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.CfarContract? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.CfarContract>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.CfarContract? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.BadRequest? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.BadRequest>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.BadRequest? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.UnprocessableEntity? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.UnprocessableEntity>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.UnprocessableEntity? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostCfarContractsIdPayment(ref string id, ProcessCfarPaymentRequest processCfarPaymentRequest, ref Option<string> hCSessionID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="hCSessionID"></param>
        /// <returns></returns>
        private void ValidatePostCfarContractsIdPayment(string id, ProcessCfarPaymentRequest processCfarPaymentRequest, Option<string> hCSessionID)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (processCfarPaymentRequest == null)
                throw new ArgumentNullException(nameof(processCfarPaymentRequest));

            if (hCSessionID.IsSet && hCSessionID.Value == null)
                throw new ArgumentNullException(nameof(hCSessionID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="hCSessionID"></param>
        private void AfterPostCfarContractsIdPaymentDefaultImplementation(IPostCfarContractsIdPaymentApiResponse apiResponseLocalVar, string id, ProcessCfarPaymentRequest processCfarPaymentRequest, Option<string> hCSessionID)
        {
            bool suppressDefaultLog = false;
            AfterPostCfarContractsIdPayment(ref suppressDefaultLog, apiResponseLocalVar, id, processCfarPaymentRequest, hCSessionID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="hCSessionID"></param>
        partial void AfterPostCfarContractsIdPayment(ref bool suppressDefaultLog, IPostCfarContractsIdPaymentApiResponse apiResponseLocalVar, string id, ProcessCfarPaymentRequest processCfarPaymentRequest, Option<string> hCSessionID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="hCSessionID"></param>
        private void OnErrorPostCfarContractsIdPaymentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, ProcessCfarPaymentRequest processCfarPaymentRequest, Option<string> hCSessionID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostCfarContractsIdPayment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, processCfarPaymentRequest, hCSessionID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="hCSessionID"></param>
        partial void OnErrorPostCfarContractsIdPayment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, ProcessCfarPaymentRequest processCfarPaymentRequest, Option<string> hCSessionID);

        /// <summary>
        /// Process CFAR Payment When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the CFAR fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl - -request POST - -url https://core.spreedly.com/v1/payment_methods.json - -header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; - -data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process CFAR Payment request below.
        /// </summary>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCfarContractsIdPaymentApiResponse"/>&gt;</returns>
        public async Task<IPostCfarContractsIdPaymentApiResponse?> PostCfarContractsIdPaymentOrDefaultAsync(string id, ProcessCfarPaymentRequest processCfarPaymentRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostCfarContractsIdPaymentAsync(id, processCfarPaymentRequest, hCSessionID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Process CFAR Payment When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the CFAR fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl - -request POST - -url https://core.spreedly.com/v1/payment_methods.json - -header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; - -data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process CFAR Payment request below.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCfarContractsIdPaymentApiResponse"/>&gt;</returns>
        public async Task<IPostCfarContractsIdPaymentApiResponse> PostCfarContractsIdPaymentAsync(string id, ProcessCfarPaymentRequest processCfarPaymentRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostCfarContractsIdPayment(id, processCfarPaymentRequest, hCSessionID);

                FormatPostCfarContractsIdPayment(ref id, processCfarPaymentRequest, ref hCSessionID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cfar_contracts/{id}/payment";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (hCSessionID.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("HC-Session-ID", ClientUtils.ParameterToString(hCSessionID.Value));

                    httpRequestMessageLocalVar.Content = (processCfarPaymentRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(processCfarPaymentRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostCfarContractsIdPaymentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostCfarContractsIdPaymentApiResponse>();

                        PostCfarContractsIdPaymentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cfar_contracts/{id}/payment", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostCfarContractsIdPaymentDefaultImplementation(apiResponseLocalVar, id, processCfarPaymentRequest, hCSessionID);

                        Events.ExecuteOnPostCfarContractsIdPayment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostCfarContractsIdPaymentDefaultImplementation(e, "/cfar_contracts/{id}/payment", uriBuilderLocalVar.Path, id, processCfarPaymentRequest, hCSessionID);
                Events.ExecuteOnErrorPostCfarContractsIdPayment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostCfarContractsIdPaymentApiResponse"/>
        /// </summary>
        public partial class PostCfarContractsIdPaymentApiResponse : Com.Hopper.Hts.Airlines.Client.ApiResponse, IPostCfarContractsIdPaymentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostCfarContractsIdPaymentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostCfarContractsIdPaymentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostCfarContractsIdPaymentApiResponse(ILogger<PostCfarContractsIdPaymentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.CfarPayment? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.CfarPayment>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.CfarPayment? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.BadRequest? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.BadRequest>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.BadRequest? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.UnprocessableEntity? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.UnprocessableEntity>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.UnprocessableEntity? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostCfarOffers(CreateCfarOfferRequest createCfarOfferRequest, ref Option<string> hCSessionID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createCfarOfferRequest"></param>
        /// <param name="hCSessionID"></param>
        /// <returns></returns>
        private void ValidatePostCfarOffers(CreateCfarOfferRequest createCfarOfferRequest, Option<string> hCSessionID)
        {
            if (createCfarOfferRequest == null)
                throw new ArgumentNullException(nameof(createCfarOfferRequest));

            if (hCSessionID.IsSet && hCSessionID.Value == null)
                throw new ArgumentNullException(nameof(hCSessionID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createCfarOfferRequest"></param>
        /// <param name="hCSessionID"></param>
        private void AfterPostCfarOffersDefaultImplementation(IPostCfarOffersApiResponse apiResponseLocalVar, CreateCfarOfferRequest createCfarOfferRequest, Option<string> hCSessionID)
        {
            bool suppressDefaultLog = false;
            AfterPostCfarOffers(ref suppressDefaultLog, apiResponseLocalVar, createCfarOfferRequest, hCSessionID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createCfarOfferRequest"></param>
        /// <param name="hCSessionID"></param>
        partial void AfterPostCfarOffers(ref bool suppressDefaultLog, IPostCfarOffersApiResponse apiResponseLocalVar, CreateCfarOfferRequest createCfarOfferRequest, Option<string> hCSessionID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createCfarOfferRequest"></param>
        /// <param name="hCSessionID"></param>
        private void OnErrorPostCfarOffersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateCfarOfferRequest createCfarOfferRequest, Option<string> hCSessionID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostCfarOffers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createCfarOfferRequest, hCSessionID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createCfarOfferRequest"></param>
        /// <param name="hCSessionID"></param>
        partial void OnErrorPostCfarOffers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateCfarOfferRequest createCfarOfferRequest, Option<string> hCSessionID);

        /// <summary>
        /// Create CFAR Offers Create CFAR offers for a user&#39;s trip
        /// </summary>
        /// <param name="createCfarOfferRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCfarOffersApiResponse"/>&gt;</returns>
        public async Task<IPostCfarOffersApiResponse?> PostCfarOffersOrDefaultAsync(CreateCfarOfferRequest createCfarOfferRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostCfarOffersAsync(createCfarOfferRequest, hCSessionID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create CFAR Offers Create CFAR offers for a user&#39;s trip
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarOfferRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostCfarOffersApiResponse"/>&gt;</returns>
        public async Task<IPostCfarOffersApiResponse> PostCfarOffersAsync(CreateCfarOfferRequest createCfarOfferRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostCfarOffers(createCfarOfferRequest, hCSessionID);

                FormatPostCfarOffers(createCfarOfferRequest, ref hCSessionID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cfar_offers";

                    if (hCSessionID.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("HC-Session-ID", ClientUtils.ParameterToString(hCSessionID.Value));

                    httpRequestMessageLocalVar.Content = (createCfarOfferRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createCfarOfferRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostCfarOffersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostCfarOffersApiResponse>();

                        PostCfarOffersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cfar_offers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostCfarOffersDefaultImplementation(apiResponseLocalVar, createCfarOfferRequest, hCSessionID);

                        Events.ExecuteOnPostCfarOffers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostCfarOffersDefaultImplementation(e, "/cfar_offers", uriBuilderLocalVar.Path, createCfarOfferRequest, hCSessionID);
                Events.ExecuteOnErrorPostCfarOffers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostCfarOffersApiResponse"/>
        /// </summary>
        public partial class PostCfarOffersApiResponse : Com.Hopper.Hts.Airlines.Client.ApiResponse, IPostCfarOffersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostCfarOffersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostCfarOffersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostCfarOffersApiResponse(ILogger<PostCfarOffersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public List<CfarOffer>? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<List<CfarOffer>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out List<CfarOffer>? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.BadRequest? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.BadRequest>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.BadRequest? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.UnprocessableEntity? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.UnprocessableEntity>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.UnprocessableEntity? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutCfarContractExercisesIdMarkCompleted(ref string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, ref Option<string> hCSessionID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="hCSessionID"></param>
        /// <returns></returns>
        private void ValidatePutCfarContractExercisesIdMarkCompleted(string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, Option<string> hCSessionID)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (markCfarContractExerciseCompleteRequest == null)
                throw new ArgumentNullException(nameof(markCfarContractExerciseCompleteRequest));

            if (hCSessionID.IsSet && hCSessionID.Value == null)
                throw new ArgumentNullException(nameof(hCSessionID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="hCSessionID"></param>
        private void AfterPutCfarContractExercisesIdMarkCompletedDefaultImplementation(IPutCfarContractExercisesIdMarkCompletedApiResponse apiResponseLocalVar, string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, Option<string> hCSessionID)
        {
            bool suppressDefaultLog = false;
            AfterPutCfarContractExercisesIdMarkCompleted(ref suppressDefaultLog, apiResponseLocalVar, id, markCfarContractExerciseCompleteRequest, hCSessionID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="hCSessionID"></param>
        partial void AfterPutCfarContractExercisesIdMarkCompleted(ref bool suppressDefaultLog, IPutCfarContractExercisesIdMarkCompletedApiResponse apiResponseLocalVar, string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, Option<string> hCSessionID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="hCSessionID"></param>
        private void OnErrorPutCfarContractExercisesIdMarkCompletedDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, Option<string> hCSessionID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutCfarContractExercisesIdMarkCompleted(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, markCfarContractExerciseCompleteRequest, hCSessionID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="hCSessionID"></param>
        partial void OnErrorPutCfarContractExercisesIdMarkCompleted(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, Option<string> hCSessionID);

        /// <summary>
        /// Complete CFAR Exercise Record that a request to exercise a CFAR contract has been completed
        /// </summary>
        /// <param name="id">A unique identifier for a exercise</param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCfarContractExercisesIdMarkCompletedApiResponse"/>&gt;</returns>
        public async Task<IPutCfarContractExercisesIdMarkCompletedApiResponse?> PutCfarContractExercisesIdMarkCompletedOrDefaultAsync(string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutCfarContractExercisesIdMarkCompletedAsync(id, markCfarContractExerciseCompleteRequest, hCSessionID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Complete CFAR Exercise Record that a request to exercise a CFAR contract has been completed
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a exercise</param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCfarContractExercisesIdMarkCompletedApiResponse"/>&gt;</returns>
        public async Task<IPutCfarContractExercisesIdMarkCompletedApiResponse> PutCfarContractExercisesIdMarkCompletedAsync(string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutCfarContractExercisesIdMarkCompleted(id, markCfarContractExerciseCompleteRequest, hCSessionID);

                FormatPutCfarContractExercisesIdMarkCompleted(ref id, markCfarContractExerciseCompleteRequest, ref hCSessionID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cfar_contract_exercises/{id}/mark_completed";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (hCSessionID.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("HC-Session-ID", ClientUtils.ParameterToString(hCSessionID.Value));

                    httpRequestMessageLocalVar.Content = (markCfarContractExerciseCompleteRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(markCfarContractExerciseCompleteRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutCfarContractExercisesIdMarkCompletedApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutCfarContractExercisesIdMarkCompletedApiResponse>();

                        PutCfarContractExercisesIdMarkCompletedApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cfar_contract_exercises/{id}/mark_completed", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutCfarContractExercisesIdMarkCompletedDefaultImplementation(apiResponseLocalVar, id, markCfarContractExerciseCompleteRequest, hCSessionID);

                        Events.ExecuteOnPutCfarContractExercisesIdMarkCompleted(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutCfarContractExercisesIdMarkCompletedDefaultImplementation(e, "/cfar_contract_exercises/{id}/mark_completed", uriBuilderLocalVar.Path, id, markCfarContractExerciseCompleteRequest, hCSessionID);
                Events.ExecuteOnErrorPutCfarContractExercisesIdMarkCompleted(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutCfarContractExercisesIdMarkCompletedApiResponse"/>
        /// </summary>
        public partial class PutCfarContractExercisesIdMarkCompletedApiResponse : Com.Hopper.Hts.Airlines.Client.ApiResponse, IPutCfarContractExercisesIdMarkCompletedApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutCfarContractExercisesIdMarkCompletedApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutCfarContractExercisesIdMarkCompletedApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutCfarContractExercisesIdMarkCompletedApiResponse(ILogger<PutCfarContractExercisesIdMarkCompletedApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.CfarContractExercise? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.CfarContractExercise>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.CfarContractExercise? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.BadRequest? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.BadRequest>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.BadRequest? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.UnprocessableEntity? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.UnprocessableEntity>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.UnprocessableEntity? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutCfarContractsIdFormsOfPayment(ref string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, ref Option<string> hCSessionID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="updateCfarFormOfPaymentRequest"></param>
        /// <param name="hCSessionID"></param>
        /// <returns></returns>
        private void ValidatePutCfarContractsIdFormsOfPayment(string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, Option<string> hCSessionID)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (updateCfarFormOfPaymentRequest == null)
                throw new ArgumentNullException(nameof(updateCfarFormOfPaymentRequest));

            if (hCSessionID.IsSet && hCSessionID.Value == null)
                throw new ArgumentNullException(nameof(hCSessionID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateCfarFormOfPaymentRequest"></param>
        /// <param name="hCSessionID"></param>
        private void AfterPutCfarContractsIdFormsOfPaymentDefaultImplementation(IPutCfarContractsIdFormsOfPaymentApiResponse apiResponseLocalVar, string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, Option<string> hCSessionID)
        {
            bool suppressDefaultLog = false;
            AfterPutCfarContractsIdFormsOfPayment(ref suppressDefaultLog, apiResponseLocalVar, id, updateCfarFormOfPaymentRequest, hCSessionID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateCfarFormOfPaymentRequest"></param>
        /// <param name="hCSessionID"></param>
        partial void AfterPutCfarContractsIdFormsOfPayment(ref bool suppressDefaultLog, IPutCfarContractsIdFormsOfPaymentApiResponse apiResponseLocalVar, string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, Option<string> hCSessionID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateCfarFormOfPaymentRequest"></param>
        /// <param name="hCSessionID"></param>
        private void OnErrorPutCfarContractsIdFormsOfPaymentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, Option<string> hCSessionID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutCfarContractsIdFormsOfPayment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, updateCfarFormOfPaymentRequest, hCSessionID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateCfarFormOfPaymentRequest"></param>
        /// <param name="hCSessionID"></param>
        partial void OnErrorPutCfarContractsIdFormsOfPayment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, Option<string> hCSessionID);

        /// <summary>
        /// Update forms of payment of a CFAR Contract Update forms of payment linked with a CFAR contract
        /// </summary>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarFormOfPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCfarContractsIdFormsOfPaymentApiResponse"/>&gt;</returns>
        public async Task<IPutCfarContractsIdFormsOfPaymentApiResponse?> PutCfarContractsIdFormsOfPaymentOrDefaultAsync(string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutCfarContractsIdFormsOfPaymentAsync(id, updateCfarFormOfPaymentRequest, hCSessionID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update forms of payment of a CFAR Contract Update forms of payment linked with a CFAR contract
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarFormOfPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCfarContractsIdFormsOfPaymentApiResponse"/>&gt;</returns>
        public async Task<IPutCfarContractsIdFormsOfPaymentApiResponse> PutCfarContractsIdFormsOfPaymentAsync(string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutCfarContractsIdFormsOfPayment(id, updateCfarFormOfPaymentRequest, hCSessionID);

                FormatPutCfarContractsIdFormsOfPayment(ref id, updateCfarFormOfPaymentRequest, ref hCSessionID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cfar_contracts/{id}/forms_of_payment";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (hCSessionID.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("HC-Session-ID", ClientUtils.ParameterToString(hCSessionID.Value));

                    httpRequestMessageLocalVar.Content = (updateCfarFormOfPaymentRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateCfarFormOfPaymentRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutCfarContractsIdFormsOfPaymentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutCfarContractsIdFormsOfPaymentApiResponse>();

                        PutCfarContractsIdFormsOfPaymentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cfar_contracts/{id}/forms_of_payment", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutCfarContractsIdFormsOfPaymentDefaultImplementation(apiResponseLocalVar, id, updateCfarFormOfPaymentRequest, hCSessionID);

                        Events.ExecuteOnPutCfarContractsIdFormsOfPayment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutCfarContractsIdFormsOfPaymentDefaultImplementation(e, "/cfar_contracts/{id}/forms_of_payment", uriBuilderLocalVar.Path, id, updateCfarFormOfPaymentRequest, hCSessionID);
                Events.ExecuteOnErrorPutCfarContractsIdFormsOfPayment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutCfarContractsIdFormsOfPaymentApiResponse"/>
        /// </summary>
        public partial class PutCfarContractsIdFormsOfPaymentApiResponse : Com.Hopper.Hts.Airlines.Client.ApiResponse, IPutCfarContractsIdFormsOfPaymentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutCfarContractsIdFormsOfPaymentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutCfarContractsIdFormsOfPaymentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutCfarContractsIdFormsOfPaymentApiResponse(ILogger<PutCfarContractsIdFormsOfPaymentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.CfarContract? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.CfarContract>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.CfarContract? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.BadRequest? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.BadRequest>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.BadRequest? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.UnprocessableEntity? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.UnprocessableEntity>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.UnprocessableEntity? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutCfarContractsIdUpdateStatus(ref string id, UpdateCfarContractRequest updateCfarContractRequest, ref Option<string> hCSessionID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="updateCfarContractRequest"></param>
        /// <param name="hCSessionID"></param>
        /// <returns></returns>
        private void ValidatePutCfarContractsIdUpdateStatus(string id, UpdateCfarContractRequest updateCfarContractRequest, Option<string> hCSessionID)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (updateCfarContractRequest == null)
                throw new ArgumentNullException(nameof(updateCfarContractRequest));

            if (hCSessionID.IsSet && hCSessionID.Value == null)
                throw new ArgumentNullException(nameof(hCSessionID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateCfarContractRequest"></param>
        /// <param name="hCSessionID"></param>
        private void AfterPutCfarContractsIdUpdateStatusDefaultImplementation(IPutCfarContractsIdUpdateStatusApiResponse apiResponseLocalVar, string id, UpdateCfarContractRequest updateCfarContractRequest, Option<string> hCSessionID)
        {
            bool suppressDefaultLog = false;
            AfterPutCfarContractsIdUpdateStatus(ref suppressDefaultLog, apiResponseLocalVar, id, updateCfarContractRequest, hCSessionID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateCfarContractRequest"></param>
        /// <param name="hCSessionID"></param>
        partial void AfterPutCfarContractsIdUpdateStatus(ref bool suppressDefaultLog, IPutCfarContractsIdUpdateStatusApiResponse apiResponseLocalVar, string id, UpdateCfarContractRequest updateCfarContractRequest, Option<string> hCSessionID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateCfarContractRequest"></param>
        /// <param name="hCSessionID"></param>
        private void OnErrorPutCfarContractsIdUpdateStatusDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, UpdateCfarContractRequest updateCfarContractRequest, Option<string> hCSessionID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutCfarContractsIdUpdateStatus(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, updateCfarContractRequest, hCSessionID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateCfarContractRequest"></param>
        /// <param name="hCSessionID"></param>
        partial void OnErrorPutCfarContractsIdUpdateStatus(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, UpdateCfarContractRequest updateCfarContractRequest, Option<string> hCSessionID);

        /// <summary>
        /// Update CFAR Contract Status Update the CFAR contract
        /// </summary>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarContractRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCfarContractsIdUpdateStatusApiResponse"/>&gt;</returns>
        public async Task<IPutCfarContractsIdUpdateStatusApiResponse?> PutCfarContractsIdUpdateStatusOrDefaultAsync(string id, UpdateCfarContractRequest updateCfarContractRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutCfarContractsIdUpdateStatusAsync(id, updateCfarContractRequest, hCSessionID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update CFAR Contract Status Update the CFAR contract
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarContractRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutCfarContractsIdUpdateStatusApiResponse"/>&gt;</returns>
        public async Task<IPutCfarContractsIdUpdateStatusApiResponse> PutCfarContractsIdUpdateStatusAsync(string id, UpdateCfarContractRequest updateCfarContractRequest, Option<string> hCSessionID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutCfarContractsIdUpdateStatus(id, updateCfarContractRequest, hCSessionID);

                FormatPutCfarContractsIdUpdateStatus(ref id, updateCfarContractRequest, ref hCSessionID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cfar_contracts/{id}/update_status";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (hCSessionID.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("HC-Session-ID", ClientUtils.ParameterToString(hCSessionID.Value));

                    httpRequestMessageLocalVar.Content = (updateCfarContractRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateCfarContractRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutCfarContractsIdUpdateStatusApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutCfarContractsIdUpdateStatusApiResponse>();

                        PutCfarContractsIdUpdateStatusApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cfar_contracts/{id}/update_status", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutCfarContractsIdUpdateStatusDefaultImplementation(apiResponseLocalVar, id, updateCfarContractRequest, hCSessionID);

                        Events.ExecuteOnPutCfarContractsIdUpdateStatus(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutCfarContractsIdUpdateStatusDefaultImplementation(e, "/cfar_contracts/{id}/update_status", uriBuilderLocalVar.Path, id, updateCfarContractRequest, hCSessionID);
                Events.ExecuteOnErrorPutCfarContractsIdUpdateStatus(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutCfarContractsIdUpdateStatusApiResponse"/>
        /// </summary>
        public partial class PutCfarContractsIdUpdateStatusApiResponse : Com.Hopper.Hts.Airlines.Client.ApiResponse, IPutCfarContractsIdUpdateStatusApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutCfarContractsIdUpdateStatusApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutCfarContractsIdUpdateStatusApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutCfarContractsIdUpdateStatusApiResponse(ILogger<PutCfarContractsIdUpdateStatusApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.CfarContract? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.CfarContract>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.CfarContract? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.BadRequest? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.BadRequest>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.BadRequest? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Com.Hopper.Hts.Airlines.Model.UnprocessableEntity? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Com.Hopper.Hts.Airlines.Model.UnprocessableEntity>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Com.Hopper.Hts.Airlines.Model.UnprocessableEntity? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
