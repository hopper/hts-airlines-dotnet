/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Hopper.Hts.Airlines.Client;
using Com.Hopper.Hts.Airlines.Model;

namespace Com.Hopper.Hts.Airlines.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICancelForAnyReasonCFARApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Get a CFAR contract
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CfarContract</returns>
        CfarContract GetCfarContractsId(string id, int operationIndex = 0);

        /// <summary>
        /// Get a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Get a CFAR contract
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CfarContract</returns>
        ApiResponse<CfarContract> GetCfarContractsIdWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get CFAR Offers
        /// </summary>
        /// <remarks>
        /// Get CFAR offers
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions)</param>
        /// <param name="offerId">List of unique identifier for an offer (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCfarOfferResponse</returns>
        GetCfarOfferResponse GetCustomerCfarOffers(string hCSessionID, List<string>? offerId = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Get CFAR Offers
        /// </summary>
        /// <remarks>
        /// Get CFAR offers
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions)</param>
        /// <param name="offerId">List of unique identifier for an offer (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCfarOfferResponse</returns>
        ApiResponse<GetCfarOfferResponse> GetCustomerCfarOffersWithHttpInfo(string hCSessionID, List<string>? offerId = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Create CFAR Exercise
        /// </summary>
        /// <remarks>
        /// Record that a request to exercise a CFAR contract has occurred.
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CfarContractExercise</returns>
        CfarContractExercise PostCfarContractExercises(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, string? hCSessionID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create CFAR Exercise
        /// </summary>
        /// <remarks>
        /// Record that a request to exercise a CFAR contract has occurred.
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CfarContractExercise</returns>
        ApiResponse<CfarContractExercise> PostCfarContractExercisesWithHttpInfo(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, string? hCSessionID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Create a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Create a CFAR contract from selected CFAR offer(s).
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CfarContract</returns>
        CfarContract PostCfarContracts(CreateCfarContractRequest createCfarContractRequest, int operationIndex = 0);

        /// <summary>
        /// Create a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Create a CFAR contract from selected CFAR offer(s).
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CfarContract</returns>
        ApiResponse<CfarContract> PostCfarContractsWithHttpInfo(CreateCfarContractRequest createCfarContractRequest, int operationIndex = 0);
        /// <summary>
        /// Process CFAR Payment
        /// </summary>
        /// <remarks>
        /// When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the CFAR fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl - -request POST - -url https://core.spreedly.com/v1/payment_methods.json - -header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; - -data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process CFAR Payment request below.
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CfarPayment</returns>
        CfarPayment PostCfarContractsIdPayment(string id, ProcessCfarPaymentRequest processCfarPaymentRequest, string? hCSessionID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Process CFAR Payment
        /// </summary>
        /// <remarks>
        /// When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the CFAR fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl - -request POST - -url https://core.spreedly.com/v1/payment_methods.json - -header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; - -data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process CFAR Payment request below.
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CfarPayment</returns>
        ApiResponse<CfarPayment> PostCfarContractsIdPaymentWithHttpInfo(string id, ProcessCfarPaymentRequest processCfarPaymentRequest, string? hCSessionID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Create CFAR Offers
        /// </summary>
        /// <remarks>
        /// Create CFAR offers for a user&#39;s trip
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarOfferRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CfarOffer&gt;</returns>
        List<CfarOffer> PostCfarOffers(CreateCfarOfferRequest createCfarOfferRequest, string? hCSessionID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create CFAR Offers
        /// </summary>
        /// <remarks>
        /// Create CFAR offers for a user&#39;s trip
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarOfferRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CfarOffer&gt;</returns>
        ApiResponse<List<CfarOffer>> PostCfarOffersWithHttpInfo(CreateCfarOfferRequest createCfarOfferRequest, string? hCSessionID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Complete CFAR Exercise
        /// </summary>
        /// <remarks>
        /// Record that a request to exercise a CFAR contract has been completed
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a exercise</param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CfarContractExercise</returns>
        CfarContractExercise PutCfarContractExercisesIdMarkCompleted(string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, string? hCSessionID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Complete CFAR Exercise
        /// </summary>
        /// <remarks>
        /// Record that a request to exercise a CFAR contract has been completed
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a exercise</param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CfarContractExercise</returns>
        ApiResponse<CfarContractExercise> PutCfarContractExercisesIdMarkCompletedWithHttpInfo(string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, string? hCSessionID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update forms of payment of a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Update forms of payment linked with a CFAR contract
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarFormOfPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CfarContract</returns>
        CfarContract PutCfarContractsIdFormsOfPayment(string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, string? hCSessionID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Update forms of payment of a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Update forms of payment linked with a CFAR contract
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarFormOfPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CfarContract</returns>
        ApiResponse<CfarContract> PutCfarContractsIdFormsOfPaymentWithHttpInfo(string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, string? hCSessionID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update CFAR Contract Status
        /// </summary>
        /// <remarks>
        /// Update the CFAR contract
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarContractRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CfarContract</returns>
        CfarContract PutCfarContractsIdUpdateStatus(string id, UpdateCfarContractRequest updateCfarContractRequest, string? hCSessionID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Update CFAR Contract Status
        /// </summary>
        /// <remarks>
        /// Update the CFAR contract
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarContractRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CfarContract</returns>
        ApiResponse<CfarContract> PutCfarContractsIdUpdateStatusWithHttpInfo(string id, UpdateCfarContractRequest updateCfarContractRequest, string? hCSessionID = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICancelForAnyReasonCFARApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Get a CFAR contract
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CfarContract</returns>
        System.Threading.Tasks.Task<CfarContract> GetCfarContractsIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Get a CFAR contract
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CfarContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<CfarContract>> GetCfarContractsIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get CFAR Offers
        /// </summary>
        /// <remarks>
        /// Get CFAR offers
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions)</param>
        /// <param name="offerId">List of unique identifier for an offer (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCfarOfferResponse</returns>
        System.Threading.Tasks.Task<GetCfarOfferResponse> GetCustomerCfarOffersAsync(string hCSessionID, List<string>? offerId = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get CFAR Offers
        /// </summary>
        /// <remarks>
        /// Get CFAR offers
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions)</param>
        /// <param name="offerId">List of unique identifier for an offer (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCfarOfferResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCfarOfferResponse>> GetCustomerCfarOffersWithHttpInfoAsync(string hCSessionID, List<string>? offerId = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create CFAR Exercise
        /// </summary>
        /// <remarks>
        /// Record that a request to exercise a CFAR contract has occurred.
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CfarContractExercise</returns>
        System.Threading.Tasks.Task<CfarContractExercise> PostCfarContractExercisesAsync(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create CFAR Exercise
        /// </summary>
        /// <remarks>
        /// Record that a request to exercise a CFAR contract has occurred.
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CfarContractExercise)</returns>
        System.Threading.Tasks.Task<ApiResponse<CfarContractExercise>> PostCfarContractExercisesWithHttpInfoAsync(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Create a CFAR contract from selected CFAR offer(s).
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CfarContract</returns>
        System.Threading.Tasks.Task<CfarContract> PostCfarContractsAsync(CreateCfarContractRequest createCfarContractRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Create a CFAR contract from selected CFAR offer(s).
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CfarContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<CfarContract>> PostCfarContractsWithHttpInfoAsync(CreateCfarContractRequest createCfarContractRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Process CFAR Payment
        /// </summary>
        /// <remarks>
        /// When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the CFAR fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl - -request POST - -url https://core.spreedly.com/v1/payment_methods.json - -header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; - -data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process CFAR Payment request below.
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CfarPayment</returns>
        System.Threading.Tasks.Task<CfarPayment> PostCfarContractsIdPaymentAsync(string id, ProcessCfarPaymentRequest processCfarPaymentRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Process CFAR Payment
        /// </summary>
        /// <remarks>
        /// When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the CFAR fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl - -request POST - -url https://core.spreedly.com/v1/payment_methods.json - -header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; - -data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process CFAR Payment request below.
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CfarPayment)</returns>
        System.Threading.Tasks.Task<ApiResponse<CfarPayment>> PostCfarContractsIdPaymentWithHttpInfoAsync(string id, ProcessCfarPaymentRequest processCfarPaymentRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create CFAR Offers
        /// </summary>
        /// <remarks>
        /// Create CFAR offers for a user&#39;s trip
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarOfferRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CfarOffer&gt;</returns>
        System.Threading.Tasks.Task<List<CfarOffer>> PostCfarOffersAsync(CreateCfarOfferRequest createCfarOfferRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create CFAR Offers
        /// </summary>
        /// <remarks>
        /// Create CFAR offers for a user&#39;s trip
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarOfferRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CfarOffer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CfarOffer>>> PostCfarOffersWithHttpInfoAsync(CreateCfarOfferRequest createCfarOfferRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Complete CFAR Exercise
        /// </summary>
        /// <remarks>
        /// Record that a request to exercise a CFAR contract has been completed
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a exercise</param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CfarContractExercise</returns>
        System.Threading.Tasks.Task<CfarContractExercise> PutCfarContractExercisesIdMarkCompletedAsync(string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Complete CFAR Exercise
        /// </summary>
        /// <remarks>
        /// Record that a request to exercise a CFAR contract has been completed
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a exercise</param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CfarContractExercise)</returns>
        System.Threading.Tasks.Task<ApiResponse<CfarContractExercise>> PutCfarContractExercisesIdMarkCompletedWithHttpInfoAsync(string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update forms of payment of a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Update forms of payment linked with a CFAR contract
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarFormOfPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CfarContract</returns>
        System.Threading.Tasks.Task<CfarContract> PutCfarContractsIdFormsOfPaymentAsync(string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update forms of payment of a CFAR Contract
        /// </summary>
        /// <remarks>
        /// Update forms of payment linked with a CFAR contract
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarFormOfPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CfarContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<CfarContract>> PutCfarContractsIdFormsOfPaymentWithHttpInfoAsync(string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update CFAR Contract Status
        /// </summary>
        /// <remarks>
        /// Update the CFAR contract
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarContractRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CfarContract</returns>
        System.Threading.Tasks.Task<CfarContract> PutCfarContractsIdUpdateStatusAsync(string id, UpdateCfarContractRequest updateCfarContractRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update CFAR Contract Status
        /// </summary>
        /// <remarks>
        /// Update the CFAR contract
        /// </remarks>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarContractRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CfarContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<CfarContract>> PutCfarContractsIdUpdateStatusWithHttpInfoAsync(string id, UpdateCfarContractRequest updateCfarContractRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICancelForAnyReasonCFARApi : ICancelForAnyReasonCFARApiSync, ICancelForAnyReasonCFARApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CancelForAnyReasonCFARApi : ICancelForAnyReasonCFARApi
    {
        private Com.Hopper.Hts.Airlines.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CancelForAnyReasonCFARApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CancelForAnyReasonCFARApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CancelForAnyReasonCFARApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CancelForAnyReasonCFARApi(string basePath)
        {
            this.Configuration = Com.Hopper.Hts.Airlines.Client.Configuration.MergeConfigurations(
                Com.Hopper.Hts.Airlines.Client.GlobalConfiguration.Instance,
                new Com.Hopper.Hts.Airlines.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Hopper.Hts.Airlines.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Hopper.Hts.Airlines.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Hopper.Hts.Airlines.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CancelForAnyReasonCFARApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CancelForAnyReasonCFARApi(Com.Hopper.Hts.Airlines.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Hopper.Hts.Airlines.Client.Configuration.MergeConfigurations(
                Com.Hopper.Hts.Airlines.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Hopper.Hts.Airlines.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Hopper.Hts.Airlines.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Hopper.Hts.Airlines.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CancelForAnyReasonCFARApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CancelForAnyReasonCFARApi(Com.Hopper.Hts.Airlines.Client.ISynchronousClient client, Com.Hopper.Hts.Airlines.Client.IAsynchronousClient asyncClient, Com.Hopper.Hts.Airlines.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Hopper.Hts.Airlines.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Hopper.Hts.Airlines.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Hopper.Hts.Airlines.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Hopper.Hts.Airlines.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Hopper.Hts.Airlines.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a CFAR Contract Get a CFAR contract
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CfarContract</returns>
        public CfarContract GetCfarContractsId(string id, int operationIndex = 0)
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContract> localVarResponse = GetCfarContractsIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a CFAR Contract Get a CFAR contract
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CfarContract</returns>
        public Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContract> GetCfarContractsIdWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'id' when calling CancelForAnyReasonCFARApi->GetCfarContractsId");
            }

            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.GetCfarContractsId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SessionAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("HC-Session-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", this.Configuration.GetApiKeyWithPrefix("HC-Session-ID"));
            }
            // authentication (PartnerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CfarContract>("/cfar_contracts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCfarContractsId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a CFAR Contract Get a CFAR contract
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CfarContract</returns>
        public async System.Threading.Tasks.Task<CfarContract> GetCfarContractsIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContract> localVarResponse = await GetCfarContractsIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a CFAR Contract Get a CFAR contract
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CfarContract)</returns>
        public async System.Threading.Tasks.Task<Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContract>> GetCfarContractsIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'id' when calling CancelForAnyReasonCFARApi->GetCfarContractsId");
            }


            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.GetCfarContractsId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (SessionAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("HC-Session-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", this.Configuration.GetApiKeyWithPrefix("HC-Session-ID"));
            }
            // authentication (PartnerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CfarContract>("/cfar_contracts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCfarContractsId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get CFAR Offers Get CFAR offers
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions)</param>
        /// <param name="offerId">List of unique identifier for an offer (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCfarOfferResponse</returns>
        public GetCfarOfferResponse GetCustomerCfarOffers(string hCSessionID, List<string>? offerId = default(List<string>?), int operationIndex = 0)
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<GetCfarOfferResponse> localVarResponse = GetCustomerCfarOffersWithHttpInfo(hCSessionID, offerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get CFAR Offers Get CFAR offers
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions)</param>
        /// <param name="offerId">List of unique identifier for an offer (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCfarOfferResponse</returns>
        public Com.Hopper.Hts.Airlines.Client.ApiResponse<GetCfarOfferResponse> GetCustomerCfarOffersWithHttpInfo(string hCSessionID, List<string>? offerId = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'hCSessionID' is set
            if (hCSessionID == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'hCSessionID' when calling CancelForAnyReasonCFARApi->GetCustomerCfarOffers");
            }

            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToMultiMap("multi", "offerId", offerId));
            }
            localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(hCSessionID)); // header parameter

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.GetCustomerCfarOffers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCfarOfferResponse>("/customer/cfar_offers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerCfarOffers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get CFAR Offers Get CFAR offers
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions)</param>
        /// <param name="offerId">List of unique identifier for an offer (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCfarOfferResponse</returns>
        public async System.Threading.Tasks.Task<GetCfarOfferResponse> GetCustomerCfarOffersAsync(string hCSessionID, List<string>? offerId = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<GetCfarOfferResponse> localVarResponse = await GetCustomerCfarOffersWithHttpInfoAsync(hCSessionID, offerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get CFAR Offers Get CFAR offers
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions)</param>
        /// <param name="offerId">List of unique identifier for an offer (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCfarOfferResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Hopper.Hts.Airlines.Client.ApiResponse<GetCfarOfferResponse>> GetCustomerCfarOffersWithHttpInfoAsync(string hCSessionID, List<string>? offerId = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'hCSessionID' is set
            if (hCSessionID == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'hCSessionID' when calling CancelForAnyReasonCFARApi->GetCustomerCfarOffers");
            }


            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToMultiMap("multi", "offerId", offerId));
            }
            localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(hCSessionID)); // header parameter

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.GetCustomerCfarOffers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCfarOfferResponse>("/customer/cfar_offers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerCfarOffers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create CFAR Exercise Record that a request to exercise a CFAR contract has occurred.
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CfarContractExercise</returns>
        public CfarContractExercise PostCfarContractExercises(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, string? hCSessionID = default(string?), int operationIndex = 0)
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContractExercise> localVarResponse = PostCfarContractExercisesWithHttpInfo(createCfarContractExerciseRequest, hCSessionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create CFAR Exercise Record that a request to exercise a CFAR contract has occurred.
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CfarContractExercise</returns>
        public Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContractExercise> PostCfarContractExercisesWithHttpInfo(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, string? hCSessionID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'createCfarContractExerciseRequest' is set
            if (createCfarContractExerciseRequest == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'createCfarContractExerciseRequest' when calling CancelForAnyReasonCFARApi->PostCfarContractExercises");
            }

            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (hCSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(hCSessionID)); // header parameter
            }
            localVarRequestOptions.Data = createCfarContractExerciseRequest;

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.PostCfarContractExercises";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CfarContractExercise>("/cfar_contract_exercises", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCfarContractExercises", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create CFAR Exercise Record that a request to exercise a CFAR contract has occurred.
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CfarContractExercise</returns>
        public async System.Threading.Tasks.Task<CfarContractExercise> PostCfarContractExercisesAsync(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContractExercise> localVarResponse = await PostCfarContractExercisesWithHttpInfoAsync(createCfarContractExerciseRequest, hCSessionID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create CFAR Exercise Record that a request to exercise a CFAR contract has occurred.
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CfarContractExercise)</returns>
        public async System.Threading.Tasks.Task<Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContractExercise>> PostCfarContractExercisesWithHttpInfoAsync(CreateCfarContractExerciseRequest createCfarContractExerciseRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createCfarContractExerciseRequest' is set
            if (createCfarContractExerciseRequest == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'createCfarContractExerciseRequest' when calling CancelForAnyReasonCFARApi->PostCfarContractExercises");
            }


            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (hCSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(hCSessionID)); // header parameter
            }
            localVarRequestOptions.Data = createCfarContractExerciseRequest;

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.PostCfarContractExercises";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CfarContractExercise>("/cfar_contract_exercises", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCfarContractExercises", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a CFAR Contract Create a CFAR contract from selected CFAR offer(s).
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CfarContract</returns>
        public CfarContract PostCfarContracts(CreateCfarContractRequest createCfarContractRequest, int operationIndex = 0)
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContract> localVarResponse = PostCfarContractsWithHttpInfo(createCfarContractRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a CFAR Contract Create a CFAR contract from selected CFAR offer(s).
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CfarContract</returns>
        public Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContract> PostCfarContractsWithHttpInfo(CreateCfarContractRequest createCfarContractRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createCfarContractRequest' is set
            if (createCfarContractRequest == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'createCfarContractRequest' when calling CancelForAnyReasonCFARApi->PostCfarContracts");
            }

            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCfarContractRequest;

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.PostCfarContracts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CfarContract>("/cfar_contracts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCfarContracts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a CFAR Contract Create a CFAR contract from selected CFAR offer(s).
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CfarContract</returns>
        public async System.Threading.Tasks.Task<CfarContract> PostCfarContractsAsync(CreateCfarContractRequest createCfarContractRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContract> localVarResponse = await PostCfarContractsWithHttpInfoAsync(createCfarContractRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a CFAR Contract Create a CFAR contract from selected CFAR offer(s).
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarContractRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CfarContract)</returns>
        public async System.Threading.Tasks.Task<Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContract>> PostCfarContractsWithHttpInfoAsync(CreateCfarContractRequest createCfarContractRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createCfarContractRequest' is set
            if (createCfarContractRequest == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'createCfarContractRequest' when calling CancelForAnyReasonCFARApi->PostCfarContracts");
            }


            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCfarContractRequest;

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.PostCfarContracts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CfarContract>("/cfar_contracts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCfarContracts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process CFAR Payment When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the CFAR fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl - -request POST - -url https://core.spreedly.com/v1/payment_methods.json - -header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; - -data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process CFAR Payment request below.
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CfarPayment</returns>
        public CfarPayment PostCfarContractsIdPayment(string id, ProcessCfarPaymentRequest processCfarPaymentRequest, string? hCSessionID = default(string?), int operationIndex = 0)
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarPayment> localVarResponse = PostCfarContractsIdPaymentWithHttpInfo(id, processCfarPaymentRequest, hCSessionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process CFAR Payment When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the CFAR fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl - -request POST - -url https://core.spreedly.com/v1/payment_methods.json - -header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; - -data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process CFAR Payment request below.
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CfarPayment</returns>
        public Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarPayment> PostCfarContractsIdPaymentWithHttpInfo(string id, ProcessCfarPaymentRequest processCfarPaymentRequest, string? hCSessionID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'id' when calling CancelForAnyReasonCFARApi->PostCfarContractsIdPayment");
            }

            // verify the required parameter 'processCfarPaymentRequest' is set
            if (processCfarPaymentRequest == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'processCfarPaymentRequest' when calling CancelForAnyReasonCFARApi->PostCfarContractsIdPayment");
            }

            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (hCSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(hCSessionID)); // header parameter
            }
            localVarRequestOptions.Data = processCfarPaymentRequest;

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.PostCfarContractsIdPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CfarPayment>("/cfar_contracts/{id}/payment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCfarContractsIdPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process CFAR Payment When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the CFAR fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl - -request POST - -url https://core.spreedly.com/v1/payment_methods.json - -header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; - -data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process CFAR Payment request below.
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CfarPayment</returns>
        public async System.Threading.Tasks.Task<CfarPayment> PostCfarContractsIdPaymentAsync(string id, ProcessCfarPaymentRequest processCfarPaymentRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarPayment> localVarResponse = await PostCfarContractsIdPaymentWithHttpInfoAsync(id, processCfarPaymentRequest, hCSessionID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process CFAR Payment When HTS is the Merchant of Record (MoR), the customer&#39;s credit card is charged by HTS for the CFAR fee.  HTS is relying on an external payment gateway to process the payments, it allows the partner airline to tokenize the customer&#39;s credit card details and then pass the generated token in HTS Ancillaries for Airlines API payment endpoints in order to process the payment and confirm the contract related to the purchased product.  **Token URL**: https://core.spreedly.com/v1/payment_methods.json    **Example Token Request**:      &#x60;&#x60;&#x60;   curl - -request POST - -url https://core.spreedly.com/v1/payment_methods.json - -header &#39;content-type: application/json&#39; -u  \&quot;login:password\&quot; - -data &#39;{  \&quot;payment_method\&quot;: {   \&quot;email\&quot;: \&quot;aaa@bbb.ccc\&quot;,   \&quot;credit_card\&quot;: {    \&quot;number\&quot;: \&quot;4111111111111111\&quot;,    \&quot;month\&quot;: \&quot;09\&quot;,    \&quot;year\&quot;: \&quot;2029\&quot;,    \&quot;first_name\&quot;: \&quot;John\&quot;,    \&quot;last_name\&quot;: \&quot;Smith\&quot;,    \&quot;address1\&quot;: \&quot;123 12th St\&quot;,    \&quot;address2\&quot;: \&quot;Building B\&quot;,    \&quot;city\&quot;: \&quot;Quebec City\&quot;,    \&quot;state\&quot;: \&quot;QC\&quot;,    \&quot;zip\&quot;: \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;: \&quot;CA\&quot;,    \&quot;verification_value\&quot;: \&quot;123\&quot;   }  } }&#39; &#x60;&#x60;&#x60; **Example Token Response**:   &#x60;&#x60;&#x60;   {  \&quot;transaction\&quot;:  {   \&quot;token\&quot;:  \&quot;KtToV20m9qT1Yi8pbTeLNz0Ypns\&quot;,   \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,   \&quot;succeeded\&quot;:  true,   \&quot;transaction_type\&quot;:  \&quot;AddPaymentMethod\&quot;,   \&quot;retained\&quot;:  false,   \&quot;state\&quot;:  \&quot;succeeded\&quot;,   \&quot;message_key\&quot;:  \&quot;messages.transaction_succeeded\&quot;,   \&quot;message\&quot;:  \&quot;Succeeded!\&quot;,   \&quot;payment_method\&quot;:  {    \&quot;token\&quot;:  \&quot;MxyYEhDK12CUAA18bJDkAq0ab3y\&quot;,    \&quot;created_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;updated_at\&quot;:  \&quot;2023-11-29T13:31:56Z\&quot;,    \&quot;email\&quot;:  \&quot;aaa@bbb.ccc\&quot;,    \&quot;data\&quot;:  null,    \&quot;storage_state\&quot;:  \&quot;cached\&quot;,    \&quot;test\&quot;:  true,    \&quot;metadata\&quot;:  null,    \&quot;callback_url\&quot;:  null,    \&quot;last_four_digits\&quot;:  \&quot;1111\&quot;,    \&quot;first_six_digits\&quot;:  \&quot;411111\&quot;,    \&quot;card_type\&quot;:  \&quot;visa\&quot;,    \&quot;first_name\&quot;:  \&quot;John\&quot;,    \&quot;last_name\&quot;:  \&quot;Smith\&quot;,    \&quot;month\&quot;:  9,    \&quot;year\&quot;:  2029,    \&quot;address1\&quot;:  \&quot;123 12th St\&quot;,    \&quot;address2\&quot;:  \&quot;Building B\&quot;,    \&quot;city\&quot;:  \&quot;Quebec City\&quot;,    \&quot;state\&quot;:  \&quot;QC\&quot;,    \&quot;zip\&quot;:  \&quot;G1R 4S9\&quot;,    \&quot;country\&quot;:  \&quot;CA\&quot;,    \&quot;phone_number\&quot;:  null,    \&quot;company\&quot;:  null,    \&quot;full_name\&quot;:  \&quot;John Smith\&quot;,    \&quot;eligible_for_card_updater\&quot;:  true,    \&quot;shipping_address1\&quot;:  null,    \&quot;shipping_address2\&quot;:  null,    \&quot;shipping_city\&quot;:  null,    \&quot;shipping_state\&quot;:  null,    \&quot;shipping_zip\&quot;:  null,    \&quot;shipping_country\&quot;:  null,    \&quot;shipping_phone_number\&quot;:  null,    \&quot;issuer_identification_number\&quot;:  \&quot;41111111\&quot;,    \&quot;click_to_pay\&quot;:  false,    \&quot;managed\&quot;:  true,    \&quot;payment_method_type\&quot;:  \&quot;credit_card\&quot;,    \&quot;errors\&quot;:  [],    \&quot;bin_metadata\&quot;:  {     \&quot;message\&quot;:  \&quot;BIN Metadata is available only to Advanced Vault enrolled customers and payment methods. Reach out to your account representative for more details.\&quot;    },    \&quot;fingerprint\&quot;:  \&quot;7ccffcf38900f224fc946cf2a9c8e260072b\&quot;,    \&quot;verification_value\&quot;:  \&quot;XXX\&quot;,    \&quot;number\&quot;:  \&quot;XXXX-XXXX-XXXX-1111\&quot;   }  } } &#x60;&#x60;&#x60; Here the returned payment method token **MxyYEhDK12CUAA18bJDkAq0ab3y** has to be used in the Process CFAR Payment request below.
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CfarPayment)</returns>
        public async System.Threading.Tasks.Task<Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarPayment>> PostCfarContractsIdPaymentWithHttpInfoAsync(string id, ProcessCfarPaymentRequest processCfarPaymentRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'id' when calling CancelForAnyReasonCFARApi->PostCfarContractsIdPayment");
            }

            // verify the required parameter 'processCfarPaymentRequest' is set
            if (processCfarPaymentRequest == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'processCfarPaymentRequest' when calling CancelForAnyReasonCFARApi->PostCfarContractsIdPayment");
            }


            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (hCSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(hCSessionID)); // header parameter
            }
            localVarRequestOptions.Data = processCfarPaymentRequest;

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.PostCfarContractsIdPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CfarPayment>("/cfar_contracts/{id}/payment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCfarContractsIdPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create CFAR Offers Create CFAR offers for a user&#39;s trip
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarOfferRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CfarOffer&gt;</returns>
        public List<CfarOffer> PostCfarOffers(CreateCfarOfferRequest createCfarOfferRequest, string? hCSessionID = default(string?), int operationIndex = 0)
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<List<CfarOffer>> localVarResponse = PostCfarOffersWithHttpInfo(createCfarOfferRequest, hCSessionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create CFAR Offers Create CFAR offers for a user&#39;s trip
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarOfferRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CfarOffer&gt;</returns>
        public Com.Hopper.Hts.Airlines.Client.ApiResponse<List<CfarOffer>> PostCfarOffersWithHttpInfo(CreateCfarOfferRequest createCfarOfferRequest, string? hCSessionID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'createCfarOfferRequest' is set
            if (createCfarOfferRequest == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'createCfarOfferRequest' when calling CancelForAnyReasonCFARApi->PostCfarOffers");
            }

            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (hCSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(hCSessionID)); // header parameter
            }
            localVarRequestOptions.Data = createCfarOfferRequest;

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.PostCfarOffers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CfarOffer>>("/cfar_offers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCfarOffers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create CFAR Offers Create CFAR offers for a user&#39;s trip
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarOfferRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CfarOffer&gt;</returns>
        public async System.Threading.Tasks.Task<List<CfarOffer>> PostCfarOffersAsync(CreateCfarOfferRequest createCfarOfferRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<List<CfarOffer>> localVarResponse = await PostCfarOffersWithHttpInfoAsync(createCfarOfferRequest, hCSessionID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create CFAR Offers Create CFAR offers for a user&#39;s trip
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCfarOfferRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CfarOffer&gt;)</returns>
        public async System.Threading.Tasks.Task<Com.Hopper.Hts.Airlines.Client.ApiResponse<List<CfarOffer>>> PostCfarOffersWithHttpInfoAsync(CreateCfarOfferRequest createCfarOfferRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createCfarOfferRequest' is set
            if (createCfarOfferRequest == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'createCfarOfferRequest' when calling CancelForAnyReasonCFARApi->PostCfarOffers");
            }


            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (hCSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(hCSessionID)); // header parameter
            }
            localVarRequestOptions.Data = createCfarOfferRequest;

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.PostCfarOffers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CfarOffer>>("/cfar_offers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCfarOffers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete CFAR Exercise Record that a request to exercise a CFAR contract has been completed
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a exercise</param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CfarContractExercise</returns>
        public CfarContractExercise PutCfarContractExercisesIdMarkCompleted(string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, string? hCSessionID = default(string?), int operationIndex = 0)
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContractExercise> localVarResponse = PutCfarContractExercisesIdMarkCompletedWithHttpInfo(id, markCfarContractExerciseCompleteRequest, hCSessionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Complete CFAR Exercise Record that a request to exercise a CFAR contract has been completed
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a exercise</param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CfarContractExercise</returns>
        public Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContractExercise> PutCfarContractExercisesIdMarkCompletedWithHttpInfo(string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, string? hCSessionID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'id' when calling CancelForAnyReasonCFARApi->PutCfarContractExercisesIdMarkCompleted");
            }

            // verify the required parameter 'markCfarContractExerciseCompleteRequest' is set
            if (markCfarContractExerciseCompleteRequest == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'markCfarContractExerciseCompleteRequest' when calling CancelForAnyReasonCFARApi->PutCfarContractExercisesIdMarkCompleted");
            }

            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (hCSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(hCSessionID)); // header parameter
            }
            localVarRequestOptions.Data = markCfarContractExerciseCompleteRequest;

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.PutCfarContractExercisesIdMarkCompleted";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CfarContractExercise>("/cfar_contract_exercises/{id}/mark_completed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCfarContractExercisesIdMarkCompleted", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete CFAR Exercise Record that a request to exercise a CFAR contract has been completed
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a exercise</param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CfarContractExercise</returns>
        public async System.Threading.Tasks.Task<CfarContractExercise> PutCfarContractExercisesIdMarkCompletedAsync(string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContractExercise> localVarResponse = await PutCfarContractExercisesIdMarkCompletedWithHttpInfoAsync(id, markCfarContractExerciseCompleteRequest, hCSessionID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Complete CFAR Exercise Record that a request to exercise a CFAR contract has been completed
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a exercise</param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CfarContractExercise)</returns>
        public async System.Threading.Tasks.Task<Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContractExercise>> PutCfarContractExercisesIdMarkCompletedWithHttpInfoAsync(string id, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'id' when calling CancelForAnyReasonCFARApi->PutCfarContractExercisesIdMarkCompleted");
            }

            // verify the required parameter 'markCfarContractExerciseCompleteRequest' is set
            if (markCfarContractExerciseCompleteRequest == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'markCfarContractExerciseCompleteRequest' when calling CancelForAnyReasonCFARApi->PutCfarContractExercisesIdMarkCompleted");
            }


            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (hCSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(hCSessionID)); // header parameter
            }
            localVarRequestOptions.Data = markCfarContractExerciseCompleteRequest;

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.PutCfarContractExercisesIdMarkCompleted";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CfarContractExercise>("/cfar_contract_exercises/{id}/mark_completed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCfarContractExercisesIdMarkCompleted", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update forms of payment of a CFAR Contract Update forms of payment linked with a CFAR contract
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarFormOfPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CfarContract</returns>
        public CfarContract PutCfarContractsIdFormsOfPayment(string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, string? hCSessionID = default(string?), int operationIndex = 0)
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContract> localVarResponse = PutCfarContractsIdFormsOfPaymentWithHttpInfo(id, updateCfarFormOfPaymentRequest, hCSessionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update forms of payment of a CFAR Contract Update forms of payment linked with a CFAR contract
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarFormOfPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CfarContract</returns>
        public Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContract> PutCfarContractsIdFormsOfPaymentWithHttpInfo(string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, string? hCSessionID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'id' when calling CancelForAnyReasonCFARApi->PutCfarContractsIdFormsOfPayment");
            }

            // verify the required parameter 'updateCfarFormOfPaymentRequest' is set
            if (updateCfarFormOfPaymentRequest == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'updateCfarFormOfPaymentRequest' when calling CancelForAnyReasonCFARApi->PutCfarContractsIdFormsOfPayment");
            }

            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (hCSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(hCSessionID)); // header parameter
            }
            localVarRequestOptions.Data = updateCfarFormOfPaymentRequest;

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.PutCfarContractsIdFormsOfPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CfarContract>("/cfar_contracts/{id}/forms_of_payment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCfarContractsIdFormsOfPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update forms of payment of a CFAR Contract Update forms of payment linked with a CFAR contract
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarFormOfPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CfarContract</returns>
        public async System.Threading.Tasks.Task<CfarContract> PutCfarContractsIdFormsOfPaymentAsync(string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContract> localVarResponse = await PutCfarContractsIdFormsOfPaymentWithHttpInfoAsync(id, updateCfarFormOfPaymentRequest, hCSessionID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update forms of payment of a CFAR Contract Update forms of payment linked with a CFAR contract
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarFormOfPaymentRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CfarContract)</returns>
        public async System.Threading.Tasks.Task<Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContract>> PutCfarContractsIdFormsOfPaymentWithHttpInfoAsync(string id, UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'id' when calling CancelForAnyReasonCFARApi->PutCfarContractsIdFormsOfPayment");
            }

            // verify the required parameter 'updateCfarFormOfPaymentRequest' is set
            if (updateCfarFormOfPaymentRequest == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'updateCfarFormOfPaymentRequest' when calling CancelForAnyReasonCFARApi->PutCfarContractsIdFormsOfPayment");
            }


            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (hCSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(hCSessionID)); // header parameter
            }
            localVarRequestOptions.Data = updateCfarFormOfPaymentRequest;

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.PutCfarContractsIdFormsOfPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CfarContract>("/cfar_contracts/{id}/forms_of_payment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCfarContractsIdFormsOfPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update CFAR Contract Status Update the CFAR contract
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarContractRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CfarContract</returns>
        public CfarContract PutCfarContractsIdUpdateStatus(string id, UpdateCfarContractRequest updateCfarContractRequest, string? hCSessionID = default(string?), int operationIndex = 0)
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContract> localVarResponse = PutCfarContractsIdUpdateStatusWithHttpInfo(id, updateCfarContractRequest, hCSessionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update CFAR Contract Status Update the CFAR contract
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarContractRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CfarContract</returns>
        public Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContract> PutCfarContractsIdUpdateStatusWithHttpInfo(string id, UpdateCfarContractRequest updateCfarContractRequest, string? hCSessionID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'id' when calling CancelForAnyReasonCFARApi->PutCfarContractsIdUpdateStatus");
            }

            // verify the required parameter 'updateCfarContractRequest' is set
            if (updateCfarContractRequest == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'updateCfarContractRequest' when calling CancelForAnyReasonCFARApi->PutCfarContractsIdUpdateStatus");
            }

            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (hCSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(hCSessionID)); // header parameter
            }
            localVarRequestOptions.Data = updateCfarContractRequest;

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.PutCfarContractsIdUpdateStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CfarContract>("/cfar_contracts/{id}/update_status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCfarContractsIdUpdateStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update CFAR Contract Status Update the CFAR contract
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarContractRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CfarContract</returns>
        public async System.Threading.Tasks.Task<CfarContract> PutCfarContractsIdUpdateStatusAsync(string id, UpdateCfarContractRequest updateCfarContractRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContract> localVarResponse = await PutCfarContractsIdUpdateStatusWithHttpInfoAsync(id, updateCfarContractRequest, hCSessionID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update CFAR Contract Status Update the CFAR contract
        /// </summary>
        /// <exception cref="Com.Hopper.Hts.Airlines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique identifier for a contract</param>
        /// <param name="updateCfarContractRequest"></param>
        /// <param name="hCSessionID">The ID of the current airline session, see [Sessions](#tag/Sessions) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CfarContract)</returns>
        public async System.Threading.Tasks.Task<Com.Hopper.Hts.Airlines.Client.ApiResponse<CfarContract>> PutCfarContractsIdUpdateStatusWithHttpInfoAsync(string id, UpdateCfarContractRequest updateCfarContractRequest, string? hCSessionID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'id' when calling CancelForAnyReasonCFARApi->PutCfarContractsIdUpdateStatus");
            }

            // verify the required parameter 'updateCfarContractRequest' is set
            if (updateCfarContractRequest == null)
            {
                throw new Com.Hopper.Hts.Airlines.Client.ApiException(400, "Missing required parameter 'updateCfarContractRequest' when calling CancelForAnyReasonCFARApi->PutCfarContractsIdUpdateStatus");
            }


            Com.Hopper.Hts.Airlines.Client.RequestOptions localVarRequestOptions = new Com.Hopper.Hts.Airlines.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Hopper.Hts.Airlines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (hCSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("HC-Session-ID", Com.Hopper.Hts.Airlines.Client.ClientUtils.ParameterToString(hCSessionID)); // header parameter
            }
            localVarRequestOptions.Data = updateCfarContractRequest;

            localVarRequestOptions.Operation = "CancelForAnyReasonCFARApi.PutCfarContractsIdUpdateStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CfarContract>("/cfar_contracts/{id}/update_status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCfarContractsIdUpdateStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
