// <auto-generated>
/*
 * Spreedly API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Spreedly.Client;

namespace Com.Hopper.Hts.Airlines.Spreedly.Model
{
    /// <summary>
    /// Error
    /// </summary>
    public partial class Error
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Error" /> class.
        /// </summary>
        /// <param name="attribute">attribute</param>
        /// <param name="key">key</param>
        /// <param name="message">message</param>
        [JsonConstructor]
        public Error(Option<string?> attribute = default, Option<string?> key = default, Option<string?> message = default)
        {
            AttributeOption = attribute;
            KeyOption = key;
            MessageOption = message;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Attribute
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AttributeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Attribute
        /// </summary>
        [JsonPropertyName("attribute")]
        public string? Attribute { get { return this.AttributeOption; } set { this.AttributeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Key
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [JsonPropertyName("key")]
        public string? Key { get { return this.KeyOption; } set { this.KeyOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Error {\n");
            sb.Append("  Attribute: ").Append(Attribute).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Error" />
    /// </summary>
    public class ErrorJsonConverter : JsonConverter<Error>
    {
        /// <summary>
        /// Deserializes json to <see cref="Error" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Error Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> attribute = default;
            Option<string?> key = default;
            Option<string?> message = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "attribute":
                            attribute = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (attribute.IsSet && attribute.Value == null)
                throw new ArgumentNullException(nameof(attribute), "Property is not nullable for class Error.");

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class Error.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class Error.");

            return new Error(attribute, key, message);
        }

        /// <summary>
        /// Serializes a <see cref="Error" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="error"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Error error, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, error, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Error" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="error"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Error error, JsonSerializerOptions jsonSerializerOptions)
        {
            if (error.AttributeOption.IsSet && error.Attribute == null)
                throw new ArgumentNullException(nameof(error.Attribute), "Property is required for class Error.");

            if (error.KeyOption.IsSet && error.Key == null)
                throw new ArgumentNullException(nameof(error.Key), "Property is required for class Error.");

            if (error.MessageOption.IsSet && error.Message == null)
                throw new ArgumentNullException(nameof(error.Message), "Property is required for class Error.");

            if (error.AttributeOption.IsSet)
                writer.WriteString("attribute", error.Attribute);

            if (error.KeyOption.IsSet)
                writer.WriteString("key", error.Key);

            if (error.MessageOption.IsSet)
                writer.WriteString("message", error.Message);
        }
    }
}
