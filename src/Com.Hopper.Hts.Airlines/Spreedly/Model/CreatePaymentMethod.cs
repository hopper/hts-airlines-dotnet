// <auto-generated>
/*
 * Spreedly API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Spreedly.Client;

namespace Com.Hopper.Hts.Airlines.Spreedly.Model
{
    /// <summary>
    /// CreatePaymentMethod
    /// </summary>
    public partial class CreatePaymentMethod
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePaymentMethod" /> class.
        /// </summary>
        /// <param name="creditCard">creditCard</param>
        /// <param name="encryptedFields">encryptedFields</param>
        /// <param name="encryptionCertificateToken">encryptionCertificateToken</param>
        [JsonConstructor]
        public CreatePaymentMethod(CreateCreditCard creditCard, Option<string?> encryptedFields = default, Option<string?> encryptionCertificateToken = default)
        {
            CreditCard = creditCard;
            EncryptedFieldsOption = encryptedFields;
            EncryptionCertificateTokenOption = encryptionCertificateToken;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CreditCard
        /// </summary>
        [JsonPropertyName("credit_card")]
        public CreateCreditCard CreditCard { get; set; }

        /// <summary>
        /// Used to track the state of EncryptedFields
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EncryptedFieldsOption { get; private set; }

        /// <summary>
        /// Gets or Sets EncryptedFields
        /// </summary>
        [JsonPropertyName("encrypted_fields")]
        public string? EncryptedFields { get { return this.EncryptedFieldsOption; } set { this.EncryptedFieldsOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of EncryptionCertificateToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EncryptionCertificateTokenOption { get; private set; }

        /// <summary>
        /// Gets or Sets EncryptionCertificateToken
        /// </summary>
        [JsonPropertyName("encryption_certificate_token")]
        public string? EncryptionCertificateToken { get { return this.EncryptionCertificateTokenOption; } set { this.EncryptionCertificateTokenOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePaymentMethod {\n");
            sb.Append("  CreditCard: ").Append(CreditCard).Append("\n");
            sb.Append("  EncryptedFields: ").Append(EncryptedFields).Append("\n");
            sb.Append("  EncryptionCertificateToken: ").Append(EncryptionCertificateToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreatePaymentMethod" />
    /// </summary>
    public class CreatePaymentMethodJsonConverter : JsonConverter<CreatePaymentMethod>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreatePaymentMethod" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreatePaymentMethod Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CreateCreditCard?> creditCard = default;
            Option<string?> encryptedFields = default;
            Option<string?> encryptionCertificateToken = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "credit_card":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                creditCard = new Option<CreateCreditCard?>(JsonSerializer.Deserialize<CreateCreditCard>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "encrypted_fields":
                            encryptedFields = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "encryption_certificate_token":
                            encryptionCertificateToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!creditCard.IsSet)
                throw new ArgumentException("Property is required for class CreatePaymentMethod.", nameof(creditCard));

            if (creditCard.IsSet && creditCard.Value == null)
                throw new ArgumentNullException(nameof(creditCard), "Property is not nullable for class CreatePaymentMethod.");

            if (encryptedFields.IsSet && encryptedFields.Value == null)
                throw new ArgumentNullException(nameof(encryptedFields), "Property is not nullable for class CreatePaymentMethod.");

            if (encryptionCertificateToken.IsSet && encryptionCertificateToken.Value == null)
                throw new ArgumentNullException(nameof(encryptionCertificateToken), "Property is not nullable for class CreatePaymentMethod.");

            return new CreatePaymentMethod(creditCard.Value!, encryptedFields, encryptionCertificateToken);
        }

        /// <summary>
        /// Serializes a <see cref="CreatePaymentMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createPaymentMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreatePaymentMethod createPaymentMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createPaymentMethod, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreatePaymentMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createPaymentMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreatePaymentMethod createPaymentMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createPaymentMethod.CreditCard == null)
                throw new ArgumentNullException(nameof(createPaymentMethod.CreditCard), "Property is required for class CreatePaymentMethod.");

            if (createPaymentMethod.EncryptedFieldsOption.IsSet && createPaymentMethod.EncryptedFields == null)
                throw new ArgumentNullException(nameof(createPaymentMethod.EncryptedFields), "Property is required for class CreatePaymentMethod.");

            if (createPaymentMethod.EncryptionCertificateTokenOption.IsSet && createPaymentMethod.EncryptionCertificateToken == null)
                throw new ArgumentNullException(nameof(createPaymentMethod.EncryptionCertificateToken), "Property is required for class CreatePaymentMethod.");

            writer.WritePropertyName("credit_card");
            JsonSerializer.Serialize(writer, createPaymentMethod.CreditCard, jsonSerializerOptions);
            if (createPaymentMethod.EncryptedFieldsOption.IsSet)
                writer.WriteString("encrypted_fields", createPaymentMethod.EncryptedFields);

            if (createPaymentMethod.EncryptionCertificateTokenOption.IsSet)
                writer.WriteString("encryption_certificate_token", createPaymentMethod.EncryptionCertificateToken);
        }
    }
}
