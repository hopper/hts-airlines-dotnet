// <auto-generated>
/*
 * Spreedly API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Spreedly.Client;

namespace Com.Hopper.Hts.Airlines.Spreedly.Model
{
    /// <summary>
    /// UnprocessableEntity
    /// </summary>
    public partial class UnprocessableEntity
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnprocessableEntity" /> class.
        /// </summary>
        /// <param name="error">error</param>
        [JsonConstructor]
        public UnprocessableEntity(Option<Error?> error = default)
        {
            ErrorOption = error;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Error
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Error?> ErrorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [JsonPropertyName("error")]
        public Error? Error { get { return this.ErrorOption; } set { this.ErrorOption = new Option<Error?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UnprocessableEntity {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UnprocessableEntity" />
    /// </summary>
    public class UnprocessableEntityJsonConverter : JsonConverter<UnprocessableEntity>
    {
        /// <summary>
        /// Deserializes json to <see cref="UnprocessableEntity" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UnprocessableEntity Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Error?> error = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "error":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                error = new Option<Error?>(JsonSerializer.Deserialize<Error>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (error.IsSet && error.Value == null)
                throw new ArgumentNullException(nameof(error), "Property is not nullable for class UnprocessableEntity.");

            return new UnprocessableEntity(error);
        }

        /// <summary>
        /// Serializes a <see cref="UnprocessableEntity" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="unprocessableEntity"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UnprocessableEntity unprocessableEntity, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, unprocessableEntity, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UnprocessableEntity" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="unprocessableEntity"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UnprocessableEntity unprocessableEntity, JsonSerializerOptions jsonSerializerOptions)
        {
            if (unprocessableEntity.ErrorOption.IsSet && unprocessableEntity.Error == null)
                throw new ArgumentNullException(nameof(unprocessableEntity.Error), "Property is required for class UnprocessableEntity.");

            if (unprocessableEntity.ErrorOption.IsSet)
            {
                writer.WritePropertyName("error");
                JsonSerializer.Serialize(writer, unprocessableEntity.Error, jsonSerializerOptions);
            }
        }
    }
}
