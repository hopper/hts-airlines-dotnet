// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// Create a CFAR contract from selected CFAR offer(s).
    /// </summary>
    public partial class CreateCfarContractRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCfarContractRequest" /> class.
        /// </summary>
        /// <param name="offerIds">Identifier of the offer(s) for which the contract is created</param>
        /// <param name="itinerary">itinerary</param>
        /// <param name="extAttributes">extAttributes</param>
        /// <param name="pnrReference">Reference of the PNR in the airline system</param>
        [JsonConstructor]
        public CreateCfarContractRequest(List<string> offerIds, CfarItinerary itinerary, Dictionary<string, string> extAttributes, Option<string?> pnrReference = default)
        {
            OfferIds = offerIds;
            Itinerary = itinerary;
            ExtAttributes = extAttributes;
            PnrReferenceOption = pnrReference;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Identifier of the offer(s) for which the contract is created
        /// </summary>
        /// <value>Identifier of the offer(s) for which the contract is created</value>
        /* <example>1ec9eed3-4486-6460-9d6c-2fb8469d35db</example> */
        [JsonPropertyName("offer_ids")]
        public List<string> OfferIds { get; set; }

        /// <summary>
        /// Gets or Sets Itinerary
        /// </summary>
        [JsonPropertyName("itinerary")]
        public CfarItinerary Itinerary { get; set; }

        /// <summary>
        /// Gets or Sets ExtAttributes
        /// </summary>
        [JsonPropertyName("ext_attributes")]
        public Dictionary<string, string> ExtAttributes { get; set; }

        /// <summary>
        /// Used to track the state of PnrReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PnrReferenceOption { get; private set; }

        /// <summary>
        /// Reference of the PNR in the airline system
        /// </summary>
        /// <value>Reference of the PNR in the airline system</value>
        /* <example>ABC123</example> */
        [JsonPropertyName("pnr_reference")]
        public string? PnrReference { get { return this.PnrReferenceOption; } set { this.PnrReferenceOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCfarContractRequest {\n");
            sb.Append("  OfferIds: ").Append(OfferIds).Append("\n");
            sb.Append("  Itinerary: ").Append(Itinerary).Append("\n");
            sb.Append("  ExtAttributes: ").Append(ExtAttributes).Append("\n");
            sb.Append("  PnrReference: ").Append(PnrReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateCfarContractRequest" />
    /// </summary>
    public class CreateCfarContractRequestJsonConverter : JsonConverter<CreateCfarContractRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateCfarContractRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateCfarContractRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> offerIds = default;
            Option<CfarItinerary?> itinerary = default;
            Option<Dictionary<string, string>?> extAttributes = default;
            Option<string?> pnrReference = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "offer_ids":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                offerIds = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "itinerary":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                itinerary = new Option<CfarItinerary?>(JsonSerializer.Deserialize<CfarItinerary>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ext_attributes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                extAttributes = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pnr_reference":
                            pnrReference = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!offerIds.IsSet)
                throw new ArgumentException("Property is required for class CreateCfarContractRequest.", nameof(offerIds));

            if (!itinerary.IsSet)
                throw new ArgumentException("Property is required for class CreateCfarContractRequest.", nameof(itinerary));

            if (!extAttributes.IsSet)
                throw new ArgumentException("Property is required for class CreateCfarContractRequest.", nameof(extAttributes));

            if (offerIds.IsSet && offerIds.Value == null)
                throw new ArgumentNullException(nameof(offerIds), "Property is not nullable for class CreateCfarContractRequest.");

            if (itinerary.IsSet && itinerary.Value == null)
                throw new ArgumentNullException(nameof(itinerary), "Property is not nullable for class CreateCfarContractRequest.");

            if (extAttributes.IsSet && extAttributes.Value == null)
                throw new ArgumentNullException(nameof(extAttributes), "Property is not nullable for class CreateCfarContractRequest.");

            if (pnrReference.IsSet && pnrReference.Value == null)
                throw new ArgumentNullException(nameof(pnrReference), "Property is not nullable for class CreateCfarContractRequest.");

            return new CreateCfarContractRequest(offerIds.Value!, itinerary.Value!, extAttributes.Value!, pnrReference);
        }

        /// <summary>
        /// Serializes a <see cref="CreateCfarContractRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createCfarContractRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateCfarContractRequest createCfarContractRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createCfarContractRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateCfarContractRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createCfarContractRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateCfarContractRequest createCfarContractRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createCfarContractRequest.OfferIds == null)
                throw new ArgumentNullException(nameof(createCfarContractRequest.OfferIds), "Property is required for class CreateCfarContractRequest.");

            if (createCfarContractRequest.Itinerary == null)
                throw new ArgumentNullException(nameof(createCfarContractRequest.Itinerary), "Property is required for class CreateCfarContractRequest.");

            if (createCfarContractRequest.ExtAttributes == null)
                throw new ArgumentNullException(nameof(createCfarContractRequest.ExtAttributes), "Property is required for class CreateCfarContractRequest.");

            if (createCfarContractRequest.PnrReferenceOption.IsSet && createCfarContractRequest.PnrReference == null)
                throw new ArgumentNullException(nameof(createCfarContractRequest.PnrReference), "Property is required for class CreateCfarContractRequest.");

            writer.WritePropertyName("offer_ids");
            JsonSerializer.Serialize(writer, createCfarContractRequest.OfferIds, jsonSerializerOptions);
            writer.WritePropertyName("itinerary");
            JsonSerializer.Serialize(writer, createCfarContractRequest.Itinerary, jsonSerializerOptions);
            writer.WritePropertyName("ext_attributes");
            JsonSerializer.Serialize(writer, createCfarContractRequest.ExtAttributes, jsonSerializerOptions);
            if (createCfarContractRequest.PnrReferenceOption.IsSet)
                writer.WriteString("pnr_reference", createCfarContractRequest.PnrReference);
        }
    }
}
