// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// Defines dg_status
    /// </summary>
    public enum DgStatus
    {
        /// <summary>
        /// Enum Created for value: created
        /// </summary>
        Created = 1,

        /// <summary>
        /// Enum Confirmed for value: confirmed
        /// </summary>
        Confirmed = 2,

        /// <summary>
        /// Enum ChargedBack for value: charged_back
        /// </summary>
        ChargedBack = 3,

        /// <summary>
        /// Enum Voided for value: voided
        /// </summary>
        Voided = 4,

        /// <summary>
        /// Enum Canceled for value: canceled
        /// </summary>
        Canceled = 5,

        /// <summary>
        /// Enum Queued for value: queued
        /// </summary>
        Queued = 6,

        /// <summary>
        /// Enum Failed for value: failed
        /// </summary>
        Failed = 7
    }

    /// <summary>
    /// Converts <see cref="DgStatus"/> to and from the JSON value
    /// </summary>
    public static class DgStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="DgStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DgStatus FromString(string value)
        {
            if (value.Equals("created"))
                return DgStatus.Created;

            if (value.Equals("confirmed"))
                return DgStatus.Confirmed;

            if (value.Equals("charged_back"))
                return DgStatus.ChargedBack;

            if (value.Equals("voided"))
                return DgStatus.Voided;

            if (value.Equals("canceled"))
                return DgStatus.Canceled;

            if (value.Equals("queued"))
                return DgStatus.Queued;

            if (value.Equals("failed"))
                return DgStatus.Failed;

            throw new NotImplementedException($"Could not convert value to type DgStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="DgStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DgStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("created"))
                return DgStatus.Created;

            if (value.Equals("confirmed"))
                return DgStatus.Confirmed;

            if (value.Equals("charged_back"))
                return DgStatus.ChargedBack;

            if (value.Equals("voided"))
                return DgStatus.Voided;

            if (value.Equals("canceled"))
                return DgStatus.Canceled;

            if (value.Equals("queued"))
                return DgStatus.Queued;

            if (value.Equals("failed"))
                return DgStatus.Failed;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DgStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(DgStatus value)
        {
            if (value == DgStatus.Created)
                return "created";

            if (value == DgStatus.Confirmed)
                return "confirmed";

            if (value == DgStatus.ChargedBack)
                return "charged_back";

            if (value == DgStatus.Voided)
                return "voided";

            if (value == DgStatus.Canceled)
                return "canceled";

            if (value == DgStatus.Queued)
                return "queued";

            if (value == DgStatus.Failed)
                return "failed";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DgStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class DgStatusJsonConverter : JsonConverter<DgStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DgStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DgStatus? result = rawValue == null
                ? null
                : DgStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DgStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DgStatus dgStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dgStatus.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DgStatus"/>
    /// </summary>
    public class DgStatusNullableJsonConverter : JsonConverter<DgStatus?>
    {
        /// <summary>
        /// Returns a DgStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DgStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DgStatus? result = rawValue == null
                ? null
                : DgStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DgStatus? dgStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dgStatus?.ToString() ?? "null");
        }
    }
}
