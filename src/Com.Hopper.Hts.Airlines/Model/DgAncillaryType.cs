// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// The type of ancillary
    /// </summary>
    /// <value>The type of ancillary</value>
    public enum DgAncillaryType
    {
        /// <summary>
        /// Enum TravelInsurance for value: travel_insurance
        /// </summary>
        TravelInsurance = 1,

        /// <summary>
        /// Enum BagInsurance for value: bag_insurance
        /// </summary>
        BagInsurance = 2,

        /// <summary>
        /// Enum CabinBag for value: cabin_bag
        /// </summary>
        CabinBag = 3,

        /// <summary>
        /// Enum CheckedBag for value: checked_bag
        /// </summary>
        CheckedBag = 4,

        /// <summary>
        /// Enum Seat for value: seat
        /// </summary>
        Seat = 5,

        /// <summary>
        /// Enum Lounge for value: lounge
        /// </summary>
        Lounge = 6,

        /// <summary>
        /// Enum Meal for value: meal
        /// </summary>
        Meal = 7,

        /// <summary>
        /// Enum FastTrack for value: fast_track
        /// </summary>
        FastTrack = 8,

        /// <summary>
        /// Enum Pet for value: pet
        /// </summary>
        Pet = 9,

        /// <summary>
        /// Enum Change for value: change
        /// </summary>
        Change = 10,

        /// <summary>
        /// Enum Bundle for value: bundle
        /// </summary>
        Bundle = 11,

        /// <summary>
        /// Enum PaymentFee for value: payment_fee
        /// </summary>
        PaymentFee = 12,

        /// <summary>
        /// Enum Other for value: other
        /// </summary>
        Other = 13
    }

    /// <summary>
    /// Converts <see cref="DgAncillaryType"/> to and from the JSON value
    /// </summary>
    public static class DgAncillaryTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="DgAncillaryType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DgAncillaryType FromString(string value)
        {
            if (value.Equals("travel_insurance"))
                return DgAncillaryType.TravelInsurance;

            if (value.Equals("bag_insurance"))
                return DgAncillaryType.BagInsurance;

            if (value.Equals("cabin_bag"))
                return DgAncillaryType.CabinBag;

            if (value.Equals("checked_bag"))
                return DgAncillaryType.CheckedBag;

            if (value.Equals("seat"))
                return DgAncillaryType.Seat;

            if (value.Equals("lounge"))
                return DgAncillaryType.Lounge;

            if (value.Equals("meal"))
                return DgAncillaryType.Meal;

            if (value.Equals("fast_track"))
                return DgAncillaryType.FastTrack;

            if (value.Equals("pet"))
                return DgAncillaryType.Pet;

            if (value.Equals("change"))
                return DgAncillaryType.Change;

            if (value.Equals("bundle"))
                return DgAncillaryType.Bundle;

            if (value.Equals("payment_fee"))
                return DgAncillaryType.PaymentFee;

            if (value.Equals("other"))
                return DgAncillaryType.Other;

            throw new NotImplementedException($"Could not convert value to type DgAncillaryType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="DgAncillaryType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DgAncillaryType? FromStringOrDefault(string value)
        {
            if (value.Equals("travel_insurance"))
                return DgAncillaryType.TravelInsurance;

            if (value.Equals("bag_insurance"))
                return DgAncillaryType.BagInsurance;

            if (value.Equals("cabin_bag"))
                return DgAncillaryType.CabinBag;

            if (value.Equals("checked_bag"))
                return DgAncillaryType.CheckedBag;

            if (value.Equals("seat"))
                return DgAncillaryType.Seat;

            if (value.Equals("lounge"))
                return DgAncillaryType.Lounge;

            if (value.Equals("meal"))
                return DgAncillaryType.Meal;

            if (value.Equals("fast_track"))
                return DgAncillaryType.FastTrack;

            if (value.Equals("pet"))
                return DgAncillaryType.Pet;

            if (value.Equals("change"))
                return DgAncillaryType.Change;

            if (value.Equals("bundle"))
                return DgAncillaryType.Bundle;

            if (value.Equals("payment_fee"))
                return DgAncillaryType.PaymentFee;

            if (value.Equals("other"))
                return DgAncillaryType.Other;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DgAncillaryType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(DgAncillaryType value)
        {
            if (value == DgAncillaryType.TravelInsurance)
                return "travel_insurance";

            if (value == DgAncillaryType.BagInsurance)
                return "bag_insurance";

            if (value == DgAncillaryType.CabinBag)
                return "cabin_bag";

            if (value == DgAncillaryType.CheckedBag)
                return "checked_bag";

            if (value == DgAncillaryType.Seat)
                return "seat";

            if (value == DgAncillaryType.Lounge)
                return "lounge";

            if (value == DgAncillaryType.Meal)
                return "meal";

            if (value == DgAncillaryType.FastTrack)
                return "fast_track";

            if (value == DgAncillaryType.Pet)
                return "pet";

            if (value == DgAncillaryType.Change)
                return "change";

            if (value == DgAncillaryType.Bundle)
                return "bundle";

            if (value == DgAncillaryType.PaymentFee)
                return "payment_fee";

            if (value == DgAncillaryType.Other)
                return "other";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DgAncillaryType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class DgAncillaryTypeJsonConverter : JsonConverter<DgAncillaryType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DgAncillaryType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DgAncillaryType? result = rawValue == null
                ? null
                : DgAncillaryTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DgAncillaryType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgAncillaryType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DgAncillaryType dgAncillaryType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dgAncillaryType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DgAncillaryType"/>
    /// </summary>
    public class DgAncillaryTypeNullableJsonConverter : JsonConverter<DgAncillaryType?>
    {
        /// <summary>
        /// Returns a DgAncillaryType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DgAncillaryType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DgAncillaryType? result = rawValue == null
                ? null
                : DgAncillaryTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgAncillaryType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DgAncillaryType? dgAncillaryType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dgAncillaryType?.ToString() ?? "null");
        }
    }
}
