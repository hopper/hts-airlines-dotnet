/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Hopper.Hts.Airlines.Client.OpenAPIDateConverter;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// A Dg offer
    /// </summary>
    [DataContract(Name = "dg_offer")]
    public partial class DgOffer : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets RequestType
        /// </summary>
        [DataMember(Name = "request_type", IsRequired = true, EmitDefaultValue = true)]
        public DgRequestType RequestType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DgOffer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DgOffer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DgOffer" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for a DG offer (required).</param>
        /// <param name="premium">Amount per passenger to be paid by user for DG (required).</param>
        /// <param name="coverage">Amount per passenger to be refunded to user upon DG exercise (required).</param>
        /// <param name="coveragePercentage">Percentage of the amount to be refunded to customer compared to flight tickets price (required).</param>
        /// <param name="serviceCap">Allowed amount per passenger to book a new flight in case of disruption (required).</param>
        /// <param name="currency">Currency of offer (required).</param>
        /// <param name="taxesTotal">Total of applicable taxes (required).</param>
        /// <param name="taxes">List of applicable taxes.</param>
        /// <param name="requestType">requestType (required).</param>
        /// <param name="maxHoursBeforeDeparture">The number of hours before each flight or slice departure from which a purchased contract would start to cover disruptions (required).</param>
        /// <param name="minMinutesDelay">The minimum flight or slice departure delay in hours to be covered (required).</param>
        /// <param name="contractExpiryDateTime">A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which the DG contract will expire once purchased (required).</param>
        /// <param name="createdDateTime">A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a DG offer was created (required).</param>
        /// <param name="itinerary">itinerary (required).</param>
        /// <param name="extAttributes">extAttributes (required).</param>
        /// <param name="contents">contents (required).</param>
        public DgOffer(string id = default(string), string premium = default(string), string coverage = default(string), string coveragePercentage = default(string), string serviceCap = default(string), string currency = default(string), string taxesTotal = default(string), List<DgTax> taxes = default(List<DgTax>), DgRequestType requestType = default(DgRequestType), int maxHoursBeforeDeparture = default(int), int minMinutesDelay = default(int), DateTime contractExpiryDateTime = default(DateTime), DateTime createdDateTime = default(DateTime), DgItinerary itinerary = default(DgItinerary), Dictionary<string, string> extAttributes = default(Dictionary<string, string>), Dictionary<string, DgContents> contents = default(Dictionary<string, DgContents>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for DgOffer and cannot be null");
            }
            this.Id = id;
            // to ensure "premium" is required (not null)
            if (premium == null)
            {
                throw new ArgumentNullException("premium is a required property for DgOffer and cannot be null");
            }
            this.Premium = premium;
            // to ensure "coverage" is required (not null)
            if (coverage == null)
            {
                throw new ArgumentNullException("coverage is a required property for DgOffer and cannot be null");
            }
            this.Coverage = coverage;
            // to ensure "coveragePercentage" is required (not null)
            if (coveragePercentage == null)
            {
                throw new ArgumentNullException("coveragePercentage is a required property for DgOffer and cannot be null");
            }
            this.CoveragePercentage = coveragePercentage;
            // to ensure "serviceCap" is required (not null)
            if (serviceCap == null)
            {
                throw new ArgumentNullException("serviceCap is a required property for DgOffer and cannot be null");
            }
            this.ServiceCap = serviceCap;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for DgOffer and cannot be null");
            }
            this.Currency = currency;
            // to ensure "taxesTotal" is required (not null)
            if (taxesTotal == null)
            {
                throw new ArgumentNullException("taxesTotal is a required property for DgOffer and cannot be null");
            }
            this.TaxesTotal = taxesTotal;
            this.RequestType = requestType;
            this.MaxHoursBeforeDeparture = maxHoursBeforeDeparture;
            this.MinMinutesDelay = minMinutesDelay;
            this.ContractExpiryDateTime = contractExpiryDateTime;
            this.CreatedDateTime = createdDateTime;
            // to ensure "itinerary" is required (not null)
            if (itinerary == null)
            {
                throw new ArgumentNullException("itinerary is a required property for DgOffer and cannot be null");
            }
            this.Itinerary = itinerary;
            // to ensure "extAttributes" is required (not null)
            if (extAttributes == null)
            {
                throw new ArgumentNullException("extAttributes is a required property for DgOffer and cannot be null");
            }
            this.ExtAttributes = extAttributes;
            // to ensure "contents" is required (not null)
            if (contents == null)
            {
                throw new ArgumentNullException("contents is a required property for DgOffer and cannot be null");
            }
            this.Contents = contents;
            this.Taxes = taxes;
        }

        /// <summary>
        /// Unique identifier for a DG offer
        /// </summary>
        /// <value>Unique identifier for a DG offer</value>
        /*
        <example>2e1006b3-aba6-4899-8682-b95bce693c27</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Amount per passenger to be paid by user for DG
        /// </summary>
        /// <value>Amount per passenger to be paid by user for DG</value>
        /*
        <example>20.80</example>
        */
        [DataMember(Name = "premium", IsRequired = true, EmitDefaultValue = true)]
        public string Premium { get; set; }

        /// <summary>
        /// Amount per passenger to be refunded to user upon DG exercise
        /// </summary>
        /// <value>Amount per passenger to be refunded to user upon DG exercise</value>
        /*
        <example>180.60</example>
        */
        [DataMember(Name = "coverage", IsRequired = true, EmitDefaultValue = true)]
        public string Coverage { get; set; }

        /// <summary>
        /// Percentage of the amount to be refunded to customer compared to flight tickets price
        /// </summary>
        /// <value>Percentage of the amount to be refunded to customer compared to flight tickets price</value>
        /*
        <example>80.00</example>
        */
        [DataMember(Name = "coverage_percentage", IsRequired = true, EmitDefaultValue = true)]
        public string CoveragePercentage { get; set; }

        /// <summary>
        /// Allowed amount per passenger to book a new flight in case of disruption
        /// </summary>
        /// <value>Allowed amount per passenger to book a new flight in case of disruption</value>
        /*
        <example>1000.00</example>
        */
        [DataMember(Name = "service_cap", IsRequired = true, EmitDefaultValue = true)]
        public string ServiceCap { get; set; }

        /// <summary>
        /// Currency of offer
        /// </summary>
        /// <value>Currency of offer</value>
        /*
        <example>CAD</example>
        */
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Total of applicable taxes
        /// </summary>
        /// <value>Total of applicable taxes</value>
        /*
        <example>20.00</example>
        */
        [DataMember(Name = "taxes_total", IsRequired = true, EmitDefaultValue = true)]
        public string TaxesTotal { get; set; }

        /// <summary>
        /// List of applicable taxes
        /// </summary>
        /// <value>List of applicable taxes</value>
        [DataMember(Name = "taxes", EmitDefaultValue = true)]
        public List<DgTax> Taxes { get; set; }

        /// <summary>
        /// The number of hours before each flight or slice departure from which a purchased contract would start to cover disruptions
        /// </summary>
        /// <value>The number of hours before each flight or slice departure from which a purchased contract would start to cover disruptions</value>
        /*
        <example>24</example>
        */
        [DataMember(Name = "max_hours_before_departure", IsRequired = true, EmitDefaultValue = true)]
        public long MaxHoursBeforeDeparture { get; set; }

        /// <summary>
        /// The minimum flight or slice departure delay in hours to be covered
        /// </summary>
        /// <value>The minimum flight or slice departure delay in hours to be covered</value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "min_minutes_delay", IsRequired = true, EmitDefaultValue = true)]
        public long MinMinutesDelay { get; set; }

        /// <summary>
        /// A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which the DG contract will expire once purchased
        /// </summary>
        /// <value>A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which the DG contract will expire once purchased</value>
        /*
        <example>2020-12-20T12:15:48Z</example>
        */
        [DataMember(Name = "contract_expiry_date_time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime ContractExpiryDateTime { get; set; }

        /// <summary>
        /// A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a DG offer was created
        /// </summary>
        /// <value>A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a DG offer was created</value>
        /*
        <example>2020-11-02T18:34:30Z</example>
        */
        [DataMember(Name = "created_date_time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Itinerary
        /// </summary>
        [DataMember(Name = "itinerary", IsRequired = true, EmitDefaultValue = true)]
        public DgItinerary Itinerary { get; set; }

        /// <summary>
        /// Gets or Sets ExtAttributes
        /// </summary>
        [DataMember(Name = "ext_attributes", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> ExtAttributes { get; set; }

        /// <summary>
        /// Gets or Sets Contents
        /// </summary>
        [DataMember(Name = "contents", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, DgContents> Contents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DgOffer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Premium: ").Append(Premium).Append("\n");
            sb.Append("  Coverage: ").Append(Coverage).Append("\n");
            sb.Append("  CoveragePercentage: ").Append(CoveragePercentage).Append("\n");
            sb.Append("  ServiceCap: ").Append(ServiceCap).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  TaxesTotal: ").Append(TaxesTotal).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  RequestType: ").Append(RequestType).Append("\n");
            sb.Append("  MaxHoursBeforeDeparture: ").Append(MaxHoursBeforeDeparture).Append("\n");
            sb.Append("  MinMinutesDelay: ").Append(MinMinutesDelay).Append("\n");
            sb.Append("  ContractExpiryDateTime: ").Append(ContractExpiryDateTime).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  Itinerary: ").Append(Itinerary).Append("\n");
            sb.Append("  ExtAttributes: ").Append(ExtAttributes).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MaxHoursBeforeDeparture (long) minimum
            if (this.MaxHoursBeforeDeparture < (long)0)
            {
                yield return new ValidationResult("Invalid value for MaxHoursBeforeDeparture, must be a value greater than 0.", new [] { "MaxHoursBeforeDeparture" });
            }

            // MinMinutesDelay (long) minimum
            if (this.MinMinutesDelay < (long)0)
            {
                yield return new ValidationResult("Invalid value for MinMinutesDelay, must be a value greater than 0.", new [] { "MinMinutesDelay" });
            }

            yield break;
        }
    }

}
