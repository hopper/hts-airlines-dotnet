// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// Service class of the segment
    /// </summary>
    /// <value>Service class of the segment</value>
    public enum Cabin
    {
        /// <summary>
        /// Enum Economy for value: economy
        /// </summary>
        Economy = 1,

        /// <summary>
        /// Enum PremiumEconomy for value: premium_economy
        /// </summary>
        PremiumEconomy = 2,

        /// <summary>
        /// Enum Business for value: business
        /// </summary>
        Business = 3,

        /// <summary>
        /// Enum First for value: first
        /// </summary>
        First = 4
    }

    /// <summary>
    /// Converts <see cref="Cabin"/> to and from the JSON value
    /// </summary>
    public static class CabinValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Cabin"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Cabin FromString(string value)
        {
            if (value.Equals("economy"))
                return Cabin.Economy;

            if (value.Equals("premium_economy"))
                return Cabin.PremiumEconomy;

            if (value.Equals("business"))
                return Cabin.Business;

            if (value.Equals("first"))
                return Cabin.First;

            throw new NotImplementedException($"Could not convert value to type Cabin: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Cabin"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Cabin? FromStringOrDefault(string value)
        {
            if (value.Equals("economy"))
                return Cabin.Economy;

            if (value.Equals("premium_economy"))
                return Cabin.PremiumEconomy;

            if (value.Equals("business"))
                return Cabin.Business;

            if (value.Equals("first"))
                return Cabin.First;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Cabin"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(Cabin value)
        {
            if (value == Cabin.Economy)
                return "economy";

            if (value == Cabin.PremiumEconomy)
                return "premium_economy";

            if (value == Cabin.Business)
                return "business";

            if (value == Cabin.First)
                return "first";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Cabin"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class CabinJsonConverter : JsonConverter<Cabin>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Cabin Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Cabin? result = rawValue == null
                ? null
                : CabinValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Cabin to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cabin"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Cabin cabin, JsonSerializerOptions options)
        {
            writer.WriteStringValue(cabin.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Cabin"/>
    /// </summary>
    public class CabinNullableJsonConverter : JsonConverter<Cabin?>
    {
        /// <summary>
        /// Returns a Cabin from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Cabin? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Cabin? result = rawValue == null
                ? null
                : CabinValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cabin"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Cabin? cabin, JsonSerializerOptions options)
        {
            writer.WriteStringValue(cabin?.ToString() ?? "null");
        }
    }
}
