// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// A DG contract
    /// </summary>
    public partial class DgContract
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DgContract" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for a contract</param>
        /// <param name="reference">Unique reference for a contract</param>
        /// <param name="status">status</param>
        /// <param name="offers">DG Offer(s) used to create the contract</param>
        /// <param name="coveragePercentage">Percentage of the ticket’s value to be refunded upon DG exercise</param>
        /// <param name="coverage">Total amount to be refunded upon DG exercise</param>
        /// <param name="premium">Total amount to be paid for DG</param>
        /// <param name="serviceCap">Allowed amount per passenger to book a new flight in case of disruption</param>
        /// <param name="currency">Currency of contract</param>
        /// <param name="taxesTotal">Part of the premium which are taxes</param>
        /// <param name="maxHoursBeforeDeparture">The number of hours before each flight or slice departure from which a purchased contract would start to cover disruptions</param>
        /// <param name="minMinutesDelay">The minimum flight or slice departure delay in minutes to be covered</param>
        /// <param name="createdDateTime">A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a CFAR contract was created</param>
        /// <param name="expiryDateTime">A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) A UTC RFC3339 datetime; the date and time at which the CFAR contract will expire once purchased</param>
        /// <param name="extAttributes">extAttributes</param>
        /// <param name="taxes">List of applicable taxes</param>
        /// <param name="language">Language of the booking</param>
        /// <param name="pnrReference">Reference of the PNR in the airline system</param>
        [JsonConstructor]
        public DgContract(string id, string reference, DgStatus status, List<DgOffer> offers, string coveragePercentage, string coverage, string premium, string serviceCap, string currency, string taxesTotal, long maxHoursBeforeDeparture, long minMinutesDelay, DateTime createdDateTime, DateTime expiryDateTime, Dictionary<string, string> extAttributes, Option<List<DgTax>?> taxes = default, Option<string?> language = default, Option<string?> pnrReference = default)
        {
            Id = id;
            Reference = reference;
            Status = status;
            Offers = offers;
            CoveragePercentage = coveragePercentage;
            Coverage = coverage;
            Premium = premium;
            ServiceCap = serviceCap;
            Currency = currency;
            TaxesTotal = taxesTotal;
            MaxHoursBeforeDeparture = maxHoursBeforeDeparture;
            MinMinutesDelay = minMinutesDelay;
            CreatedDateTime = createdDateTime;
            ExpiryDateTime = expiryDateTime;
            ExtAttributes = extAttributes;
            TaxesOption = taxes;
            LanguageOption = language;
            PnrReferenceOption = pnrReference;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public DgStatus Status { get; set; }

        /// <summary>
        /// Unique identifier for a contract
        /// </summary>
        /// <value>Unique identifier for a contract</value>
        /* <example>1ec9ef29-be31-6ed3-beec-9f5ae0d164ee</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Unique reference for a contract
        /// </summary>
        /// <value>Unique reference for a contract</value>
        /* <example>1FE5772642C77BAB</example> */
        [JsonPropertyName("reference")]
        public string Reference { get; set; }

        /// <summary>
        /// DG Offer(s) used to create the contract
        /// </summary>
        /// <value>DG Offer(s) used to create the contract</value>
        [JsonPropertyName("offers")]
        public List<DgOffer> Offers { get; set; }

        /// <summary>
        /// Percentage of the ticket’s value to be refunded upon DG exercise
        /// </summary>
        /// <value>Percentage of the ticket’s value to be refunded upon DG exercise</value>
        /* <example>80.00</example> */
        [JsonPropertyName("coverage_percentage")]
        public string CoveragePercentage { get; set; }

        /// <summary>
        /// Total amount to be refunded upon DG exercise
        /// </summary>
        /// <value>Total amount to be refunded upon DG exercise</value>
        /* <example>400.00</example> */
        [JsonPropertyName("coverage")]
        public string Coverage { get; set; }

        /// <summary>
        /// Total amount to be paid for DG
        /// </summary>
        /// <value>Total amount to be paid for DG</value>
        /* <example>40.00</example> */
        [JsonPropertyName("premium")]
        public string Premium { get; set; }

        /// <summary>
        /// Allowed amount per passenger to book a new flight in case of disruption
        /// </summary>
        /// <value>Allowed amount per passenger to book a new flight in case of disruption</value>
        /* <example>1000.00</example> */
        [JsonPropertyName("service_cap")]
        public string ServiceCap { get; set; }

        /// <summary>
        /// Currency of contract
        /// </summary>
        /// <value>Currency of contract</value>
        /* <example>CAD</example> */
        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Part of the premium which are taxes
        /// </summary>
        /// <value>Part of the premium which are taxes</value>
        /* <example>3.90</example> */
        [JsonPropertyName("taxes_total")]
        public string TaxesTotal { get; set; }

        /// <summary>
        /// The number of hours before each flight or slice departure from which a purchased contract would start to cover disruptions
        /// </summary>
        /// <value>The number of hours before each flight or slice departure from which a purchased contract would start to cover disruptions</value>
        /* <example>24</example> */
        [JsonPropertyName("max_hours_before_departure")]
        public long MaxHoursBeforeDeparture { get; set; }

        /// <summary>
        /// The minimum flight or slice departure delay in minutes to be covered
        /// </summary>
        /// <value>The minimum flight or slice departure delay in minutes to be covered</value>
        /* <example>1</example> */
        [JsonPropertyName("min_minutes_delay")]
        public long MinMinutesDelay { get; set; }

        /// <summary>
        /// A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a CFAR contract was created
        /// </summary>
        /// <value>A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a CFAR contract was created</value>
        /* <example>2022-01-08T14:36:56Z</example> */
        [JsonPropertyName("created_date_time")]
        public DateTime CreatedDateTime { get; set; }

        /// <summary>
        /// A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) A UTC RFC3339 datetime; the date and time at which the CFAR contract will expire once purchased
        /// </summary>
        /// <value>A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) A UTC RFC3339 datetime; the date and time at which the CFAR contract will expire once purchased</value>
        /* <example>2022-06-01T15:00Z</example> */
        [JsonPropertyName("expiry_date_time")]
        public DateTime ExpiryDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ExtAttributes
        /// </summary>
        [JsonPropertyName("ext_attributes")]
        public Dictionary<string, string> ExtAttributes { get; set; }

        /// <summary>
        /// Used to track the state of Taxes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DgTax>?> TaxesOption { get; private set; }

        /// <summary>
        /// List of applicable taxes
        /// </summary>
        /// <value>List of applicable taxes</value>
        [JsonPropertyName("taxes")]
        public List<DgTax>? Taxes { get { return this.TaxesOption; } set { this.TaxesOption = new Option<List<DgTax>?>(value); } }

        /// <summary>
        /// Used to track the state of Language
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LanguageOption { get; private set; }

        /// <summary>
        /// Language of the booking
        /// </summary>
        /// <value>Language of the booking</value>
        /* <example>EN</example> */
        [JsonPropertyName("language")]
        public string? Language { get { return this.LanguageOption; } set { this.LanguageOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of PnrReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PnrReferenceOption { get; private set; }

        /// <summary>
        /// Reference of the PNR in the airline system
        /// </summary>
        /// <value>Reference of the PNR in the airline system</value>
        /* <example>ABC123</example> */
        [JsonPropertyName("pnr_reference")]
        public string? PnrReference { get { return this.PnrReferenceOption; } set { this.PnrReferenceOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DgContract {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Offers: ").Append(Offers).Append("\n");
            sb.Append("  CoveragePercentage: ").Append(CoveragePercentage).Append("\n");
            sb.Append("  Coverage: ").Append(Coverage).Append("\n");
            sb.Append("  Premium: ").Append(Premium).Append("\n");
            sb.Append("  ServiceCap: ").Append(ServiceCap).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  TaxesTotal: ").Append(TaxesTotal).Append("\n");
            sb.Append("  MaxHoursBeforeDeparture: ").Append(MaxHoursBeforeDeparture).Append("\n");
            sb.Append("  MinMinutesDelay: ").Append(MinMinutesDelay).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  ExpiryDateTime: ").Append(ExpiryDateTime).Append("\n");
            sb.Append("  ExtAttributes: ").Append(ExtAttributes).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  PnrReference: ").Append(PnrReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DgContract" />
    /// </summary>
    public class DgContractJsonConverter : JsonConverter<DgContract>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTime
        /// </summary>
        public static string CreatedDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ExpiryDateTime
        /// </summary>
        public static string ExpiryDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DgContract" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DgContract Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> reference = default;
            Option<DgStatus?> status = default;
            Option<List<DgOffer>?> offers = default;
            Option<string?> coveragePercentage = default;
            Option<string?> coverage = default;
            Option<string?> premium = default;
            Option<string?> serviceCap = default;
            Option<string?> currency = default;
            Option<string?> taxesTotal = default;
            Option<long?> maxHoursBeforeDeparture = default;
            Option<long?> minMinutesDelay = default;
            Option<DateTime?> createdDateTime = default;
            Option<DateTime?> expiryDateTime = default;
            Option<Dictionary<string, string>?> extAttributes = default;
            Option<List<DgTax>?> taxes = default;
            Option<string?> language = default;
            Option<string?> pnrReference = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "reference":
                            reference = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<DgStatus?>(DgStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "offers":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                offers = new Option<List<DgOffer>?>(JsonSerializer.Deserialize<List<DgOffer>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "coverage_percentage":
                            coveragePercentage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "coverage":
                            coverage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "premium":
                            premium = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "service_cap":
                            serviceCap = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency":
                            currency = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "taxes_total":
                            taxesTotal = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "max_hours_before_departure":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                maxHoursBeforeDeparture = new Option<long?>(utf8JsonReader.GetInt32());
                            break;
                        case "min_minutes_delay":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                minMinutesDelay = new Option<long?>(utf8JsonReader.GetInt32());
                            break;
                        case "created_date_time":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "expiry_date_time":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expiryDateTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ext_attributes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                extAttributes = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "taxes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                taxes = new Option<List<DgTax>?>(JsonSerializer.Deserialize<List<DgTax>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "language":
                            language = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pnr_reference":
                            pnrReference = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class DgContract.", nameof(id));

            if (!reference.IsSet)
                throw new ArgumentException("Property is required for class DgContract.", nameof(reference));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class DgContract.", nameof(status));

            if (!offers.IsSet)
                throw new ArgumentException("Property is required for class DgContract.", nameof(offers));

            if (!coveragePercentage.IsSet)
                throw new ArgumentException("Property is required for class DgContract.", nameof(coveragePercentage));

            if (!coverage.IsSet)
                throw new ArgumentException("Property is required for class DgContract.", nameof(coverage));

            if (!premium.IsSet)
                throw new ArgumentException("Property is required for class DgContract.", nameof(premium));

            if (!serviceCap.IsSet)
                throw new ArgumentException("Property is required for class DgContract.", nameof(serviceCap));

            if (!currency.IsSet)
                throw new ArgumentException("Property is required for class DgContract.", nameof(currency));

            if (!taxesTotal.IsSet)
                throw new ArgumentException("Property is required for class DgContract.", nameof(taxesTotal));

            if (!maxHoursBeforeDeparture.IsSet)
                throw new ArgumentException("Property is required for class DgContract.", nameof(maxHoursBeforeDeparture));

            if (!minMinutesDelay.IsSet)
                throw new ArgumentException("Property is required for class DgContract.", nameof(minMinutesDelay));

            if (!createdDateTime.IsSet)
                throw new ArgumentException("Property is required for class DgContract.", nameof(createdDateTime));

            if (!expiryDateTime.IsSet)
                throw new ArgumentException("Property is required for class DgContract.", nameof(expiryDateTime));

            if (!extAttributes.IsSet)
                throw new ArgumentException("Property is required for class DgContract.", nameof(extAttributes));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DgContract.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class DgContract.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class DgContract.");

            if (offers.IsSet && offers.Value == null)
                throw new ArgumentNullException(nameof(offers), "Property is not nullable for class DgContract.");

            if (coveragePercentage.IsSet && coveragePercentage.Value == null)
                throw new ArgumentNullException(nameof(coveragePercentage), "Property is not nullable for class DgContract.");

            if (coverage.IsSet && coverage.Value == null)
                throw new ArgumentNullException(nameof(coverage), "Property is not nullable for class DgContract.");

            if (premium.IsSet && premium.Value == null)
                throw new ArgumentNullException(nameof(premium), "Property is not nullable for class DgContract.");

            if (serviceCap.IsSet && serviceCap.Value == null)
                throw new ArgumentNullException(nameof(serviceCap), "Property is not nullable for class DgContract.");

            if (currency.IsSet && currency.Value == null)
                throw new ArgumentNullException(nameof(currency), "Property is not nullable for class DgContract.");

            if (taxesTotal.IsSet && taxesTotal.Value == null)
                throw new ArgumentNullException(nameof(taxesTotal), "Property is not nullable for class DgContract.");

            if (maxHoursBeforeDeparture.IsSet && maxHoursBeforeDeparture.Value == null)
                throw new ArgumentNullException(nameof(maxHoursBeforeDeparture), "Property is not nullable for class DgContract.");

            if (minMinutesDelay.IsSet && minMinutesDelay.Value == null)
                throw new ArgumentNullException(nameof(minMinutesDelay), "Property is not nullable for class DgContract.");

            if (createdDateTime.IsSet && createdDateTime.Value == null)
                throw new ArgumentNullException(nameof(createdDateTime), "Property is not nullable for class DgContract.");

            if (expiryDateTime.IsSet && expiryDateTime.Value == null)
                throw new ArgumentNullException(nameof(expiryDateTime), "Property is not nullable for class DgContract.");

            if (extAttributes.IsSet && extAttributes.Value == null)
                throw new ArgumentNullException(nameof(extAttributes), "Property is not nullable for class DgContract.");

            if (taxes.IsSet && taxes.Value == null)
                throw new ArgumentNullException(nameof(taxes), "Property is not nullable for class DgContract.");

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class DgContract.");

            if (pnrReference.IsSet && pnrReference.Value == null)
                throw new ArgumentNullException(nameof(pnrReference), "Property is not nullable for class DgContract.");

            return new DgContract(id.Value!, reference.Value!, status.Value!.Value!, offers.Value!, coveragePercentage.Value!, coverage.Value!, premium.Value!, serviceCap.Value!, currency.Value!, taxesTotal.Value!, maxHoursBeforeDeparture.Value!.Value!, minMinutesDelay.Value!.Value!, createdDateTime.Value!.Value!, expiryDateTime.Value!.Value!, extAttributes.Value!, taxes, language, pnrReference);
        }

        /// <summary>
        /// Serializes a <see cref="DgContract" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgContract"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DgContract dgContract, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dgContract, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DgContract" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgContract"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DgContract dgContract, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dgContract.Id == null)
                throw new ArgumentNullException(nameof(dgContract.Id), "Property is required for class DgContract.");

            if (dgContract.Reference == null)
                throw new ArgumentNullException(nameof(dgContract.Reference), "Property is required for class DgContract.");

            if (dgContract.Offers == null)
                throw new ArgumentNullException(nameof(dgContract.Offers), "Property is required for class DgContract.");

            if (dgContract.CoveragePercentage == null)
                throw new ArgumentNullException(nameof(dgContract.CoveragePercentage), "Property is required for class DgContract.");

            if (dgContract.Coverage == null)
                throw new ArgumentNullException(nameof(dgContract.Coverage), "Property is required for class DgContract.");

            if (dgContract.Premium == null)
                throw new ArgumentNullException(nameof(dgContract.Premium), "Property is required for class DgContract.");

            if (dgContract.ServiceCap == null)
                throw new ArgumentNullException(nameof(dgContract.ServiceCap), "Property is required for class DgContract.");

            if (dgContract.Currency == null)
                throw new ArgumentNullException(nameof(dgContract.Currency), "Property is required for class DgContract.");

            if (dgContract.TaxesTotal == null)
                throw new ArgumentNullException(nameof(dgContract.TaxesTotal), "Property is required for class DgContract.");

            if (dgContract.ExtAttributes == null)
                throw new ArgumentNullException(nameof(dgContract.ExtAttributes), "Property is required for class DgContract.");

            if (dgContract.TaxesOption.IsSet && dgContract.Taxes == null)
                throw new ArgumentNullException(nameof(dgContract.Taxes), "Property is required for class DgContract.");

            if (dgContract.LanguageOption.IsSet && dgContract.Language == null)
                throw new ArgumentNullException(nameof(dgContract.Language), "Property is required for class DgContract.");

            if (dgContract.PnrReferenceOption.IsSet && dgContract.PnrReference == null)
                throw new ArgumentNullException(nameof(dgContract.PnrReference), "Property is required for class DgContract.");

            writer.WriteString("id", dgContract.Id);

            writer.WriteString("reference", dgContract.Reference);

            var statusRawValue = DgStatusValueConverter.ToJsonValue(dgContract.Status);
            writer.WriteString("status", statusRawValue);

            writer.WritePropertyName("offers");
            JsonSerializer.Serialize(writer, dgContract.Offers, jsonSerializerOptions);
            writer.WriteString("coverage_percentage", dgContract.CoveragePercentage);

            writer.WriteString("coverage", dgContract.Coverage);

            writer.WriteString("premium", dgContract.Premium);

            writer.WriteString("service_cap", dgContract.ServiceCap);

            writer.WriteString("currency", dgContract.Currency);

            writer.WriteString("taxes_total", dgContract.TaxesTotal);

            writer.WriteNumber("max_hours_before_departure", dgContract.MaxHoursBeforeDeparture);

            writer.WriteNumber("min_minutes_delay", dgContract.MinMinutesDelay);

            writer.WriteString("created_date_time", dgContract.CreatedDateTime.ToString(CreatedDateTimeFormat));

            writer.WriteString("expiry_date_time", dgContract.ExpiryDateTime.ToString(ExpiryDateTimeFormat));

            writer.WritePropertyName("ext_attributes");
            JsonSerializer.Serialize(writer, dgContract.ExtAttributes, jsonSerializerOptions);
            if (dgContract.TaxesOption.IsSet)
            {
                writer.WritePropertyName("taxes");
                JsonSerializer.Serialize(writer, dgContract.Taxes, jsonSerializerOptions);
            }
            if (dgContract.LanguageOption.IsSet)
                writer.WriteString("language", dgContract.Language);

            if (dgContract.PnrReferenceOption.IsSet)
                writer.WriteString("pnr_reference", dgContract.PnrReference);
        }
    }
}
