/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Com.Hopper.Hts.Airlines.Client.OpenAPIDateConverter;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// CfarCreateExercisePassengerPricing
    /// </summary>
    [DataContract(Name = "cfar_create_exercise_passenger_pricing")]
    public partial class CfarCreateExercisePassengerPricing
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CfarCreateExercisePassengerPricing" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CfarCreateExercisePassengerPricing() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CfarCreateExercisePassengerPricing" /> class.
        /// </summary>
        /// <param name="passengerCount">passengerCount (required).</param>
        /// <param name="individualPrice">Price per passenger (excluding ancillaries).</param>
        /// <param name="taxes">Taxes applicable per passenger.</param>
        public CfarCreateExercisePassengerPricing(PassengerCount passengerCount = default(PassengerCount), string individualPrice = default(string), List<CfarPassengerTax> taxes = default(List<CfarPassengerTax>))
        {
            // to ensure "passengerCount" is required (not null)
            if (passengerCount == null)
            {
                throw new ArgumentNullException("passengerCount is a required property for CfarCreateExercisePassengerPricing and cannot be null");
            }
            this.PassengerCount = passengerCount;
            this.IndividualPrice = individualPrice;
            this.Taxes = taxes;
        }

        /// <summary>
        /// Gets or Sets PassengerCount
        /// </summary>
        [DataMember(Name = "passenger_count", IsRequired = true, EmitDefaultValue = true)]
        public PassengerCount PassengerCount { get; set; }

        /// <summary>
        /// Price per passenger (excluding ancillaries)
        /// </summary>
        /// <value>Price per passenger (excluding ancillaries)</value>
        /*
        <example>200.55</example>
        */
        [DataMember(Name = "individual_price", EmitDefaultValue = false)]
        public string IndividualPrice { get; set; }

        /// <summary>
        /// Taxes applicable per passenger
        /// </summary>
        /// <value>Taxes applicable per passenger</value>
        [DataMember(Name = "taxes", EmitDefaultValue = false)]
        public List<CfarPassengerTax> Taxes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CfarCreateExercisePassengerPricing {\n");
            sb.Append("  PassengerCount: ").Append(PassengerCount).Append("\n");
            sb.Append("  IndividualPrice: ").Append(IndividualPrice).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
