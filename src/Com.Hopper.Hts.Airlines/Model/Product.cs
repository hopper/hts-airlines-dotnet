// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// The product for which the session is opened.&lt;br/&gt;Required for sessions having flow_type \&quot;exercise\&quot;.
    /// </summary>
    /// <value>The product for which the session is opened.&lt;br/&gt;Required for sessions having flow_type \&quot;exercise\&quot;.</value>
    public enum Product
    {
        /// <summary>
        /// Enum Cfar for value: cfar
        /// </summary>
        Cfar = 1,

        /// <summary>
        /// Enum Dg for value: dg
        /// </summary>
        Dg = 2,

        /// <summary>
        /// Enum All for value: all
        /// </summary>
        All = 3
    }

    /// <summary>
    /// Converts <see cref="Product"/> to and from the JSON value
    /// </summary>
    public static class ProductValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Product"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Product FromString(string value)
        {
            if (value.Equals("cfar"))
                return Product.Cfar;

            if (value.Equals("dg"))
                return Product.Dg;

            if (value.Equals("all"))
                return Product.All;

            throw new NotImplementedException($"Could not convert value to type Product: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Product"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Product? FromStringOrDefault(string value)
        {
            if (value.Equals("cfar"))
                return Product.Cfar;

            if (value.Equals("dg"))
                return Product.Dg;

            if (value.Equals("all"))
                return Product.All;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Product"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(Product value)
        {
            if (value == Product.Cfar)
                return "cfar";

            if (value == Product.Dg)
                return "dg";

            if (value == Product.All)
                return "all";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Product"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ProductJsonConverter : JsonConverter<Product>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Product Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Product? result = rawValue == null
                ? null
                : ProductValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Product to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="product"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Product product, JsonSerializerOptions options)
        {
            writer.WriteStringValue(product.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Product"/>
    /// </summary>
    public class ProductNullableJsonConverter : JsonConverter<Product?>
    {
        /// <summary>
        /// Returns a Product from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Product? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Product? result = rawValue == null
                ? null
                : ProductValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="product"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Product? product, JsonSerializerOptions options)
        {
            writer.WriteStringValue(product?.ToString() ?? "null");
        }
    }
}
