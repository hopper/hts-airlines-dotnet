// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// An object containing exercise information for a contract
    /// </summary>
    public partial class CfarContractExercise
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CfarContractExercise" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for a CFAR exercise</param>
        /// <param name="contractId">Unique identifier for a contract</param>
        /// <param name="exerciseInitiatedDateTime">A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a contract exercise was initiated</param>
        /// <param name="cashRefundAllowance">Refundable amount allowed in cash</param>
        /// <param name="extAttributes">extAttributes</param>
        /// <param name="redirectionToken">Token used to authenticate the redirection after filling refund information in claims portal</param>
        /// <param name="ftcRefundAllowance">Refundable amount allowed in future travel credit</param>
        /// <param name="currency">The currency of the airline&#39;s refund allowance</param>
        /// <param name="redirectionUrl">URL on which the customer should be redirected to exercise (if applicable)</param>
        [JsonConstructor]
        public CfarContractExercise(string id, string contractId, DateTime exerciseInitiatedDateTime, string cashRefundAllowance, Dictionary<string, string> extAttributes, Guid redirectionToken, Option<string?> ftcRefundAllowance = default, Option<string?> currency = default, Option<string?> redirectionUrl = default)
        {
            Id = id;
            ContractId = contractId;
            ExerciseInitiatedDateTime = exerciseInitiatedDateTime;
            CashRefundAllowance = cashRefundAllowance;
            ExtAttributes = extAttributes;
            RedirectionToken = redirectionToken;
            FtcRefundAllowanceOption = ftcRefundAllowance;
            CurrencyOption = currency;
            RedirectionUrlOption = redirectionUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Unique identifier for a CFAR exercise
        /// </summary>
        /// <value>Unique identifier for a CFAR exercise</value>
        /* <example>1ec9ef4b-b3bf-64ae-8a3d-6b084d9f6b3c</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Unique identifier for a contract
        /// </summary>
        /// <value>Unique identifier for a contract</value>
        /* <example>1ec9ef29-be31-6ed3-beec-9f5ae0d164ee</example> */
        [JsonPropertyName("contract_id")]
        public string ContractId { get; set; }

        /// <summary>
        /// A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a contract exercise was initiated
        /// </summary>
        /// <value>A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a contract exercise was initiated</value>
        /* <example>2022-03-08T15:20:30Z</example> */
        [JsonPropertyName("exercise_initiated_date_time")]
        public DateTime ExerciseInitiatedDateTime { get; set; }

        /// <summary>
        /// Refundable amount allowed in cash
        /// </summary>
        /// <value>Refundable amount allowed in cash</value>
        /* <example>49.32</example> */
        [JsonPropertyName("cash_refund_allowance")]
        public string CashRefundAllowance { get; set; }

        /// <summary>
        /// Gets or Sets ExtAttributes
        /// </summary>
        [JsonPropertyName("ext_attributes")]
        public Dictionary<string, string> ExtAttributes { get; set; }

        /// <summary>
        /// Token used to authenticate the redirection after filling refund information in claims portal
        /// </summary>
        /// <value>Token used to authenticate the redirection after filling refund information in claims portal</value>
        [JsonPropertyName("redirection_token")]
        public Guid RedirectionToken { get; set; }

        /// <summary>
        /// Used to track the state of FtcRefundAllowance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FtcRefundAllowanceOption { get; private set; }

        /// <summary>
        /// Refundable amount allowed in future travel credit
        /// </summary>
        /// <value>Refundable amount allowed in future travel credit</value>
        /* <example>123.20</example> */
        [JsonPropertyName("ftc_refund_allowance")]
        public string? FtcRefundAllowance { get { return this.FtcRefundAllowanceOption; } set { this.FtcRefundAllowanceOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Currency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyOption { get; private set; }

        /// <summary>
        /// The currency of the airline&#39;s refund allowance
        /// </summary>
        /// <value>The currency of the airline&#39;s refund allowance</value>
        /* <example>CAD</example> */
        [JsonPropertyName("currency")]
        public string? Currency { get { return this.CurrencyOption; } set { this.CurrencyOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of RedirectionUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RedirectionUrlOption { get; private set; }

        /// <summary>
        /// URL on which the customer should be redirected to exercise (if applicable)
        /// </summary>
        /// <value>URL on which the customer should be redirected to exercise (if applicable)</value>
        /* <example>https://hts.hopper.com/</example> */
        [JsonPropertyName("redirection_url")]
        public string? RedirectionUrl { get { return this.RedirectionUrlOption; } set { this.RedirectionUrlOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CfarContractExercise {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  ExerciseInitiatedDateTime: ").Append(ExerciseInitiatedDateTime).Append("\n");
            sb.Append("  CashRefundAllowance: ").Append(CashRefundAllowance).Append("\n");
            sb.Append("  ExtAttributes: ").Append(ExtAttributes).Append("\n");
            sb.Append("  RedirectionToken: ").Append(RedirectionToken).Append("\n");
            sb.Append("  FtcRefundAllowance: ").Append(FtcRefundAllowance).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  RedirectionUrl: ").Append(RedirectionUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CfarContractExercise" />
    /// </summary>
    public class CfarContractExerciseJsonConverter : JsonConverter<CfarContractExercise>
    {
        /// <summary>
        /// The format to use to serialize ExerciseInitiatedDateTime
        /// </summary>
        public static string ExerciseInitiatedDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CfarContractExercise" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CfarContractExercise Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> contractId = default;
            Option<DateTime?> exerciseInitiatedDateTime = default;
            Option<string?> cashRefundAllowance = default;
            Option<Dictionary<string, string>?> extAttributes = default;
            Option<Guid?> redirectionToken = default;
            Option<string?> ftcRefundAllowance = default;
            Option<string?> currency = default;
            Option<string?> redirectionUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "contract_id":
                            contractId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "exercise_initiated_date_time":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                exerciseInitiatedDateTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "cash_refund_allowance":
                            cashRefundAllowance = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ext_attributes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                extAttributes = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "redirection_token":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                redirectionToken = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "ftc_refund_allowance":
                            ftcRefundAllowance = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency":
                            currency = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "redirection_url":
                            redirectionUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class CfarContractExercise.", nameof(id));

            if (!contractId.IsSet)
                throw new ArgumentException("Property is required for class CfarContractExercise.", nameof(contractId));

            if (!exerciseInitiatedDateTime.IsSet)
                throw new ArgumentException("Property is required for class CfarContractExercise.", nameof(exerciseInitiatedDateTime));

            if (!cashRefundAllowance.IsSet)
                throw new ArgumentException("Property is required for class CfarContractExercise.", nameof(cashRefundAllowance));

            if (!extAttributes.IsSet)
                throw new ArgumentException("Property is required for class CfarContractExercise.", nameof(extAttributes));

            if (!redirectionToken.IsSet)
                throw new ArgumentException("Property is required for class CfarContractExercise.", nameof(redirectionToken));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class CfarContractExercise.");

            if (contractId.IsSet && contractId.Value == null)
                throw new ArgumentNullException(nameof(contractId), "Property is not nullable for class CfarContractExercise.");

            if (exerciseInitiatedDateTime.IsSet && exerciseInitiatedDateTime.Value == null)
                throw new ArgumentNullException(nameof(exerciseInitiatedDateTime), "Property is not nullable for class CfarContractExercise.");

            if (cashRefundAllowance.IsSet && cashRefundAllowance.Value == null)
                throw new ArgumentNullException(nameof(cashRefundAllowance), "Property is not nullable for class CfarContractExercise.");

            if (extAttributes.IsSet && extAttributes.Value == null)
                throw new ArgumentNullException(nameof(extAttributes), "Property is not nullable for class CfarContractExercise.");

            if (redirectionToken.IsSet && redirectionToken.Value == null)
                throw new ArgumentNullException(nameof(redirectionToken), "Property is not nullable for class CfarContractExercise.");

            if (ftcRefundAllowance.IsSet && ftcRefundAllowance.Value == null)
                throw new ArgumentNullException(nameof(ftcRefundAllowance), "Property is not nullable for class CfarContractExercise.");

            if (currency.IsSet && currency.Value == null)
                throw new ArgumentNullException(nameof(currency), "Property is not nullable for class CfarContractExercise.");

            if (redirectionUrl.IsSet && redirectionUrl.Value == null)
                throw new ArgumentNullException(nameof(redirectionUrl), "Property is not nullable for class CfarContractExercise.");

            return new CfarContractExercise(id.Value!, contractId.Value!, exerciseInitiatedDateTime.Value!.Value!, cashRefundAllowance.Value!, extAttributes.Value!, redirectionToken.Value!.Value!, ftcRefundAllowance, currency, redirectionUrl);
        }

        /// <summary>
        /// Serializes a <see cref="CfarContractExercise" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cfarContractExercise"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CfarContractExercise cfarContractExercise, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, cfarContractExercise, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CfarContractExercise" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cfarContractExercise"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CfarContractExercise cfarContractExercise, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cfarContractExercise.Id == null)
                throw new ArgumentNullException(nameof(cfarContractExercise.Id), "Property is required for class CfarContractExercise.");

            if (cfarContractExercise.ContractId == null)
                throw new ArgumentNullException(nameof(cfarContractExercise.ContractId), "Property is required for class CfarContractExercise.");

            if (cfarContractExercise.CashRefundAllowance == null)
                throw new ArgumentNullException(nameof(cfarContractExercise.CashRefundAllowance), "Property is required for class CfarContractExercise.");

            if (cfarContractExercise.ExtAttributes == null)
                throw new ArgumentNullException(nameof(cfarContractExercise.ExtAttributes), "Property is required for class CfarContractExercise.");

            if (cfarContractExercise.FtcRefundAllowanceOption.IsSet && cfarContractExercise.FtcRefundAllowance == null)
                throw new ArgumentNullException(nameof(cfarContractExercise.FtcRefundAllowance), "Property is required for class CfarContractExercise.");

            if (cfarContractExercise.CurrencyOption.IsSet && cfarContractExercise.Currency == null)
                throw new ArgumentNullException(nameof(cfarContractExercise.Currency), "Property is required for class CfarContractExercise.");

            if (cfarContractExercise.RedirectionUrlOption.IsSet && cfarContractExercise.RedirectionUrl == null)
                throw new ArgumentNullException(nameof(cfarContractExercise.RedirectionUrl), "Property is required for class CfarContractExercise.");

            writer.WriteString("id", cfarContractExercise.Id);

            writer.WriteString("contract_id", cfarContractExercise.ContractId);

            writer.WriteString("exercise_initiated_date_time", cfarContractExercise.ExerciseInitiatedDateTime.ToString(ExerciseInitiatedDateTimeFormat));

            writer.WriteString("cash_refund_allowance", cfarContractExercise.CashRefundAllowance);

            writer.WritePropertyName("ext_attributes");
            JsonSerializer.Serialize(writer, cfarContractExercise.ExtAttributes, jsonSerializerOptions);
            writer.WriteString("redirection_token", cfarContractExercise.RedirectionToken);

            if (cfarContractExercise.FtcRefundAllowanceOption.IsSet)
                writer.WriteString("ftc_refund_allowance", cfarContractExercise.FtcRefundAllowance);

            if (cfarContractExercise.CurrencyOption.IsSet)
                writer.WriteString("currency", cfarContractExercise.Currency);

            if (cfarContractExercise.RedirectionUrlOption.IsSet)
                writer.WriteString("redirection_url", cfarContractExercise.RedirectionUrl);
        }
    }
}
