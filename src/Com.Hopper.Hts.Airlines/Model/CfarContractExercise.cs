/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Hopper.Hts.Airlines.Client.OpenAPIDateConverter;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// An object containing exercise information for a contract
    /// </summary>
    [DataContract(Name = "cfar_contract_exercise")]
    public partial class CfarContractExercise : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CfarContractExercise" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CfarContractExercise() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CfarContractExercise" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for a CFAR exercise (required).</param>
        /// <param name="contractId">Unique identifier for a contract (required).</param>
        /// <param name="exerciseInitiatedDateTime">A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a contract exercise was initiated (required).</param>
        /// <param name="cashRefundAllowance">Refundable amount allowed in cash (required).</param>
        /// <param name="extAttributes">extAttributes (required).</param>
        /// <param name="ftcRefundAllowance">Refundable amount allowed in future travel credit.</param>
        /// <param name="currency">The currency of the airline&#39;s refund allowance.</param>
        /// <param name="redirectionToken">Token used to authenticate the redirection after filling refund information in claims portal (required).</param>
        /// <param name="redirectionUrl">URL on which the customer should be redirected to exercise (if applicable).</param>
        public CfarContractExercise(string id = default(string), string contractId = default(string), DateTime exerciseInitiatedDateTime = default(DateTime), string cashRefundAllowance = default(string), Dictionary<string, string> extAttributes = default(Dictionary<string, string>), string ftcRefundAllowance = default(string), string currency = default(string), Guid redirectionToken = default(Guid), string redirectionUrl = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for CfarContractExercise and cannot be null");
            }
            this.Id = id;
            // to ensure "contractId" is required (not null)
            if (contractId == null)
            {
                throw new ArgumentNullException("contractId is a required property for CfarContractExercise and cannot be null");
            }
            this.ContractId = contractId;
            this.ExerciseInitiatedDateTime = exerciseInitiatedDateTime;
            // to ensure "cashRefundAllowance" is required (not null)
            if (cashRefundAllowance == null)
            {
                throw new ArgumentNullException("cashRefundAllowance is a required property for CfarContractExercise and cannot be null");
            }
            this.CashRefundAllowance = cashRefundAllowance;
            // to ensure "extAttributes" is required (not null)
            if (extAttributes == null)
            {
                throw new ArgumentNullException("extAttributes is a required property for CfarContractExercise and cannot be null");
            }
            this.ExtAttributes = extAttributes;
            this.RedirectionToken = redirectionToken;
            this.FtcRefundAllowance = ftcRefundAllowance;
            this.Currency = currency;
            this.RedirectionUrl = redirectionUrl;
        }

        /// <summary>
        /// Unique identifier for a CFAR exercise
        /// </summary>
        /// <value>Unique identifier for a CFAR exercise</value>
        /*
        <example>1ec9ef4b-b3bf-64ae-8a3d-6b084d9f6b3c</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Unique identifier for a contract
        /// </summary>
        /// <value>Unique identifier for a contract</value>
        /*
        <example>1ec9ef29-be31-6ed3-beec-9f5ae0d164ee</example>
        */
        [DataMember(Name = "contract_id", IsRequired = true, EmitDefaultValue = true)]
        public string ContractId { get; set; }

        /// <summary>
        /// A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a contract exercise was initiated
        /// </summary>
        /// <value>A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a contract exercise was initiated</value>
        /*
        <example>2022-03-08T15:20:30Z</example>
        */
        [DataMember(Name = "exercise_initiated_date_time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime ExerciseInitiatedDateTime { get; set; }

        /// <summary>
        /// Refundable amount allowed in cash
        /// </summary>
        /// <value>Refundable amount allowed in cash</value>
        /*
        <example>49.32</example>
        */
        [DataMember(Name = "cash_refund_allowance", IsRequired = true, EmitDefaultValue = true)]
        public string CashRefundAllowance { get; set; }

        /// <summary>
        /// Gets or Sets ExtAttributes
        /// </summary>
        [DataMember(Name = "ext_attributes", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> ExtAttributes { get; set; }

        /// <summary>
        /// Refundable amount allowed in future travel credit
        /// </summary>
        /// <value>Refundable amount allowed in future travel credit</value>
        /*
        <example>123.20</example>
        */
        [DataMember(Name = "ftc_refund_allowance", EmitDefaultValue = true)]
        public string FtcRefundAllowance { get; set; }

        /// <summary>
        /// The currency of the airline&#39;s refund allowance
        /// </summary>
        /// <value>The currency of the airline&#39;s refund allowance</value>
        /*
        <example>CAD</example>
        */
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Token used to authenticate the redirection after filling refund information in claims portal
        /// </summary>
        /// <value>Token used to authenticate the redirection after filling refund information in claims portal</value>
        [DataMember(Name = "redirection_token", IsRequired = true, EmitDefaultValue = true)]
        public Guid RedirectionToken { get; set; }

        /// <summary>
        /// URL on which the customer should be redirected to exercise (if applicable)
        /// </summary>
        /// <value>URL on which the customer should be redirected to exercise (if applicable)</value>
        /*
        <example>https://hts.hopper.com/</example>
        */
        [DataMember(Name = "redirection_url", EmitDefaultValue = true)]
        public string RedirectionUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CfarContractExercise {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  ExerciseInitiatedDateTime: ").Append(ExerciseInitiatedDateTime).Append("\n");
            sb.Append("  CashRefundAllowance: ").Append(CashRefundAllowance).Append("\n");
            sb.Append("  ExtAttributes: ").Append(ExtAttributes).Append("\n");
            sb.Append("  FtcRefundAllowance: ").Append(FtcRefundAllowance).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  RedirectionToken: ").Append(RedirectionToken).Append("\n");
            sb.Append("  RedirectionUrl: ").Append(RedirectionUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
