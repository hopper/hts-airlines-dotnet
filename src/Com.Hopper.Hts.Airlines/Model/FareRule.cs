/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Hopper.Hts.Airlines.Client.OpenAPIDateConverter;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// FareRule
    /// </summary>
    [DataContract(Name = "fare_rule")]
    public partial class FareRule : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ModificationType
        /// </summary>
        [DataMember(Name = "modification_type", IsRequired = true, EmitDefaultValue = true)]
        public ModificationType ModificationType { get; set; }

        /// <summary>
        /// Gets or Sets ModificationTime
        /// </summary>
        [DataMember(Name = "modification_time", IsRequired = true, EmitDefaultValue = true)]
        public ModificationTime ModificationTime { get; set; }

        /// <summary>
        /// Gets or Sets RefundMethod
        /// </summary>
        [DataMember(Name = "refund_method", EmitDefaultValue = false)]
        public AirlineRefundMethod? RefundMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FareRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FareRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FareRule" /> class.
        /// </summary>
        /// <param name="modificationType">modificationType (required).</param>
        /// <param name="modificationTime">modificationTime (required).</param>
        /// <param name="allowed">Determines if that type of modifications at this time is allowed (required).</param>
        /// <param name="fee">Amount to be paid as penalty fee to perform the modification.</param>
        /// <param name="percentage">Percentage of the fare to be paid as penalty to perform the modification.</param>
        /// <param name="refundMethod">refundMethod.</param>
        public FareRule(ModificationType modificationType = default(ModificationType), ModificationTime modificationTime = default(ModificationTime), bool allowed = default(bool), string fee = default(string), string percentage = default(string), AirlineRefundMethod? refundMethod = default(AirlineRefundMethod?))
        {
            this.ModificationType = modificationType;
            this.ModificationTime = modificationTime;
            this.Allowed = allowed;
            this.Fee = fee;
            this.Percentage = percentage;
            this.RefundMethod = refundMethod;
        }

        /// <summary>
        /// Determines if that type of modifications at this time is allowed
        /// </summary>
        /// <value>Determines if that type of modifications at this time is allowed</value>
        [DataMember(Name = "allowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Allowed { get; set; }

        /// <summary>
        /// Amount to be paid as penalty fee to perform the modification
        /// </summary>
        /// <value>Amount to be paid as penalty fee to perform the modification</value>
        [DataMember(Name = "fee", EmitDefaultValue = false)]
        public string Fee { get; set; }

        /// <summary>
        /// Percentage of the fare to be paid as penalty to perform the modification
        /// </summary>
        /// <value>Percentage of the fare to be paid as penalty to perform the modification</value>
        [DataMember(Name = "percentage", EmitDefaultValue = false)]
        public string Percentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FareRule {\n");
            sb.Append("  ModificationType: ").Append(ModificationType).Append("\n");
            sb.Append("  ModificationTime: ").Append(ModificationTime).Append("\n");
            sb.Append("  Allowed: ").Append(Allowed).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  RefundMethod: ").Append(RefundMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
