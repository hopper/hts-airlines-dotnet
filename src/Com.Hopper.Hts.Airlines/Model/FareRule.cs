// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// FareRule
    /// </summary>
    public partial class FareRule
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FareRule" /> class.
        /// </summary>
        /// <param name="modificationType">modificationType</param>
        /// <param name="modificationTime">modificationTime</param>
        /// <param name="allowed">Determines if that type of modifications at this time is allowed</param>
        /// <param name="fee">Amount to be paid as penalty fee to perform the modification</param>
        /// <param name="percentage">Percentage of the fare to be paid as penalty to perform the modification</param>
        /// <param name="refundMethod">refundMethod</param>
        [JsonConstructor]
        public FareRule(ModificationType modificationType, ModificationTime modificationTime, bool allowed, Option<string?> fee = default, Option<string?> percentage = default, Option<AirlineRefundMethod?> refundMethod = default)
        {
            ModificationType = modificationType;
            ModificationTime = modificationTime;
            Allowed = allowed;
            FeeOption = fee;
            PercentageOption = percentage;
            RefundMethodOption = refundMethod;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ModificationType
        /// </summary>
        [JsonPropertyName("modification_type")]
        public ModificationType ModificationType { get; set; }

        /// <summary>
        /// Gets or Sets ModificationTime
        /// </summary>
        [JsonPropertyName("modification_time")]
        public ModificationTime ModificationTime { get; set; }

        /// <summary>
        /// Used to track the state of RefundMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AirlineRefundMethod?> RefundMethodOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefundMethod
        /// </summary>
        [JsonPropertyName("refund_method")]
        public AirlineRefundMethod? RefundMethod { get { return this.RefundMethodOption; } set { this.RefundMethodOption = new Option<AirlineRefundMethod?>(value); } }

        /// <summary>
        /// Determines if that type of modifications at this time is allowed
        /// </summary>
        /// <value>Determines if that type of modifications at this time is allowed</value>
        [JsonPropertyName("allowed")]
        public bool Allowed { get; set; }

        /// <summary>
        /// Used to track the state of Fee
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FeeOption { get; private set; }

        /// <summary>
        /// Amount to be paid as penalty fee to perform the modification
        /// </summary>
        /// <value>Amount to be paid as penalty fee to perform the modification</value>
        [JsonPropertyName("fee")]
        public string? Fee { get { return this.FeeOption; } set { this.FeeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Percentage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PercentageOption { get; private set; }

        /// <summary>
        /// Percentage of the fare to be paid as penalty to perform the modification
        /// </summary>
        /// <value>Percentage of the fare to be paid as penalty to perform the modification</value>
        [JsonPropertyName("percentage")]
        public string? Percentage { get { return this.PercentageOption; } set { this.PercentageOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FareRule {\n");
            sb.Append("  ModificationType: ").Append(ModificationType).Append("\n");
            sb.Append("  ModificationTime: ").Append(ModificationTime).Append("\n");
            sb.Append("  Allowed: ").Append(Allowed).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  RefundMethod: ").Append(RefundMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FareRule" />
    /// </summary>
    public class FareRuleJsonConverter : JsonConverter<FareRule>
    {
        /// <summary>
        /// Deserializes json to <see cref="FareRule" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FareRule Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ModificationType?> modificationType = default;
            Option<ModificationTime?> modificationTime = default;
            Option<bool?> allowed = default;
            Option<string?> fee = default;
            Option<string?> percentage = default;
            Option<AirlineRefundMethod?> refundMethod = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "modification_type":
                            string? modificationTypeRawValue = utf8JsonReader.GetString();
                            if (modificationTypeRawValue != null)
                                modificationType = new Option<ModificationType?>(ModificationTypeValueConverter.FromStringOrDefault(modificationTypeRawValue));
                            break;
                        case "modification_time":
                            string? modificationTimeRawValue = utf8JsonReader.GetString();
                            if (modificationTimeRawValue != null)
                                modificationTime = new Option<ModificationTime?>(ModificationTimeValueConverter.FromStringOrDefault(modificationTimeRawValue));
                            break;
                        case "allowed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                allowed = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "fee":
                            fee = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "percentage":
                            percentage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "refund_method":
                            string? refundMethodRawValue = utf8JsonReader.GetString();
                            if (refundMethodRawValue != null)
                                refundMethod = new Option<AirlineRefundMethod?>(AirlineRefundMethodValueConverter.FromStringOrDefault(refundMethodRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!modificationType.IsSet)
                throw new ArgumentException("Property is required for class FareRule.", nameof(modificationType));

            if (!modificationTime.IsSet)
                throw new ArgumentException("Property is required for class FareRule.", nameof(modificationTime));

            if (!allowed.IsSet)
                throw new ArgumentException("Property is required for class FareRule.", nameof(allowed));

            if (modificationType.IsSet && modificationType.Value == null)
                throw new ArgumentNullException(nameof(modificationType), "Property is not nullable for class FareRule.");

            if (modificationTime.IsSet && modificationTime.Value == null)
                throw new ArgumentNullException(nameof(modificationTime), "Property is not nullable for class FareRule.");

            if (allowed.IsSet && allowed.Value == null)
                throw new ArgumentNullException(nameof(allowed), "Property is not nullable for class FareRule.");

            if (fee.IsSet && fee.Value == null)
                throw new ArgumentNullException(nameof(fee), "Property is not nullable for class FareRule.");

            if (percentage.IsSet && percentage.Value == null)
                throw new ArgumentNullException(nameof(percentage), "Property is not nullable for class FareRule.");

            if (refundMethod.IsSet && refundMethod.Value == null)
                throw new ArgumentNullException(nameof(refundMethod), "Property is not nullable for class FareRule.");

            return new FareRule(modificationType.Value!.Value!, modificationTime.Value!.Value!, allowed.Value!.Value!, fee, percentage, refundMethod);
        }

        /// <summary>
        /// Serializes a <see cref="FareRule" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fareRule"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FareRule fareRule, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fareRule, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FareRule" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fareRule"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FareRule fareRule, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fareRule.FeeOption.IsSet && fareRule.Fee == null)
                throw new ArgumentNullException(nameof(fareRule.Fee), "Property is required for class FareRule.");

            if (fareRule.PercentageOption.IsSet && fareRule.Percentage == null)
                throw new ArgumentNullException(nameof(fareRule.Percentage), "Property is required for class FareRule.");

            var modificationTypeRawValue = ModificationTypeValueConverter.ToJsonValue(fareRule.ModificationType);
            writer.WriteString("modification_type", modificationTypeRawValue);

            var modificationTimeRawValue = ModificationTimeValueConverter.ToJsonValue(fareRule.ModificationTime);
            writer.WriteString("modification_time", modificationTimeRawValue);

            writer.WriteBoolean("allowed", fareRule.Allowed);

            if (fareRule.FeeOption.IsSet)
                writer.WriteString("fee", fareRule.Fee);

            if (fareRule.PercentageOption.IsSet)
                writer.WriteString("percentage", fareRule.Percentage);

            if (fareRule.RefundMethodOption.IsSet)
            {
                var refundMethodRawValue = AirlineRefundMethodValueConverter.ToJsonValue(fareRule.RefundMethod!.Value);
                writer.WriteString("refund_method", refundMethodRawValue);
            }
        }
    }
}
