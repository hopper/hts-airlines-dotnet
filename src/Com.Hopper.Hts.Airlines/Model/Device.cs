// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// The end-user&#39;s device
    /// </summary>
    public partial class Device
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Device" /> class.
        /// </summary>
        /// <param name="desktop"></param>
        public Device(Desktop desktop)
        {
            Desktop = desktop;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Device" /> class.
        /// </summary>
        /// <param name="mobile"></param>
        public Device(Mobile mobile)
        {
            Mobile = mobile;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Device" /> class.
        /// </summary>
        /// <param name="tablet"></param>
        public Device(Tablet tablet)
        {
            Tablet = tablet;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Desktop
        /// </summary>
        public Desktop? Desktop { get; set; }

        /// <summary>
        /// Gets or Sets Mobile
        /// </summary>
        public Mobile? Mobile { get; set; }

        /// <summary>
        /// Gets or Sets Tablet
        /// </summary>
        public Tablet? Tablet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Device {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Device" />
    /// </summary>
    public class DeviceJsonConverter : JsonConverter<Device>
    {
        /// <summary>
        /// Deserializes json to <see cref="Device" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Device Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> type = default;

            Desktop? desktop = null;
            Mobile? mobile = null;
            Tablet? tablet = null;

            Utf8JsonReader utf8JsonReaderDiscriminator = utf8JsonReader;
            while (utf8JsonReaderDiscriminator.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (utf8JsonReaderDiscriminator.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReaderDiscriminator.GetString();
                    utf8JsonReaderDiscriminator.Read();
                    if (localVarJsonPropertyName?.Equals("type") ?? false)
                    {
                        string? discriminator = utf8JsonReaderDiscriminator.GetString();
                        if (discriminator?.Equals("desktop") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderDesktop = utf8JsonReader;
                            desktop = JsonSerializer.Deserialize<Desktop>(ref utf8JsonReaderDesktop, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("mobile") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderMobile = utf8JsonReader;
                            mobile = JsonSerializer.Deserialize<Mobile>(ref utf8JsonReaderMobile, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("tablet") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderTablet = utf8JsonReader;
                            tablet = JsonSerializer.Deserialize<Tablet>(ref utf8JsonReaderTablet, jsonSerializerOptions);
                        }
                    }
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class Device.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Device.");

            if (desktop != null)
                return new Device(desktop);

            if (mobile != null)
                return new Device(mobile);

            if (tablet != null)
                return new Device(tablet);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="Device" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="device"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Device device, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (device.Desktop != null)
            {
                DesktopJsonConverter desktopJsonConverter = (DesktopJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(device.Desktop.GetType()));
                desktopJsonConverter.WriteProperties(writer, device.Desktop, jsonSerializerOptions);
            }

            if (device.Mobile != null)
            {
                MobileJsonConverter mobileJsonConverter = (MobileJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(device.Mobile.GetType()));
                mobileJsonConverter.WriteProperties(writer, device.Mobile, jsonSerializerOptions);
            }

            if (device.Tablet != null)
            {
                TabletJsonConverter tabletJsonConverter = (TabletJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(device.Tablet.GetType()));
                tabletJsonConverter.WriteProperties(writer, device.Tablet, jsonSerializerOptions);
            }

            WriteProperties(writer, device, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Device" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="device"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Device device, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
