// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// Browser
    /// </summary>
    public partial class Browser
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Browser" /> class.
        /// </summary>
        /// <param name="chrome"></param>
        public Browser(Chrome chrome)
        {
            Chrome = chrome;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Browser" /> class.
        /// </summary>
        /// <param name="edge"></param>
        public Browser(Edge edge)
        {
            Edge = edge;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Browser" /> class.
        /// </summary>
        /// <param name="firefox"></param>
        public Browser(Firefox firefox)
        {
            Firefox = firefox;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Browser" /> class.
        /// </summary>
        /// <param name="internetExplorer"></param>
        public Browser(InternetExplorer internetExplorer)
        {
            InternetExplorer = internetExplorer;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Browser" /> class.
        /// </summary>
        /// <param name="opera"></param>
        public Browser(Opera opera)
        {
            Opera = opera;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Browser" /> class.
        /// </summary>
        /// <param name="otherBrowser"></param>
        public Browser(OtherBrowser otherBrowser)
        {
            OtherBrowser = otherBrowser;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Browser" /> class.
        /// </summary>
        /// <param name="safari"></param>
        public Browser(Safari safari)
        {
            Safari = safari;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Chrome
        /// </summary>
        public Chrome? Chrome { get; set; }

        /// <summary>
        /// Gets or Sets Edge
        /// </summary>
        public Edge? Edge { get; set; }

        /// <summary>
        /// Gets or Sets Firefox
        /// </summary>
        public Firefox? Firefox { get; set; }

        /// <summary>
        /// Gets or Sets InternetExplorer
        /// </summary>
        public InternetExplorer? InternetExplorer { get; set; }

        /// <summary>
        /// Gets or Sets Opera
        /// </summary>
        public Opera? Opera { get; set; }

        /// <summary>
        /// Gets or Sets OtherBrowser
        /// </summary>
        public OtherBrowser? OtherBrowser { get; set; }

        /// <summary>
        /// Gets or Sets Safari
        /// </summary>
        public Safari? Safari { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Browser {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Browser" />
    /// </summary>
    public class BrowserJsonConverter : JsonConverter<Browser>
    {
        /// <summary>
        /// Deserializes json to <see cref="Browser" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Browser Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> type = default;

            Chrome? chrome = null;
            Edge? edge = null;
            Firefox? firefox = null;
            InternetExplorer? internetExplorer = null;
            Opera? opera = null;
            OtherBrowser? otherBrowser = null;
            Safari? safari = null;

            Utf8JsonReader utf8JsonReaderDiscriminator = utf8JsonReader;
            while (utf8JsonReaderDiscriminator.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (utf8JsonReaderDiscriminator.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReaderDiscriminator.GetString();
                    utf8JsonReaderDiscriminator.Read();
                    if (localVarJsonPropertyName?.Equals("type") ?? false)
                    {
                        string? discriminator = utf8JsonReaderDiscriminator.GetString();
                        if (discriminator?.Equals("chrome") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderChrome = utf8JsonReader;
                            chrome = JsonSerializer.Deserialize<Chrome>(ref utf8JsonReaderChrome, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("edge") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderEdge = utf8JsonReader;
                            edge = JsonSerializer.Deserialize<Edge>(ref utf8JsonReaderEdge, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("firefox") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderFirefox = utf8JsonReader;
                            firefox = JsonSerializer.Deserialize<Firefox>(ref utf8JsonReaderFirefox, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("internet_explorer") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderInternetExplorer = utf8JsonReader;
                            internetExplorer = JsonSerializer.Deserialize<InternetExplorer>(ref utf8JsonReaderInternetExplorer, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("opera") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderOpera = utf8JsonReader;
                            opera = JsonSerializer.Deserialize<Opera>(ref utf8JsonReaderOpera, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("other_browser") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderOtherBrowser = utf8JsonReader;
                            otherBrowser = JsonSerializer.Deserialize<OtherBrowser>(ref utf8JsonReaderOtherBrowser, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("safari") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderSafari = utf8JsonReader;
                            safari = JsonSerializer.Deserialize<Safari>(ref utf8JsonReaderSafari, jsonSerializerOptions);
                        }
                    }
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class Browser.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Browser.");

            if (chrome != null)
                return new Browser(chrome);

            if (edge != null)
                return new Browser(edge);

            if (firefox != null)
                return new Browser(firefox);

            if (internetExplorer != null)
                return new Browser(internetExplorer);

            if (opera != null)
                return new Browser(opera);

            if (otherBrowser != null)
                return new Browser(otherBrowser);

            if (safari != null)
                return new Browser(safari);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="Browser" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="browser"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Browser browser, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (browser.Chrome != null)
            {
                ChromeJsonConverter chromeJsonConverter = (ChromeJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(browser.Chrome.GetType()));
                chromeJsonConverter.WriteProperties(writer, browser.Chrome, jsonSerializerOptions);
            }

            if (browser.Edge != null)
            {
                EdgeJsonConverter edgeJsonConverter = (EdgeJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(browser.Edge.GetType()));
                edgeJsonConverter.WriteProperties(writer, browser.Edge, jsonSerializerOptions);
            }

            if (browser.Firefox != null)
            {
                FirefoxJsonConverter firefoxJsonConverter = (FirefoxJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(browser.Firefox.GetType()));
                firefoxJsonConverter.WriteProperties(writer, browser.Firefox, jsonSerializerOptions);
            }

            if (browser.InternetExplorer != null)
            {
                InternetExplorerJsonConverter internetExplorerJsonConverter = (InternetExplorerJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(browser.InternetExplorer.GetType()));
                internetExplorerJsonConverter.WriteProperties(writer, browser.InternetExplorer, jsonSerializerOptions);
            }

            if (browser.Opera != null)
            {
                OperaJsonConverter operaJsonConverter = (OperaJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(browser.Opera.GetType()));
                operaJsonConverter.WriteProperties(writer, browser.Opera, jsonSerializerOptions);
            }

            if (browser.OtherBrowser != null)
            {
                OtherBrowserJsonConverter otherBrowserJsonConverter = (OtherBrowserJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(browser.OtherBrowser.GetType()));
                otherBrowserJsonConverter.WriteProperties(writer, browser.OtherBrowser, jsonSerializerOptions);
            }

            if (browser.Safari != null)
            {
                SafariJsonConverter safariJsonConverter = (SafariJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(browser.Safari.GetType()));
                safariJsonConverter.WriteProperties(writer, browser.Safari, jsonSerializerOptions);
            }

            WriteProperties(writer, browser, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Browser" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="browser"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Browser browser, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
