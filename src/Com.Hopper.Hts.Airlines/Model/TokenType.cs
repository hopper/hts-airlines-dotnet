// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// Defines token_type
    /// </summary>
    public enum TokenType
    {
        /// <summary>
        /// Enum Bearer for value: Bearer
        /// </summary>
        Bearer = 1
    }

    /// <summary>
    /// Converts <see cref="TokenType"/> to and from the JSON value
    /// </summary>
    public static class TokenTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="TokenType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TokenType FromString(string value)
        {
            if (value.Equals("Bearer"))
                return TokenType.Bearer;

            throw new NotImplementedException($"Could not convert value to type TokenType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="TokenType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TokenType? FromStringOrDefault(string value)
        {
            if (value.Equals("Bearer"))
                return TokenType.Bearer;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TokenType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(TokenType value)
        {
            if (value == TokenType.Bearer)
                return "Bearer";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TokenType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class TokenTypeJsonConverter : JsonConverter<TokenType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override TokenType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            TokenType? result = rawValue == null
                ? null
                : TokenTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the TokenType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tokenType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, TokenType tokenType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(tokenType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TokenType"/>
    /// </summary>
    public class TokenTypeNullableJsonConverter : JsonConverter<TokenType?>
    {
        /// <summary>
        /// Returns a TokenType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override TokenType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            TokenType? result = rawValue == null
                ? null
                : TokenTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tokenType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, TokenType? tokenType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(tokenType?.ToString() ?? "null");
        }
    }
}
