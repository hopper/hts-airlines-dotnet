/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Com.Hopper.Hts.Airlines.Client.OpenAPIDateConverter;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// A successful CFAR offer customer response
    /// </summary>
    [DataContract(Name = "cfar_offer_light")]
    public partial class CfarOfferLight
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CfarOfferLight" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CfarOfferLight() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CfarOfferLight" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for an offer (required).</param>
        /// <param name="premium">Amount per passenger to be paid by user for CFAR (required).</param>
        /// <param name="coveragePercentage">Percentage of the amount to be refunded to customer compared to flight tickets price (required).</param>
        /// <param name="currency">Currency of offer (required).</param>
        /// <param name="termsConditionsUrl">termsConditionsUrl (required).</param>
        public CfarOfferLight(string id = default(string), string premium = default(string), string coveragePercentage = default(string), string currency = default(string), Dictionary<string, string> termsConditionsUrl = default(Dictionary<string, string>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for CfarOfferLight and cannot be null");
            }
            this.Id = id;
            // to ensure "premium" is required (not null)
            if (premium == null)
            {
                throw new ArgumentNullException("premium is a required property for CfarOfferLight and cannot be null");
            }
            this.Premium = premium;
            // to ensure "coveragePercentage" is required (not null)
            if (coveragePercentage == null)
            {
                throw new ArgumentNullException("coveragePercentage is a required property for CfarOfferLight and cannot be null");
            }
            this.CoveragePercentage = coveragePercentage;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for CfarOfferLight and cannot be null");
            }
            this.Currency = currency;
            // to ensure "termsConditionsUrl" is required (not null)
            if (termsConditionsUrl == null)
            {
                throw new ArgumentNullException("termsConditionsUrl is a required property for CfarOfferLight and cannot be null");
            }
            this.TermsConditionsUrl = termsConditionsUrl;
        }

        /// <summary>
        /// Unique identifier for an offer
        /// </summary>
        /// <value>Unique identifier for an offer</value>
        /*
        <example>2e1006b3-aba6-4899-8682-b95bce693c27</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Amount per passenger to be paid by user for CFAR
        /// </summary>
        /// <value>Amount per passenger to be paid by user for CFAR</value>
        /*
        <example>20.80</example>
        */
        [DataMember(Name = "premium", IsRequired = true, EmitDefaultValue = true)]
        public string Premium { get; set; }

        /// <summary>
        /// Percentage of the amount to be refunded to customer compared to flight tickets price
        /// </summary>
        /// <value>Percentage of the amount to be refunded to customer compared to flight tickets price</value>
        /*
        <example>80.00</example>
        */
        [DataMember(Name = "coverage_percentage", IsRequired = true, EmitDefaultValue = true)]
        public string CoveragePercentage { get; set; }

        /// <summary>
        /// Currency of offer
        /// </summary>
        /// <value>Currency of offer</value>
        /*
        <example>CAD</example>
        */
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets TermsConditionsUrl
        /// </summary>
        [DataMember(Name = "terms_conditions_url", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> TermsConditionsUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CfarOfferLight {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Premium: ").Append(Premium).Append("\n");
            sb.Append("  CoveragePercentage: ").Append(CoveragePercentage).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  TermsConditionsUrl: ").Append(TermsConditionsUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
