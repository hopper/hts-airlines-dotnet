// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// An object containing the list of flight segments for a fare slice
    /// </summary>
    public partial class CfarCreateExerciseItinerarySlice
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CfarCreateExerciseItinerarySlice" /> class.
        /// </summary>
        /// <param name="segments">A list of segments which make up the slice</param>
        /// <param name="passengerPricing">List of passengers type, count and pricing for the slice</param>
        /// <param name="totalPrice">The price of the slice for all the passengers</param>
        /// <param name="fareBrand">Name of the fare brand applied to the slice</param>
        /// <param name="fareBasis">Code of the fare basis applied to the slice</param>
        /// <param name="fareRules">The fare rules associated to the slice</param>
        /// <param name="otherFares">Other available fares in the same cabin</param>
        [JsonConstructor]
        public CfarCreateExerciseItinerarySlice(List<CfarCreateExerciseSliceSegment> segments, Option<List<PassengerPricing>?> passengerPricing = default, Option<string?> totalPrice = default, Option<string?> fareBrand = default, Option<string?> fareBasis = default, Option<List<FareRule>?> fareRules = default, Option<List<Fare>?> otherFares = default)
        {
            Segments = segments;
            PassengerPricingOption = passengerPricing;
            TotalPriceOption = totalPrice;
            FareBrandOption = fareBrand;
            FareBasisOption = fareBasis;
            FareRulesOption = fareRules;
            OtherFaresOption = otherFares;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A list of segments which make up the slice
        /// </summary>
        /// <value>A list of segments which make up the slice</value>
        [JsonPropertyName("segments")]
        public List<CfarCreateExerciseSliceSegment> Segments { get; set; }

        /// <summary>
        /// Used to track the state of PassengerPricing
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PassengerPricing>?> PassengerPricingOption { get; private set; }

        /// <summary>
        /// List of passengers type, count and pricing for the slice
        /// </summary>
        /// <value>List of passengers type, count and pricing for the slice</value>
        [JsonPropertyName("passenger_pricing")]
        public List<PassengerPricing>? PassengerPricing { get { return this.PassengerPricingOption; } set { this.PassengerPricingOption = new Option<List<PassengerPricing>?>(value); } }

        /// <summary>
        /// Used to track the state of TotalPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TotalPriceOption { get; private set; }

        /// <summary>
        /// The price of the slice for all the passengers
        /// </summary>
        /// <value>The price of the slice for all the passengers</value>
        /* <example>401.10</example> */
        [JsonPropertyName("total_price")]
        public string? TotalPrice { get { return this.TotalPriceOption; } set { this.TotalPriceOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FareBrand
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FareBrandOption { get; private set; }

        /// <summary>
        /// Name of the fare brand applied to the slice
        /// </summary>
        /// <value>Name of the fare brand applied to the slice</value>
        /* <example>flex</example> */
        [JsonPropertyName("fare_brand")]
        public string? FareBrand { get { return this.FareBrandOption; } set { this.FareBrandOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FareBasis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FareBasisOption { get; private set; }

        /// <summary>
        /// Code of the fare basis applied to the slice
        /// </summary>
        /// <value>Code of the fare basis applied to the slice</value>
        /* <example>YBA123US</example> */
        [JsonPropertyName("fare_basis")]
        public string? FareBasis { get { return this.FareBasisOption; } set { this.FareBasisOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FareRules
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<FareRule>?> FareRulesOption { get; private set; }

        /// <summary>
        /// The fare rules associated to the slice
        /// </summary>
        /// <value>The fare rules associated to the slice</value>
        [JsonPropertyName("fare_rules")]
        public List<FareRule>? FareRules { get { return this.FareRulesOption; } set { this.FareRulesOption = new Option<List<FareRule>?>(value); } }

        /// <summary>
        /// Used to track the state of OtherFares
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Fare>?> OtherFaresOption { get; private set; }

        /// <summary>
        /// Other available fares in the same cabin
        /// </summary>
        /// <value>Other available fares in the same cabin</value>
        [JsonPropertyName("other_fares")]
        public List<Fare>? OtherFares { get { return this.OtherFaresOption; } set { this.OtherFaresOption = new Option<List<Fare>?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CfarCreateExerciseItinerarySlice {\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("  PassengerPricing: ").Append(PassengerPricing).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  FareBrand: ").Append(FareBrand).Append("\n");
            sb.Append("  FareBasis: ").Append(FareBasis).Append("\n");
            sb.Append("  FareRules: ").Append(FareRules).Append("\n");
            sb.Append("  OtherFares: ").Append(OtherFares).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CfarCreateExerciseItinerarySlice" />
    /// </summary>
    public class CfarCreateExerciseItinerarySliceJsonConverter : JsonConverter<CfarCreateExerciseItinerarySlice>
    {
        /// <summary>
        /// Deserializes json to <see cref="CfarCreateExerciseItinerarySlice" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CfarCreateExerciseItinerarySlice Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<CfarCreateExerciseSliceSegment>?> segments = default;
            Option<List<PassengerPricing>?> passengerPricing = default;
            Option<string?> totalPrice = default;
            Option<string?> fareBrand = default;
            Option<string?> fareBasis = default;
            Option<List<FareRule>?> fareRules = default;
            Option<List<Fare>?> otherFares = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "segments":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                segments = new Option<List<CfarCreateExerciseSliceSegment>?>(JsonSerializer.Deserialize<List<CfarCreateExerciseSliceSegment>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "passenger_pricing":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                passengerPricing = new Option<List<PassengerPricing>?>(JsonSerializer.Deserialize<List<PassengerPricing>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "total_price":
                            totalPrice = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fare_brand":
                            fareBrand = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fare_basis":
                            fareBasis = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fare_rules":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fareRules = new Option<List<FareRule>?>(JsonSerializer.Deserialize<List<FareRule>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "other_fares":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                otherFares = new Option<List<Fare>?>(JsonSerializer.Deserialize<List<Fare>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!segments.IsSet)
                throw new ArgumentException("Property is required for class CfarCreateExerciseItinerarySlice.", nameof(segments));

            if (segments.IsSet && segments.Value == null)
                throw new ArgumentNullException(nameof(segments), "Property is not nullable for class CfarCreateExerciseItinerarySlice.");

            if (passengerPricing.IsSet && passengerPricing.Value == null)
                throw new ArgumentNullException(nameof(passengerPricing), "Property is not nullable for class CfarCreateExerciseItinerarySlice.");

            if (totalPrice.IsSet && totalPrice.Value == null)
                throw new ArgumentNullException(nameof(totalPrice), "Property is not nullable for class CfarCreateExerciseItinerarySlice.");

            if (fareBrand.IsSet && fareBrand.Value == null)
                throw new ArgumentNullException(nameof(fareBrand), "Property is not nullable for class CfarCreateExerciseItinerarySlice.");

            if (fareBasis.IsSet && fareBasis.Value == null)
                throw new ArgumentNullException(nameof(fareBasis), "Property is not nullable for class CfarCreateExerciseItinerarySlice.");

            if (fareRules.IsSet && fareRules.Value == null)
                throw new ArgumentNullException(nameof(fareRules), "Property is not nullable for class CfarCreateExerciseItinerarySlice.");

            if (otherFares.IsSet && otherFares.Value == null)
                throw new ArgumentNullException(nameof(otherFares), "Property is not nullable for class CfarCreateExerciseItinerarySlice.");

            return new CfarCreateExerciseItinerarySlice(segments.Value!, passengerPricing, totalPrice, fareBrand, fareBasis, fareRules, otherFares);
        }

        /// <summary>
        /// Serializes a <see cref="CfarCreateExerciseItinerarySlice" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cfarCreateExerciseItinerarySlice"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CfarCreateExerciseItinerarySlice cfarCreateExerciseItinerarySlice, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, cfarCreateExerciseItinerarySlice, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CfarCreateExerciseItinerarySlice" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cfarCreateExerciseItinerarySlice"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CfarCreateExerciseItinerarySlice cfarCreateExerciseItinerarySlice, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cfarCreateExerciseItinerarySlice.Segments == null)
                throw new ArgumentNullException(nameof(cfarCreateExerciseItinerarySlice.Segments), "Property is required for class CfarCreateExerciseItinerarySlice.");

            if (cfarCreateExerciseItinerarySlice.PassengerPricingOption.IsSet && cfarCreateExerciseItinerarySlice.PassengerPricing == null)
                throw new ArgumentNullException(nameof(cfarCreateExerciseItinerarySlice.PassengerPricing), "Property is required for class CfarCreateExerciseItinerarySlice.");

            if (cfarCreateExerciseItinerarySlice.TotalPriceOption.IsSet && cfarCreateExerciseItinerarySlice.TotalPrice == null)
                throw new ArgumentNullException(nameof(cfarCreateExerciseItinerarySlice.TotalPrice), "Property is required for class CfarCreateExerciseItinerarySlice.");

            if (cfarCreateExerciseItinerarySlice.FareBrandOption.IsSet && cfarCreateExerciseItinerarySlice.FareBrand == null)
                throw new ArgumentNullException(nameof(cfarCreateExerciseItinerarySlice.FareBrand), "Property is required for class CfarCreateExerciseItinerarySlice.");

            if (cfarCreateExerciseItinerarySlice.FareBasisOption.IsSet && cfarCreateExerciseItinerarySlice.FareBasis == null)
                throw new ArgumentNullException(nameof(cfarCreateExerciseItinerarySlice.FareBasis), "Property is required for class CfarCreateExerciseItinerarySlice.");

            if (cfarCreateExerciseItinerarySlice.FareRulesOption.IsSet && cfarCreateExerciseItinerarySlice.FareRules == null)
                throw new ArgumentNullException(nameof(cfarCreateExerciseItinerarySlice.FareRules), "Property is required for class CfarCreateExerciseItinerarySlice.");

            if (cfarCreateExerciseItinerarySlice.OtherFaresOption.IsSet && cfarCreateExerciseItinerarySlice.OtherFares == null)
                throw new ArgumentNullException(nameof(cfarCreateExerciseItinerarySlice.OtherFares), "Property is required for class CfarCreateExerciseItinerarySlice.");

            writer.WritePropertyName("segments");
            JsonSerializer.Serialize(writer, cfarCreateExerciseItinerarySlice.Segments, jsonSerializerOptions);
            if (cfarCreateExerciseItinerarySlice.PassengerPricingOption.IsSet)
            {
                writer.WritePropertyName("passenger_pricing");
                JsonSerializer.Serialize(writer, cfarCreateExerciseItinerarySlice.PassengerPricing, jsonSerializerOptions);
            }
            if (cfarCreateExerciseItinerarySlice.TotalPriceOption.IsSet)
                writer.WriteString("total_price", cfarCreateExerciseItinerarySlice.TotalPrice);

            if (cfarCreateExerciseItinerarySlice.FareBrandOption.IsSet)
                writer.WriteString("fare_brand", cfarCreateExerciseItinerarySlice.FareBrand);

            if (cfarCreateExerciseItinerarySlice.FareBasisOption.IsSet)
                writer.WriteString("fare_basis", cfarCreateExerciseItinerarySlice.FareBasis);

            if (cfarCreateExerciseItinerarySlice.FareRulesOption.IsSet)
            {
                writer.WritePropertyName("fare_rules");
                JsonSerializer.Serialize(writer, cfarCreateExerciseItinerarySlice.FareRules, jsonSerializerOptions);
            }
            if (cfarCreateExerciseItinerarySlice.OtherFaresOption.IsSet)
            {
                writer.WritePropertyName("other_fares");
                JsonSerializer.Serialize(writer, cfarCreateExerciseItinerarySlice.OtherFares, jsonSerializerOptions);
            }
        }
    }
}
