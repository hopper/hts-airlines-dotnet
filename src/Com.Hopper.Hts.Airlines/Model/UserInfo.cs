// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// An object containing information related to the airline&#39;s user. Should be included if known, but not if the user is anonymous.
    /// </summary>
    public partial class UserInfo
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInfo" /> class.
        /// </summary>
        /// <param name="airlineUserId">The airline&#39;s unique identifier for a user; can be an arbitrary string</param>
        /// <param name="createdDateTime">A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a user&#39;s account was created</param>
        /// <param name="previousBookings">Number of prior bookings a user has made</param>
        [JsonConstructor]
        public UserInfo(string airlineUserId, Option<DateTime?> createdDateTime = default, Option<int?> previousBookings = default)
        {
            AirlineUserId = airlineUserId;
            CreatedDateTimeOption = createdDateTime;
            PreviousBookingsOption = previousBookings;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The airline&#39;s unique identifier for a user; can be an arbitrary string
        /// </summary>
        /// <value>The airline&#39;s unique identifier for a user; can be an arbitrary string</value>
        /* <example>2bcd6619-ac3e-403b-9982-3e12f2698a53</example> */
        [JsonPropertyName("airline_user_id")]
        public string AirlineUserId { get; set; }

        /// <summary>
        /// Used to track the state of CreatedDateTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedDateTimeOption { get; private set; }

        /// <summary>
        /// A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a user&#39;s account was created
        /// </summary>
        /// <value>A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a user&#39;s account was created</value>
        /* <example>2020-11-02T18:34:30Z</example> */
        [JsonPropertyName("created_date_time")]
        public DateTime? CreatedDateTime { get { return this.CreatedDateTimeOption; } set { this.CreatedDateTimeOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of PreviousBookings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PreviousBookingsOption { get; private set; }

        /// <summary>
        /// Number of prior bookings a user has made
        /// </summary>
        /// <value>Number of prior bookings a user has made</value>
        /* <example>3</example> */
        [JsonPropertyName("previous_bookings")]
        public int? PreviousBookings { get { return this.PreviousBookingsOption; } set { this.PreviousBookingsOption = new Option<int?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserInfo {\n");
            sb.Append("  AirlineUserId: ").Append(AirlineUserId).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  PreviousBookings: ").Append(PreviousBookings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserInfo" />
    /// </summary>
    public class UserInfoJsonConverter : JsonConverter<UserInfo>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTime
        /// </summary>
        public static string CreatedDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="UserInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> airlineUserId = default;
            Option<DateTime?> createdDateTime = default;
            Option<int?> previousBookings = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "airline_user_id":
                            airlineUserId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_date_time":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "previous_bookings":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                previousBookings = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!airlineUserId.IsSet)
                throw new ArgumentException("Property is required for class UserInfo.", nameof(airlineUserId));

            if (airlineUserId.IsSet && airlineUserId.Value == null)
                throw new ArgumentNullException(nameof(airlineUserId), "Property is not nullable for class UserInfo.");

            if (createdDateTime.IsSet && createdDateTime.Value == null)
                throw new ArgumentNullException(nameof(createdDateTime), "Property is not nullable for class UserInfo.");

            if (previousBookings.IsSet && previousBookings.Value == null)
                throw new ArgumentNullException(nameof(previousBookings), "Property is not nullable for class UserInfo.");

            return new UserInfo(airlineUserId.Value!, createdDateTime, previousBookings);
        }

        /// <summary>
        /// Serializes a <see cref="UserInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserInfo userInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserInfo userInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userInfo.AirlineUserId == null)
                throw new ArgumentNullException(nameof(userInfo.AirlineUserId), "Property is required for class UserInfo.");

            writer.WriteString("airline_user_id", userInfo.AirlineUserId);

            if (userInfo.CreatedDateTimeOption.IsSet)
                writer.WriteString("created_date_time", userInfo.CreatedDateTimeOption.Value!.Value.ToString(CreatedDateTimeFormat));

            if (userInfo.PreviousBookingsOption.IsSet)
                writer.WriteNumber("previous_bookings", userInfo.PreviousBookingsOption.Value!.Value);
        }
    }
}
