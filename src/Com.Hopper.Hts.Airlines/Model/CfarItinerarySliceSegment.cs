// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// An object detailing a segment of a fare slice
    /// </summary>
    public partial class CfarItinerarySliceSegment
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CfarItinerarySliceSegment" /> class.
        /// </summary>
        /// <param name="originAirport">IATA airport code of origin</param>
        /// <param name="destinationAirport">IATA airport code of destination</param>
        /// <param name="departureDateTime">The local date and time of departure in ISO Local Date Time format</param>
        /// <param name="arrivalDateTime">The local date and time of arrival in ISO Local Date Time format</param>
        /// <param name="flightNumber">The number of the flight</param>
        /// <param name="validatingCarrierCode">The IATA airline code of the validating carrier for this segment</param>
        /// <param name="fareClass">fareClass</param>
        /// <param name="fareBrand">Name of the fare brand applied to the segment (if applicable)</param>
        [JsonConstructor]
        public CfarItinerarySliceSegment(string originAirport, string destinationAirport, string departureDateTime, string arrivalDateTime, string flightNumber, string validatingCarrierCode, FareClass fareClass, Option<string?> fareBrand = default)
        {
            OriginAirport = originAirport;
            DestinationAirport = destinationAirport;
            DepartureDateTime = departureDateTime;
            ArrivalDateTime = arrivalDateTime;
            FlightNumber = flightNumber;
            ValidatingCarrierCode = validatingCarrierCode;
            FareClass = fareClass;
            FareBrandOption = fareBrand;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets FareClass
        /// </summary>
        [JsonPropertyName("fare_class")]
        public FareClass FareClass { get; set; }

        /// <summary>
        /// IATA airport code of origin
        /// </summary>
        /// <value>IATA airport code of origin</value>
        /* <example>BOS</example> */
        [JsonPropertyName("origin_airport")]
        public string OriginAirport { get; set; }

        /// <summary>
        /// IATA airport code of destination
        /// </summary>
        /// <value>IATA airport code of destination</value>
        /* <example>LGA</example> */
        [JsonPropertyName("destination_airport")]
        public string DestinationAirport { get; set; }

        /// <summary>
        /// The local date and time of departure in ISO Local Date Time format
        /// </summary>
        /// <value>The local date and time of departure in ISO Local Date Time format</value>
        /* <example>2022-04-02T18:34:30</example> */
        [JsonPropertyName("departure_date_time")]
        public string DepartureDateTime { get; set; }

        /// <summary>
        /// The local date and time of arrival in ISO Local Date Time format
        /// </summary>
        /// <value>The local date and time of arrival in ISO Local Date Time format</value>
        /* <example>2022-04-02T19:12:30</example> */
        [JsonPropertyName("arrival_date_time")]
        public string ArrivalDateTime { get; set; }

        /// <summary>
        /// The number of the flight
        /// </summary>
        /// <value>The number of the flight</value>
        /* <example>JB776</example> */
        [JsonPropertyName("flight_number")]
        public string FlightNumber { get; set; }

        /// <summary>
        /// The IATA airline code of the validating carrier for this segment
        /// </summary>
        /// <value>The IATA airline code of the validating carrier for this segment</value>
        /* <example>B6</example> */
        [JsonPropertyName("validating_carrier_code")]
        public string ValidatingCarrierCode { get; set; }

        /// <summary>
        /// Used to track the state of FareBrand
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FareBrandOption { get; private set; }

        /// <summary>
        /// Name of the fare brand applied to the segment (if applicable)
        /// </summary>
        /// <value>Name of the fare brand applied to the segment (if applicable)</value>
        [JsonPropertyName("fare_brand")]
        public string? FareBrand { get { return this.FareBrandOption; } set { this.FareBrandOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CfarItinerarySliceSegment {\n");
            sb.Append("  OriginAirport: ").Append(OriginAirport).Append("\n");
            sb.Append("  DestinationAirport: ").Append(DestinationAirport).Append("\n");
            sb.Append("  DepartureDateTime: ").Append(DepartureDateTime).Append("\n");
            sb.Append("  ArrivalDateTime: ").Append(ArrivalDateTime).Append("\n");
            sb.Append("  FlightNumber: ").Append(FlightNumber).Append("\n");
            sb.Append("  ValidatingCarrierCode: ").Append(ValidatingCarrierCode).Append("\n");
            sb.Append("  FareClass: ").Append(FareClass).Append("\n");
            sb.Append("  FareBrand: ").Append(FareBrand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CfarItinerarySliceSegment" />
    /// </summary>
    public class CfarItinerarySliceSegmentJsonConverter : JsonConverter<CfarItinerarySliceSegment>
    {
        /// <summary>
        /// Deserializes json to <see cref="CfarItinerarySliceSegment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CfarItinerarySliceSegment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> originAirport = default;
            Option<string?> destinationAirport = default;
            Option<string?> departureDateTime = default;
            Option<string?> arrivalDateTime = default;
            Option<string?> flightNumber = default;
            Option<string?> validatingCarrierCode = default;
            Option<FareClass?> fareClass = default;
            Option<string?> fareBrand = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "origin_airport":
                            originAirport = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "destination_airport":
                            destinationAirport = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "departure_date_time":
                            departureDateTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "arrival_date_time":
                            arrivalDateTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "flight_number":
                            flightNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "validating_carrier_code":
                            validatingCarrierCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fare_class":
                            string? fareClassRawValue = utf8JsonReader.GetString();
                            if (fareClassRawValue != null)
                                fareClass = new Option<FareClass?>(FareClassValueConverter.FromStringOrDefault(fareClassRawValue));
                            break;
                        case "fare_brand":
                            fareBrand = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!originAirport.IsSet)
                throw new ArgumentException("Property is required for class CfarItinerarySliceSegment.", nameof(originAirport));

            if (!destinationAirport.IsSet)
                throw new ArgumentException("Property is required for class CfarItinerarySliceSegment.", nameof(destinationAirport));

            if (!departureDateTime.IsSet)
                throw new ArgumentException("Property is required for class CfarItinerarySliceSegment.", nameof(departureDateTime));

            if (!arrivalDateTime.IsSet)
                throw new ArgumentException("Property is required for class CfarItinerarySliceSegment.", nameof(arrivalDateTime));

            if (!flightNumber.IsSet)
                throw new ArgumentException("Property is required for class CfarItinerarySliceSegment.", nameof(flightNumber));

            if (!validatingCarrierCode.IsSet)
                throw new ArgumentException("Property is required for class CfarItinerarySliceSegment.", nameof(validatingCarrierCode));

            if (!fareClass.IsSet)
                throw new ArgumentException("Property is required for class CfarItinerarySliceSegment.", nameof(fareClass));

            if (originAirport.IsSet && originAirport.Value == null)
                throw new ArgumentNullException(nameof(originAirport), "Property is not nullable for class CfarItinerarySliceSegment.");

            if (destinationAirport.IsSet && destinationAirport.Value == null)
                throw new ArgumentNullException(nameof(destinationAirport), "Property is not nullable for class CfarItinerarySliceSegment.");

            if (departureDateTime.IsSet && departureDateTime.Value == null)
                throw new ArgumentNullException(nameof(departureDateTime), "Property is not nullable for class CfarItinerarySliceSegment.");

            if (arrivalDateTime.IsSet && arrivalDateTime.Value == null)
                throw new ArgumentNullException(nameof(arrivalDateTime), "Property is not nullable for class CfarItinerarySliceSegment.");

            if (flightNumber.IsSet && flightNumber.Value == null)
                throw new ArgumentNullException(nameof(flightNumber), "Property is not nullable for class CfarItinerarySliceSegment.");

            if (validatingCarrierCode.IsSet && validatingCarrierCode.Value == null)
                throw new ArgumentNullException(nameof(validatingCarrierCode), "Property is not nullable for class CfarItinerarySliceSegment.");

            if (fareClass.IsSet && fareClass.Value == null)
                throw new ArgumentNullException(nameof(fareClass), "Property is not nullable for class CfarItinerarySliceSegment.");

            if (fareBrand.IsSet && fareBrand.Value == null)
                throw new ArgumentNullException(nameof(fareBrand), "Property is not nullable for class CfarItinerarySliceSegment.");

            return new CfarItinerarySliceSegment(originAirport.Value!, destinationAirport.Value!, departureDateTime.Value!, arrivalDateTime.Value!, flightNumber.Value!, validatingCarrierCode.Value!, fareClass.Value!.Value!, fareBrand);
        }

        /// <summary>
        /// Serializes a <see cref="CfarItinerarySliceSegment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cfarItinerarySliceSegment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CfarItinerarySliceSegment cfarItinerarySliceSegment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, cfarItinerarySliceSegment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CfarItinerarySliceSegment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cfarItinerarySliceSegment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CfarItinerarySliceSegment cfarItinerarySliceSegment, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cfarItinerarySliceSegment.OriginAirport == null)
                throw new ArgumentNullException(nameof(cfarItinerarySliceSegment.OriginAirport), "Property is required for class CfarItinerarySliceSegment.");

            if (cfarItinerarySliceSegment.DestinationAirport == null)
                throw new ArgumentNullException(nameof(cfarItinerarySliceSegment.DestinationAirport), "Property is required for class CfarItinerarySliceSegment.");

            if (cfarItinerarySliceSegment.DepartureDateTime == null)
                throw new ArgumentNullException(nameof(cfarItinerarySliceSegment.DepartureDateTime), "Property is required for class CfarItinerarySliceSegment.");

            if (cfarItinerarySliceSegment.ArrivalDateTime == null)
                throw new ArgumentNullException(nameof(cfarItinerarySliceSegment.ArrivalDateTime), "Property is required for class CfarItinerarySliceSegment.");

            if (cfarItinerarySliceSegment.FlightNumber == null)
                throw new ArgumentNullException(nameof(cfarItinerarySliceSegment.FlightNumber), "Property is required for class CfarItinerarySliceSegment.");

            if (cfarItinerarySliceSegment.ValidatingCarrierCode == null)
                throw new ArgumentNullException(nameof(cfarItinerarySliceSegment.ValidatingCarrierCode), "Property is required for class CfarItinerarySliceSegment.");

            if (cfarItinerarySliceSegment.FareBrandOption.IsSet && cfarItinerarySliceSegment.FareBrand == null)
                throw new ArgumentNullException(nameof(cfarItinerarySliceSegment.FareBrand), "Property is required for class CfarItinerarySliceSegment.");

            writer.WriteString("origin_airport", cfarItinerarySliceSegment.OriginAirport);

            writer.WriteString("destination_airport", cfarItinerarySliceSegment.DestinationAirport);

            writer.WriteString("departure_date_time", cfarItinerarySliceSegment.DepartureDateTime);

            writer.WriteString("arrival_date_time", cfarItinerarySliceSegment.ArrivalDateTime);

            writer.WriteString("flight_number", cfarItinerarySliceSegment.FlightNumber);

            writer.WriteString("validating_carrier_code", cfarItinerarySliceSegment.ValidatingCarrierCode);

            var fareClassRawValue = FareClassValueConverter.ToJsonValue(cfarItinerarySliceSegment.FareClass);
            writer.WriteString("fare_class", fareClassRawValue);

            if (cfarItinerarySliceSegment.FareBrandOption.IsSet)
                writer.WriteString("fare_brand", cfarItinerarySliceSegment.FareBrand);
        }
    }
}
