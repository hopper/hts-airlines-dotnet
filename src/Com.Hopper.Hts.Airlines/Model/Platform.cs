// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// Platform
    /// </summary>
    public partial class Platform
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Platform" /> class.
        /// </summary>
        /// <param name="app"></param>
        public Platform(App app)
        {
            App = app;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Platform" /> class.
        /// </summary>
        /// <param name="web"></param>
        public Platform(Web web)
        {
            Web = web;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets App
        /// </summary>
        public App? App { get; set; }

        /// <summary>
        /// Gets or Sets Web
        /// </summary>
        public Web? Web { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Platform {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Platform" />
    /// </summary>
    public class PlatformJsonConverter : JsonConverter<Platform>
    {
        /// <summary>
        /// Deserializes json to <see cref="Platform" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Platform Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> type = default;

            App? app = null;
            Web? web = null;

            Utf8JsonReader utf8JsonReaderDiscriminator = utf8JsonReader;
            while (utf8JsonReaderDiscriminator.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (utf8JsonReaderDiscriminator.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReaderDiscriminator.GetString();
                    utf8JsonReaderDiscriminator.Read();
                    if (localVarJsonPropertyName?.Equals("type") ?? false)
                    {
                        string? discriminator = utf8JsonReaderDiscriminator.GetString();
                        if (discriminator?.Equals("app") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderApp = utf8JsonReader;
                            app = JsonSerializer.Deserialize<App>(ref utf8JsonReaderApp, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("web") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderWeb = utf8JsonReader;
                            web = JsonSerializer.Deserialize<Web>(ref utf8JsonReaderWeb, jsonSerializerOptions);
                        }
                    }
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class Platform.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Platform.");

            if (app != null)
                return new Platform(app);

            if (web != null)
                return new Platform(web);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="Platform" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="platform"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Platform platform, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (platform.App != null)
            {
                AppJsonConverter appJsonConverter = (AppJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(platform.App.GetType()));
                appJsonConverter.WriteProperties(writer, platform.App, jsonSerializerOptions);
            }

            if (platform.Web != null)
            {
                WebJsonConverter webJsonConverter = (WebJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(platform.Web.GetType()));
                webJsonConverter.WriteProperties(writer, platform.Web, jsonSerializerOptions);
            }

            WriteProperties(writer, platform, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Platform" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="platform"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Platform platform, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
