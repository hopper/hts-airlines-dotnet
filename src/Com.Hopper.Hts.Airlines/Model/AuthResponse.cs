// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// AuthResponse
    /// </summary>
    public partial class AuthResponse
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthResponse" /> class.
        /// </summary>
        /// <param name="accessToken">The authentication token</param>
        /// <param name="scope">Token&#39;s scope</param>
        /// <param name="expiresIn">Token&#39;s expiration (in seconds)</param>
        /// <param name="tokenType">tokenType</param>
        [JsonConstructor]
        public AuthResponse(string accessToken, string scope, int expiresIn, TokenType tokenType)
        {
            AccessToken = accessToken;
            Scope = scope;
            ExpiresIn = expiresIn;
            TokenType = tokenType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets TokenType
        /// </summary>
        [JsonPropertyName("token_type")]
        public TokenType TokenType { get; set; }

        /// <summary>
        /// The authentication token
        /// </summary>
        /// <value>The authentication token</value>
        /* <example>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImtjN2FjWmV4bHBvZk1QY3V6UF9HTyJ9.eyJpc3MiOiJodHRwczovL2hvcHBlci1hcGkuYXV0aDAuY29tLyIsInN1YiI6IlhVdWpRSlRCODFPdkVTODh1VDlPNHhIUzVNUkpZV2tCQGNsaWVudHMiLCJhdWQiOiJodHRwczovL3N0YWdpbmcuYXBpLmhvcHBlci5jb20iLCJpYXQiOjE2NTI5ODQ2ODEsImV4cCI6MTY1MzA3MTA4MSwiYXpwIjoiWFV1alFKVEI4MU92RVM4OHVUOU80eEhTNU1SSllXa0IiLCJzY29wZSI6ImFsbDpwcmljZWZyZWV6ZSBhbGw6Z2VuZXJhbCBhbGw6Y2ZhciIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.VlKuMHJkGpOA-L9oJn-UBEOD7VdzLXQSn2DiTrlROR521uHupkRnI-_tDjYD-sygmNmI0bIb0UEQ2ETOyalFZICge8-qWpxBccM_rfgPemZ6Rs9fZSY8XjZtaM9sQEJ4OqwXQiIU0tQDVMfegj-4wnKglHAKzJ7X7wb05nSCP_g2cXIXL9mapnLT8vf609CZIz2cRuWvww5E9qlJ6mUQxsYBv9xwJoyF3IK8TCWUFFvu2xSendMltvUlCHJHjWpddFDTdkl1ErHq_ta-3e1n2ZjU1HVVux9dwWoZQDYJFprtDYjPS-jVhEljGMASB74zf_xbcWCwoa_HJlxLlhBhoQ</example> */
        [JsonPropertyName("access_token")]
        public string AccessToken { get; set; }

        /// <summary>
        /// Token&#39;s scope
        /// </summary>
        /// <value>Token&#39;s scope</value>
        /* <example>all:general all:cfar</example> */
        [JsonPropertyName("scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Token&#39;s expiration (in seconds)
        /// </summary>
        /// <value>Token&#39;s expiration (in seconds)</value>
        /* <example>86400</example> */
        [JsonPropertyName("expires_in")]
        public int ExpiresIn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthResponse {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AuthResponse" />
    /// </summary>
    public class AuthResponseJsonConverter : JsonConverter<AuthResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="AuthResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AuthResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> accessToken = default;
            Option<string?> scope = default;
            Option<int?> expiresIn = default;
            Option<TokenType?> tokenType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "access_token":
                            accessToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "scope":
                            scope = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expires_in":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expiresIn = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "token_type":
                            string? tokenTypeRawValue = utf8JsonReader.GetString();
                            if (tokenTypeRawValue != null)
                                tokenType = new Option<TokenType?>(TokenTypeValueConverter.FromStringOrDefault(tokenTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!accessToken.IsSet)
                throw new ArgumentException("Property is required for class AuthResponse.", nameof(accessToken));

            if (!scope.IsSet)
                throw new ArgumentException("Property is required for class AuthResponse.", nameof(scope));

            if (!expiresIn.IsSet)
                throw new ArgumentException("Property is required for class AuthResponse.", nameof(expiresIn));

            if (!tokenType.IsSet)
                throw new ArgumentException("Property is required for class AuthResponse.", nameof(tokenType));

            if (accessToken.IsSet && accessToken.Value == null)
                throw new ArgumentNullException(nameof(accessToken), "Property is not nullable for class AuthResponse.");

            if (scope.IsSet && scope.Value == null)
                throw new ArgumentNullException(nameof(scope), "Property is not nullable for class AuthResponse.");

            if (expiresIn.IsSet && expiresIn.Value == null)
                throw new ArgumentNullException(nameof(expiresIn), "Property is not nullable for class AuthResponse.");

            if (tokenType.IsSet && tokenType.Value == null)
                throw new ArgumentNullException(nameof(tokenType), "Property is not nullable for class AuthResponse.");

            return new AuthResponse(accessToken.Value!, scope.Value!, expiresIn.Value!.Value!, tokenType.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="AuthResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AuthResponse authResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, authResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AuthResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AuthResponse authResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (authResponse.AccessToken == null)
                throw new ArgumentNullException(nameof(authResponse.AccessToken), "Property is required for class AuthResponse.");

            if (authResponse.Scope == null)
                throw new ArgumentNullException(nameof(authResponse.Scope), "Property is required for class AuthResponse.");

            writer.WriteString("access_token", authResponse.AccessToken);

            writer.WriteString("scope", authResponse.Scope);

            writer.WriteNumber("expires_in", authResponse.ExpiresIn);

            var tokenTypeRawValue = TokenTypeValueConverter.ToJsonValue(authResponse.TokenType);
            writer.WriteString("token_type", tokenTypeRawValue);
        }
    }
}
