// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// Defines ui_variant
    /// </summary>
    public enum UiVariant
    {
        /// <summary>
        /// Enum A for value: variant_a
        /// </summary>
        A = 1,

        /// <summary>
        /// Enum B for value: variant_b
        /// </summary>
        B = 2,

        /// <summary>
        /// Enum C for value: variant_c
        /// </summary>
        C = 3
    }

    /// <summary>
    /// Converts <see cref="UiVariant"/> to and from the JSON value
    /// </summary>
    public static class UiVariantValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="UiVariant"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UiVariant FromString(string value)
        {
            if (value.Equals("variant_a"))
                return UiVariant.A;

            if (value.Equals("variant_b"))
                return UiVariant.B;

            if (value.Equals("variant_c"))
                return UiVariant.C;

            throw new NotImplementedException($"Could not convert value to type UiVariant: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="UiVariant"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UiVariant? FromStringOrDefault(string value)
        {
            if (value.Equals("variant_a"))
                return UiVariant.A;

            if (value.Equals("variant_b"))
                return UiVariant.B;

            if (value.Equals("variant_c"))
                return UiVariant.C;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="UiVariant"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(UiVariant value)
        {
            if (value == UiVariant.A)
                return "variant_a";

            if (value == UiVariant.B)
                return "variant_b";

            if (value == UiVariant.C)
                return "variant_c";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UiVariant"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class UiVariantJsonConverter : JsonConverter<UiVariant>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UiVariant Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UiVariant? result = rawValue == null
                ? null
                : UiVariantValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the UiVariant to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="uiVariant"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UiVariant uiVariant, JsonSerializerOptions options)
        {
            writer.WriteStringValue(uiVariant.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UiVariant"/>
    /// </summary>
    public class UiVariantNullableJsonConverter : JsonConverter<UiVariant?>
    {
        /// <summary>
        /// Returns a UiVariant from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UiVariant? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UiVariant? result = rawValue == null
                ? null
                : UiVariantValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="uiVariant"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UiVariant? uiVariant, JsonSerializerOptions options)
        {
            writer.WriteStringValue(uiVariant?.ToString() ?? "null");
        }
    }
}
