// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// FormOfPayment
    /// </summary>
    public partial class FormOfPayment
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FormOfPayment" /> class.
        /// </summary>
        /// <param name="cash"></param>
        public FormOfPayment(Cash cash)
        {
            Cash = cash;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FormOfPayment" /> class.
        /// </summary>
        /// <param name="nonCash"></param>
        public FormOfPayment(NonCash nonCash)
        {
            NonCash = nonCash;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FormOfPayment" /> class.
        /// </summary>
        /// <param name="paymentCard"></param>
        public FormOfPayment(PaymentCard paymentCard)
        {
            PaymentCard = paymentCard;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FormOfPayment" /> class.
        /// </summary>
        /// <param name="points"></param>
        public FormOfPayment(Points points)
        {
            Points = points;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Cash
        /// </summary>
        public Cash? Cash { get; set; }

        /// <summary>
        /// Gets or Sets NonCash
        /// </summary>
        public NonCash? NonCash { get; set; }

        /// <summary>
        /// Gets or Sets PaymentCard
        /// </summary>
        public PaymentCard? PaymentCard { get; set; }

        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        public Points? Points { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FormOfPayment {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FormOfPayment" />
    /// </summary>
    public class FormOfPaymentJsonConverter : JsonConverter<FormOfPayment>
    {
        /// <summary>
        /// Deserializes json to <see cref="FormOfPayment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FormOfPayment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> type = default;

            Cash? cash = null;
            NonCash? nonCash = null;
            PaymentCard? paymentCard = null;
            Points? points = null;

            Utf8JsonReader utf8JsonReaderDiscriminator = utf8JsonReader;
            while (utf8JsonReaderDiscriminator.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (utf8JsonReaderDiscriminator.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReaderDiscriminator.GetString();
                    utf8JsonReaderDiscriminator.Read();
                    if (localVarJsonPropertyName?.Equals("type") ?? false)
                    {
                        string? discriminator = utf8JsonReaderDiscriminator.GetString();
                        if (discriminator?.Equals("cash") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderCash = utf8JsonReader;
                            cash = JsonSerializer.Deserialize<Cash>(ref utf8JsonReaderCash, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("non_cash") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderNonCash = utf8JsonReader;
                            nonCash = JsonSerializer.Deserialize<NonCash>(ref utf8JsonReaderNonCash, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("payment_card") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderPaymentCard = utf8JsonReader;
                            paymentCard = JsonSerializer.Deserialize<PaymentCard>(ref utf8JsonReaderPaymentCard, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("points") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderPoints = utf8JsonReader;
                            points = JsonSerializer.Deserialize<Points>(ref utf8JsonReaderPoints, jsonSerializerOptions);
                        }
                    }
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class FormOfPayment.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class FormOfPayment.");

            if (cash != null)
                return new FormOfPayment(cash);

            if (nonCash != null)
                return new FormOfPayment(nonCash);

            if (paymentCard != null)
                return new FormOfPayment(paymentCard);

            if (points != null)
                return new FormOfPayment(points);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="FormOfPayment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="formOfPayment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FormOfPayment formOfPayment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (formOfPayment.Cash != null)
            {
                CashJsonConverter cashJsonConverter = (CashJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(formOfPayment.Cash.GetType()));
                cashJsonConverter.WriteProperties(writer, formOfPayment.Cash, jsonSerializerOptions);
            }

            if (formOfPayment.NonCash != null)
            {
                NonCashJsonConverter nonCashJsonConverter = (NonCashJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(formOfPayment.NonCash.GetType()));
                nonCashJsonConverter.WriteProperties(writer, formOfPayment.NonCash, jsonSerializerOptions);
            }

            if (formOfPayment.PaymentCard != null)
            {
                PaymentCardJsonConverter paymentCardJsonConverter = (PaymentCardJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(formOfPayment.PaymentCard.GetType()));
                paymentCardJsonConverter.WriteProperties(writer, formOfPayment.PaymentCard, jsonSerializerOptions);
            }

            if (formOfPayment.Points != null)
            {
                PointsJsonConverter pointsJsonConverter = (PointsJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(formOfPayment.Points.GetType()));
                pointsJsonConverter.WriteProperties(writer, formOfPayment.Points, jsonSerializerOptions);
            }

            WriteProperties(writer, formOfPayment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FormOfPayment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="formOfPayment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FormOfPayment formOfPayment, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
