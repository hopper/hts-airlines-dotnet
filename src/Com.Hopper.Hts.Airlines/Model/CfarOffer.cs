// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// A successful CFAR offer response
    /// </summary>
    public partial class CfarOffer
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CfarOffer" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for an offer</param>
        /// <param name="premium">Total amount to be paid for CFAR</param>
        /// <param name="coverage">Total amount to be refunded upon CFAR exercise</param>
        /// <param name="coveragePercentage">Percentage of the amount to be refunded to customer compared to flight tickets price</param>
        /// <param name="currency">Currency of offer</param>
        /// <param name="taxesTotal">Part of the premium which are taxes </param>
        /// <param name="requestType">requestType</param>
        /// <param name="contractExpiryDateTime">A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which the CFAR contract will expire once purchased</param>
        /// <param name="createdDateTime">A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a CFAR offer was created</param>
        /// <param name="itinerary">itinerary</param>
        /// <param name="contents">One or more contents describing the offer and its conditions in the available languages</param>
        /// <param name="extAttributes">extAttributes</param>
        /// <param name="coverageExtension">Maximum amount added on top of the coverage to cover ancillaries</param>
        /// <param name="taxes">List of applicable taxes</param>
        /// <param name="termsConditionsUrl">The terms and conditions for this offer</param>
        /// <param name="faqUrl">The faq url for this offer</param>
        /// <param name="merchandisingUrl">The url for rendering offer merchandising</param>
        [JsonConstructor]
        public CfarOffer(string id, string premium, string coverage, string coveragePercentage, string currency, string taxesTotal, RequestType requestType, DateTime contractExpiryDateTime, DateTime createdDateTime, CfarItinerary itinerary, Dictionary<string, CfarContents> contents, Dictionary<string, string> extAttributes, Option<string?> coverageExtension = default, Option<List<CfarTax>?> taxes = default, Option<string?> termsConditionsUrl = default, Option<string?> faqUrl = default, Option<string?> merchandisingUrl = default)
        {
            Id = id;
            Premium = premium;
            Coverage = coverage;
            CoveragePercentage = coveragePercentage;
            Currency = currency;
            TaxesTotal = taxesTotal;
            RequestType = requestType;
            ContractExpiryDateTime = contractExpiryDateTime;
            CreatedDateTime = createdDateTime;
            Itinerary = itinerary;
            Contents = contents;
            ExtAttributes = extAttributes;
            CoverageExtensionOption = coverageExtension;
            TaxesOption = taxes;
            TermsConditionsUrlOption = termsConditionsUrl;
            FaqUrlOption = faqUrl;
            MerchandisingUrlOption = merchandisingUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets RequestType
        /// </summary>
        [JsonPropertyName("request_type")]
        public RequestType RequestType { get; set; }

        /// <summary>
        /// Unique identifier for an offer
        /// </summary>
        /// <value>Unique identifier for an offer</value>
        /* <example>1ec9eed3-4486-6460-9d6c-2fb8469d35db</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Total amount to be paid for CFAR
        /// </summary>
        /// <value>Total amount to be paid for CFAR</value>
        /* <example>40.80</example> */
        [JsonPropertyName("premium")]
        public string Premium { get; set; }

        /// <summary>
        /// Total amount to be refunded upon CFAR exercise
        /// </summary>
        /// <value>Total amount to be refunded upon CFAR exercise</value>
        /* <example>400.00</example> */
        [JsonPropertyName("coverage")]
        public string Coverage { get; set; }

        /// <summary>
        /// Percentage of the amount to be refunded to customer compared to flight tickets price
        /// </summary>
        /// <value>Percentage of the amount to be refunded to customer compared to flight tickets price</value>
        /* <example>80.00</example> */
        [JsonPropertyName("coverage_percentage")]
        public string CoveragePercentage { get; set; }

        /// <summary>
        /// Currency of offer
        /// </summary>
        /// <value>Currency of offer</value>
        /* <example>CAD</example> */
        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Part of the premium which are taxes 
        /// </summary>
        /// <value>Part of the premium which are taxes </value>
        /* <example>3.90</example> */
        [JsonPropertyName("taxes_total")]
        public string TaxesTotal { get; set; }

        /// <summary>
        /// A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which the CFAR contract will expire once purchased
        /// </summary>
        /// <value>A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which the CFAR contract will expire once purchased</value>
        /* <example>2020-12-20T12:15:48Z</example> */
        [JsonPropertyName("contract_expiry_date_time")]
        public DateTime ContractExpiryDateTime { get; set; }

        /// <summary>
        /// A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a CFAR offer was created
        /// </summary>
        /// <value>A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a CFAR offer was created</value>
        /* <example>2020-11-02T18:34:30Z</example> */
        [JsonPropertyName("created_date_time")]
        public DateTime CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Itinerary
        /// </summary>
        [JsonPropertyName("itinerary")]
        public CfarItinerary Itinerary { get; set; }

        /// <summary>
        /// One or more contents describing the offer and its conditions in the available languages
        /// </summary>
        /// <value>One or more contents describing the offer and its conditions in the available languages</value>
        [JsonPropertyName("contents")]
        public Dictionary<string, CfarContents> Contents { get; set; }

        /// <summary>
        /// Gets or Sets ExtAttributes
        /// </summary>
        [JsonPropertyName("ext_attributes")]
        public Dictionary<string, string> ExtAttributes { get; set; }

        /// <summary>
        /// Used to track the state of CoverageExtension
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CoverageExtensionOption { get; private set; }

        /// <summary>
        /// Maximum amount added on top of the coverage to cover ancillaries
        /// </summary>
        /// <value>Maximum amount added on top of the coverage to cover ancillaries</value>
        /* <example>40.00</example> */
        [JsonPropertyName("coverage_extension")]
        public string? CoverageExtension { get { return this.CoverageExtensionOption; } set { this.CoverageExtensionOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Taxes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CfarTax>?> TaxesOption { get; private set; }

        /// <summary>
        /// List of applicable taxes
        /// </summary>
        /// <value>List of applicable taxes</value>
        [JsonPropertyName("taxes")]
        public List<CfarTax>? Taxes { get { return this.TaxesOption; } set { this.TaxesOption = new Option<List<CfarTax>?>(value); } }

        /// <summary>
        /// Used to track the state of TermsConditionsUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TermsConditionsUrlOption { get; private set; }

        /// <summary>
        /// The terms and conditions for this offer
        /// </summary>
        /// <value>The terms and conditions for this offer</value>
        [JsonPropertyName("terms_conditions_url")]
        public string? TermsConditionsUrl { get { return this.TermsConditionsUrlOption; } set { this.TermsConditionsUrlOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FaqUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FaqUrlOption { get; private set; }

        /// <summary>
        /// The faq url for this offer
        /// </summary>
        /// <value>The faq url for this offer</value>
        [JsonPropertyName("faq_url")]
        public string? FaqUrl { get { return this.FaqUrlOption; } set { this.FaqUrlOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of MerchandisingUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MerchandisingUrlOption { get; private set; }

        /// <summary>
        /// The url for rendering offer merchandising
        /// </summary>
        /// <value>The url for rendering offer merchandising</value>
        [JsonPropertyName("merchandising_url")]
        public string? MerchandisingUrl { get { return this.MerchandisingUrlOption; } set { this.MerchandisingUrlOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CfarOffer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Premium: ").Append(Premium).Append("\n");
            sb.Append("  Coverage: ").Append(Coverage).Append("\n");
            sb.Append("  CoveragePercentage: ").Append(CoveragePercentage).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  TaxesTotal: ").Append(TaxesTotal).Append("\n");
            sb.Append("  RequestType: ").Append(RequestType).Append("\n");
            sb.Append("  ContractExpiryDateTime: ").Append(ContractExpiryDateTime).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  Itinerary: ").Append(Itinerary).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  ExtAttributes: ").Append(ExtAttributes).Append("\n");
            sb.Append("  CoverageExtension: ").Append(CoverageExtension).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  TermsConditionsUrl: ").Append(TermsConditionsUrl).Append("\n");
            sb.Append("  FaqUrl: ").Append(FaqUrl).Append("\n");
            sb.Append("  MerchandisingUrl: ").Append(MerchandisingUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CfarOffer" />
    /// </summary>
    public class CfarOfferJsonConverter : JsonConverter<CfarOffer>
    {
        /// <summary>
        /// The format to use to serialize ContractExpiryDateTime
        /// </summary>
        public static string ContractExpiryDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreatedDateTime
        /// </summary>
        public static string CreatedDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CfarOffer" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CfarOffer Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> premium = default;
            Option<string?> coverage = default;
            Option<string?> coveragePercentage = default;
            Option<string?> currency = default;
            Option<string?> taxesTotal = default;
            Option<RequestType?> requestType = default;
            Option<DateTime?> contractExpiryDateTime = default;
            Option<DateTime?> createdDateTime = default;
            Option<CfarItinerary?> itinerary = default;
            Option<Dictionary<string, CfarContents>?> contents = default;
            Option<Dictionary<string, string>?> extAttributes = default;
            Option<string?> coverageExtension = default;
            Option<List<CfarTax>?> taxes = default;
            Option<string?> termsConditionsUrl = default;
            Option<string?> faqUrl = default;
            Option<string?> merchandisingUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "premium":
                            premium = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "coverage":
                            coverage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "coverage_percentage":
                            coveragePercentage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency":
                            currency = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "taxes_total":
                            taxesTotal = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "request_type":
                            string? requestTypeRawValue = utf8JsonReader.GetString();
                            if (requestTypeRawValue != null)
                                requestType = new Option<RequestType?>(RequestTypeValueConverter.FromStringOrDefault(requestTypeRawValue));
                            break;
                        case "contract_expiry_date_time":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contractExpiryDateTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "created_date_time":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "itinerary":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                itinerary = new Option<CfarItinerary?>(JsonSerializer.Deserialize<CfarItinerary>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "contents":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contents = new Option<Dictionary<string, CfarContents>?>(JsonSerializer.Deserialize<Dictionary<string, CfarContents>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ext_attributes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                extAttributes = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "coverage_extension":
                            coverageExtension = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "taxes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                taxes = new Option<List<CfarTax>?>(JsonSerializer.Deserialize<List<CfarTax>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "terms_conditions_url":
                            termsConditionsUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "faq_url":
                            faqUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "merchandising_url":
                            merchandisingUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class CfarOffer.", nameof(id));

            if (!premium.IsSet)
                throw new ArgumentException("Property is required for class CfarOffer.", nameof(premium));

            if (!coverage.IsSet)
                throw new ArgumentException("Property is required for class CfarOffer.", nameof(coverage));

            if (!coveragePercentage.IsSet)
                throw new ArgumentException("Property is required for class CfarOffer.", nameof(coveragePercentage));

            if (!currency.IsSet)
                throw new ArgumentException("Property is required for class CfarOffer.", nameof(currency));

            if (!taxesTotal.IsSet)
                throw new ArgumentException("Property is required for class CfarOffer.", nameof(taxesTotal));

            if (!requestType.IsSet)
                throw new ArgumentException("Property is required for class CfarOffer.", nameof(requestType));

            if (!contractExpiryDateTime.IsSet)
                throw new ArgumentException("Property is required for class CfarOffer.", nameof(contractExpiryDateTime));

            if (!createdDateTime.IsSet)
                throw new ArgumentException("Property is required for class CfarOffer.", nameof(createdDateTime));

            if (!itinerary.IsSet)
                throw new ArgumentException("Property is required for class CfarOffer.", nameof(itinerary));

            if (!contents.IsSet)
                throw new ArgumentException("Property is required for class CfarOffer.", nameof(contents));

            if (!extAttributes.IsSet)
                throw new ArgumentException("Property is required for class CfarOffer.", nameof(extAttributes));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class CfarOffer.");

            if (premium.IsSet && premium.Value == null)
                throw new ArgumentNullException(nameof(premium), "Property is not nullable for class CfarOffer.");

            if (coverage.IsSet && coverage.Value == null)
                throw new ArgumentNullException(nameof(coverage), "Property is not nullable for class CfarOffer.");

            if (coveragePercentage.IsSet && coveragePercentage.Value == null)
                throw new ArgumentNullException(nameof(coveragePercentage), "Property is not nullable for class CfarOffer.");

            if (currency.IsSet && currency.Value == null)
                throw new ArgumentNullException(nameof(currency), "Property is not nullable for class CfarOffer.");

            if (taxesTotal.IsSet && taxesTotal.Value == null)
                throw new ArgumentNullException(nameof(taxesTotal), "Property is not nullable for class CfarOffer.");

            if (requestType.IsSet && requestType.Value == null)
                throw new ArgumentNullException(nameof(requestType), "Property is not nullable for class CfarOffer.");

            if (contractExpiryDateTime.IsSet && contractExpiryDateTime.Value == null)
                throw new ArgumentNullException(nameof(contractExpiryDateTime), "Property is not nullable for class CfarOffer.");

            if (createdDateTime.IsSet && createdDateTime.Value == null)
                throw new ArgumentNullException(nameof(createdDateTime), "Property is not nullable for class CfarOffer.");

            if (itinerary.IsSet && itinerary.Value == null)
                throw new ArgumentNullException(nameof(itinerary), "Property is not nullable for class CfarOffer.");

            if (contents.IsSet && contents.Value == null)
                throw new ArgumentNullException(nameof(contents), "Property is not nullable for class CfarOffer.");

            if (extAttributes.IsSet && extAttributes.Value == null)
                throw new ArgumentNullException(nameof(extAttributes), "Property is not nullable for class CfarOffer.");

            if (coverageExtension.IsSet && coverageExtension.Value == null)
                throw new ArgumentNullException(nameof(coverageExtension), "Property is not nullable for class CfarOffer.");

            if (taxes.IsSet && taxes.Value == null)
                throw new ArgumentNullException(nameof(taxes), "Property is not nullable for class CfarOffer.");

            if (termsConditionsUrl.IsSet && termsConditionsUrl.Value == null)
                throw new ArgumentNullException(nameof(termsConditionsUrl), "Property is not nullable for class CfarOffer.");

            if (faqUrl.IsSet && faqUrl.Value == null)
                throw new ArgumentNullException(nameof(faqUrl), "Property is not nullable for class CfarOffer.");

            if (merchandisingUrl.IsSet && merchandisingUrl.Value == null)
                throw new ArgumentNullException(nameof(merchandisingUrl), "Property is not nullable for class CfarOffer.");

            return new CfarOffer(id.Value!, premium.Value!, coverage.Value!, coveragePercentage.Value!, currency.Value!, taxesTotal.Value!, requestType.Value!.Value!, contractExpiryDateTime.Value!.Value!, createdDateTime.Value!.Value!, itinerary.Value!, contents.Value!, extAttributes.Value!, coverageExtension, taxes, termsConditionsUrl, faqUrl, merchandisingUrl);
        }

        /// <summary>
        /// Serializes a <see cref="CfarOffer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cfarOffer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CfarOffer cfarOffer, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, cfarOffer, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CfarOffer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cfarOffer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CfarOffer cfarOffer, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cfarOffer.Id == null)
                throw new ArgumentNullException(nameof(cfarOffer.Id), "Property is required for class CfarOffer.");

            if (cfarOffer.Premium == null)
                throw new ArgumentNullException(nameof(cfarOffer.Premium), "Property is required for class CfarOffer.");

            if (cfarOffer.Coverage == null)
                throw new ArgumentNullException(nameof(cfarOffer.Coverage), "Property is required for class CfarOffer.");

            if (cfarOffer.CoveragePercentage == null)
                throw new ArgumentNullException(nameof(cfarOffer.CoveragePercentage), "Property is required for class CfarOffer.");

            if (cfarOffer.Currency == null)
                throw new ArgumentNullException(nameof(cfarOffer.Currency), "Property is required for class CfarOffer.");

            if (cfarOffer.TaxesTotal == null)
                throw new ArgumentNullException(nameof(cfarOffer.TaxesTotal), "Property is required for class CfarOffer.");

            if (cfarOffer.Itinerary == null)
                throw new ArgumentNullException(nameof(cfarOffer.Itinerary), "Property is required for class CfarOffer.");

            if (cfarOffer.Contents == null)
                throw new ArgumentNullException(nameof(cfarOffer.Contents), "Property is required for class CfarOffer.");

            if (cfarOffer.ExtAttributes == null)
                throw new ArgumentNullException(nameof(cfarOffer.ExtAttributes), "Property is required for class CfarOffer.");

            if (cfarOffer.CoverageExtensionOption.IsSet && cfarOffer.CoverageExtension == null)
                throw new ArgumentNullException(nameof(cfarOffer.CoverageExtension), "Property is required for class CfarOffer.");

            if (cfarOffer.TaxesOption.IsSet && cfarOffer.Taxes == null)
                throw new ArgumentNullException(nameof(cfarOffer.Taxes), "Property is required for class CfarOffer.");

            if (cfarOffer.TermsConditionsUrlOption.IsSet && cfarOffer.TermsConditionsUrl == null)
                throw new ArgumentNullException(nameof(cfarOffer.TermsConditionsUrl), "Property is required for class CfarOffer.");

            if (cfarOffer.FaqUrlOption.IsSet && cfarOffer.FaqUrl == null)
                throw new ArgumentNullException(nameof(cfarOffer.FaqUrl), "Property is required for class CfarOffer.");

            if (cfarOffer.MerchandisingUrlOption.IsSet && cfarOffer.MerchandisingUrl == null)
                throw new ArgumentNullException(nameof(cfarOffer.MerchandisingUrl), "Property is required for class CfarOffer.");

            writer.WriteString("id", cfarOffer.Id);

            writer.WriteString("premium", cfarOffer.Premium);

            writer.WriteString("coverage", cfarOffer.Coverage);

            writer.WriteString("coverage_percentage", cfarOffer.CoveragePercentage);

            writer.WriteString("currency", cfarOffer.Currency);

            writer.WriteString("taxes_total", cfarOffer.TaxesTotal);

            var requestTypeRawValue = RequestTypeValueConverter.ToJsonValue(cfarOffer.RequestType);
            writer.WriteString("request_type", requestTypeRawValue);

            writer.WriteString("contract_expiry_date_time", cfarOffer.ContractExpiryDateTime.ToString(ContractExpiryDateTimeFormat));

            writer.WriteString("created_date_time", cfarOffer.CreatedDateTime.ToString(CreatedDateTimeFormat));

            writer.WritePropertyName("itinerary");
            JsonSerializer.Serialize(writer, cfarOffer.Itinerary, jsonSerializerOptions);
            writer.WritePropertyName("contents");
            JsonSerializer.Serialize(writer, cfarOffer.Contents, jsonSerializerOptions);
            writer.WritePropertyName("ext_attributes");
            JsonSerializer.Serialize(writer, cfarOffer.ExtAttributes, jsonSerializerOptions);
            if (cfarOffer.CoverageExtensionOption.IsSet)
                writer.WriteString("coverage_extension", cfarOffer.CoverageExtension);

            if (cfarOffer.TaxesOption.IsSet)
            {
                writer.WritePropertyName("taxes");
                JsonSerializer.Serialize(writer, cfarOffer.Taxes, jsonSerializerOptions);
            }
            if (cfarOffer.TermsConditionsUrlOption.IsSet)
                writer.WriteString("terms_conditions_url", cfarOffer.TermsConditionsUrl);

            if (cfarOffer.FaqUrlOption.IsSet)
                writer.WriteString("faq_url", cfarOffer.FaqUrl);

            if (cfarOffer.MerchandisingUrlOption.IsSet)
                writer.WriteString("merchandising_url", cfarOffer.MerchandisingUrl);
        }
    }
}
