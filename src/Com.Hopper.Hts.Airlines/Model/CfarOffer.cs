/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Com.Hopper.Hts.Airlines.Client.OpenAPIDateConverter;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// A successful CFAR offer response
    /// </summary>
    [DataContract(Name = "cfar_offer")]
    public partial class CfarOffer
    {

        /// <summary>
        /// Gets or Sets RequestType
        /// </summary>
        [DataMember(Name = "request_type", IsRequired = true, EmitDefaultValue = true)]
        public RequestType RequestType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CfarOffer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CfarOffer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CfarOffer" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for an offer (required).</param>
        /// <param name="premium">Total amount to be paid for CFAR (required).</param>
        /// <param name="coverage">Total amount to be refunded upon CFAR exercise (required).</param>
        /// <param name="coveragePercentage">Percentage of the amount to be refunded to customer compared to flight tickets price (required).</param>
        /// <param name="coverageExtension">Maximum amount added on top of the coverage to cover ancillaries.</param>
        /// <param name="currency">Currency of offer (required).</param>
        /// <param name="taxesTotal">Part of the premium which are taxes  (required).</param>
        /// <param name="taxes">List of applicable taxes.</param>
        /// <param name="requestType">requestType (required).</param>
        /// <param name="contractExpiryDateTime">A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which the CFAR contract will expire once purchased (required).</param>
        /// <param name="createdDateTime">A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a CFAR offer was created (required).</param>
        /// <param name="itinerary">itinerary (required).</param>
        /// <param name="contents">One or more contents describing the offer and its conditions in the available languages (required).</param>
        /// <param name="extAttributes">extAttributes (required).</param>
        /// <param name="termsConditionsUrl">The terms and conditions for this offer.</param>
        public CfarOffer(string id = default(string), string premium = default(string), string coverage = default(string), string coveragePercentage = default(string), string coverageExtension = default(string), string currency = default(string), string taxesTotal = default(string), List<CfarTax> taxes = default(List<CfarTax>), RequestType requestType = default(RequestType), DateTime contractExpiryDateTime = default(DateTime), DateTime createdDateTime = default(DateTime), CfarItinerary itinerary = default(CfarItinerary), Dictionary<string, CfarContents> contents = default(Dictionary<string, CfarContents>), Dictionary<string, string> extAttributes = default(Dictionary<string, string>), string termsConditionsUrl = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for CfarOffer and cannot be null");
            }
            this.Id = id;
            // to ensure "premium" is required (not null)
            if (premium == null)
            {
                throw new ArgumentNullException("premium is a required property for CfarOffer and cannot be null");
            }
            this.Premium = premium;
            // to ensure "coverage" is required (not null)
            if (coverage == null)
            {
                throw new ArgumentNullException("coverage is a required property for CfarOffer and cannot be null");
            }
            this.Coverage = coverage;
            // to ensure "coveragePercentage" is required (not null)
            if (coveragePercentage == null)
            {
                throw new ArgumentNullException("coveragePercentage is a required property for CfarOffer and cannot be null");
            }
            this.CoveragePercentage = coveragePercentage;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for CfarOffer and cannot be null");
            }
            this.Currency = currency;
            // to ensure "taxesTotal" is required (not null)
            if (taxesTotal == null)
            {
                throw new ArgumentNullException("taxesTotal is a required property for CfarOffer and cannot be null");
            }
            this.TaxesTotal = taxesTotal;
            this.RequestType = requestType;
            this.ContractExpiryDateTime = contractExpiryDateTime;
            this.CreatedDateTime = createdDateTime;
            // to ensure "itinerary" is required (not null)
            if (itinerary == null)
            {
                throw new ArgumentNullException("itinerary is a required property for CfarOffer and cannot be null");
            }
            this.Itinerary = itinerary;
            // to ensure "contents" is required (not null)
            if (contents == null)
            {
                throw new ArgumentNullException("contents is a required property for CfarOffer and cannot be null");
            }
            this.Contents = contents;
            // to ensure "extAttributes" is required (not null)
            if (extAttributes == null)
            {
                throw new ArgumentNullException("extAttributes is a required property for CfarOffer and cannot be null");
            }
            this.ExtAttributes = extAttributes;
            this.CoverageExtension = coverageExtension;
            this.Taxes = taxes;
            this.TermsConditionsUrl = termsConditionsUrl;
        }

        /// <summary>
        /// Unique identifier for an offer
        /// </summary>
        /// <value>Unique identifier for an offer</value>
        /*
        <example>1ec9eed3-4486-6460-9d6c-2fb8469d35db</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Total amount to be paid for CFAR
        /// </summary>
        /// <value>Total amount to be paid for CFAR</value>
        /*
        <example>40.80</example>
        */
        [DataMember(Name = "premium", IsRequired = true, EmitDefaultValue = true)]
        public string Premium { get; set; }

        /// <summary>
        /// Total amount to be refunded upon CFAR exercise
        /// </summary>
        /// <value>Total amount to be refunded upon CFAR exercise</value>
        /*
        <example>400.00</example>
        */
        [DataMember(Name = "coverage", IsRequired = true, EmitDefaultValue = true)]
        public string Coverage { get; set; }

        /// <summary>
        /// Percentage of the amount to be refunded to customer compared to flight tickets price
        /// </summary>
        /// <value>Percentage of the amount to be refunded to customer compared to flight tickets price</value>
        /*
        <example>80.00</example>
        */
        [DataMember(Name = "coverage_percentage", IsRequired = true, EmitDefaultValue = true)]
        public string CoveragePercentage { get; set; }

        /// <summary>
        /// Maximum amount added on top of the coverage to cover ancillaries
        /// </summary>
        /// <value>Maximum amount added on top of the coverage to cover ancillaries</value>
        /*
        <example>40.00</example>
        */
        [DataMember(Name = "coverage_extension", EmitDefaultValue = true)]
        public string CoverageExtension { get; set; }

        /// <summary>
        /// Currency of offer
        /// </summary>
        /// <value>Currency of offer</value>
        /*
        <example>CAD</example>
        */
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Part of the premium which are taxes 
        /// </summary>
        /// <value>Part of the premium which are taxes </value>
        /*
        <example>3.90</example>
        */
        [DataMember(Name = "taxes_total", IsRequired = true, EmitDefaultValue = true)]
        public string TaxesTotal { get; set; }

        /// <summary>
        /// List of applicable taxes
        /// </summary>
        /// <value>List of applicable taxes</value>
        [DataMember(Name = "taxes", EmitDefaultValue = true)]
        public List<CfarTax> Taxes { get; set; }

        /// <summary>
        /// A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which the CFAR contract will expire once purchased
        /// </summary>
        /// <value>A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which the CFAR contract will expire once purchased</value>
        /*
        <example>2020-12-20T12:15:48Z</example>
        */
        [DataMember(Name = "contract_expiry_date_time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime ContractExpiryDateTime { get; set; }

        /// <summary>
        /// A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a CFAR offer was created
        /// </summary>
        /// <value>A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a CFAR offer was created</value>
        /*
        <example>2020-11-02T18:34:30Z</example>
        */
        [DataMember(Name = "created_date_time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Itinerary
        /// </summary>
        [DataMember(Name = "itinerary", IsRequired = true, EmitDefaultValue = true)]
        public CfarItinerary Itinerary { get; set; }

        /// <summary>
        /// One or more contents describing the offer and its conditions in the available languages
        /// </summary>
        /// <value>One or more contents describing the offer and its conditions in the available languages</value>
        [DataMember(Name = "contents", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, CfarContents> Contents { get; set; }

        /// <summary>
        /// Gets or Sets ExtAttributes
        /// </summary>
        [DataMember(Name = "ext_attributes", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> ExtAttributes { get; set; }

        /// <summary>
        /// The terms and conditions for this offer
        /// </summary>
        /// <value>The terms and conditions for this offer</value>
        [DataMember(Name = "terms_conditions_url", EmitDefaultValue = true)]
        public string TermsConditionsUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CfarOffer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Premium: ").Append(Premium).Append("\n");
            sb.Append("  Coverage: ").Append(Coverage).Append("\n");
            sb.Append("  CoveragePercentage: ").Append(CoveragePercentage).Append("\n");
            sb.Append("  CoverageExtension: ").Append(CoverageExtension).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  TaxesTotal: ").Append(TaxesTotal).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  RequestType: ").Append(RequestType).Append("\n");
            sb.Append("  ContractExpiryDateTime: ").Append(ContractExpiryDateTime).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  Itinerary: ").Append(Itinerary).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  ExtAttributes: ").Append(ExtAttributes).Append("\n");
            sb.Append("  TermsConditionsUrl: ").Append(TermsConditionsUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
