// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// Defines passenger_type
    /// </summary>
    public enum PassengerType
    {
        /// <summary>
        /// Enum Adult for value: adult
        /// </summary>
        Adult = 1,

        /// <summary>
        /// Enum Child for value: child
        /// </summary>
        Child = 2,

        /// <summary>
        /// Enum SeatedInfant for value: seated_infant
        /// </summary>
        SeatedInfant = 3,

        /// <summary>
        /// Enum LapInfant for value: lap_infant
        /// </summary>
        LapInfant = 4
    }

    /// <summary>
    /// Converts <see cref="PassengerType"/> to and from the JSON value
    /// </summary>
    public static class PassengerTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PassengerType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PassengerType FromString(string value)
        {
            if (value.Equals("adult"))
                return PassengerType.Adult;

            if (value.Equals("child"))
                return PassengerType.Child;

            if (value.Equals("seated_infant"))
                return PassengerType.SeatedInfant;

            if (value.Equals("lap_infant"))
                return PassengerType.LapInfant;

            throw new NotImplementedException($"Could not convert value to type PassengerType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="PassengerType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PassengerType? FromStringOrDefault(string value)
        {
            if (value.Equals("adult"))
                return PassengerType.Adult;

            if (value.Equals("child"))
                return PassengerType.Child;

            if (value.Equals("seated_infant"))
                return PassengerType.SeatedInfant;

            if (value.Equals("lap_infant"))
                return PassengerType.LapInfant;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PassengerType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(PassengerType value)
        {
            if (value == PassengerType.Adult)
                return "adult";

            if (value == PassengerType.Child)
                return "child";

            if (value == PassengerType.SeatedInfant)
                return "seated_infant";

            if (value == PassengerType.LapInfant)
                return "lap_infant";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PassengerType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PassengerTypeJsonConverter : JsonConverter<PassengerType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PassengerType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PassengerType? result = rawValue == null
                ? null
                : PassengerTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PassengerType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="passengerType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PassengerType passengerType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(passengerType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PassengerType"/>
    /// </summary>
    public class PassengerTypeNullableJsonConverter : JsonConverter<PassengerType?>
    {
        /// <summary>
        /// Returns a PassengerType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PassengerType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PassengerType? result = rawValue == null
                ? null
                : PassengerTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="passengerType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PassengerType? passengerType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(passengerType?.ToString() ?? "null");
        }
    }
}
