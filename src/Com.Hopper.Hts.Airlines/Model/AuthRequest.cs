// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// AuthRequest
    /// </summary>
    public partial class AuthRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthRequest" /> class.
        /// </summary>
        /// <param name="clientId">clientId</param>
        /// <param name="clientSecret">clientSecret</param>
        [JsonConstructor]
        public AuthRequest(string clientId, string clientSecret)
        {
            ClientId = clientId;
            ClientSecret = clientSecret;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [JsonPropertyName("client_id")]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ClientSecret
        /// </summary>
        [JsonPropertyName("client_secret")]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthRequest {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AuthRequest" />
    /// </summary>
    public class AuthRequestJsonConverter : JsonConverter<AuthRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="AuthRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AuthRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> clientId = default;
            Option<string?> clientSecret = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "client_id":
                            clientId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "client_secret":
                            clientSecret = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!clientId.IsSet)
                throw new ArgumentException("Property is required for class AuthRequest.", nameof(clientId));

            if (!clientSecret.IsSet)
                throw new ArgumentException("Property is required for class AuthRequest.", nameof(clientSecret));

            if (clientId.IsSet && clientId.Value == null)
                throw new ArgumentNullException(nameof(clientId), "Property is not nullable for class AuthRequest.");

            if (clientSecret.IsSet && clientSecret.Value == null)
                throw new ArgumentNullException(nameof(clientSecret), "Property is not nullable for class AuthRequest.");

            return new AuthRequest(clientId.Value!, clientSecret.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="AuthRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AuthRequest authRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, authRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AuthRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AuthRequest authRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (authRequest.ClientId == null)
                throw new ArgumentNullException(nameof(authRequest.ClientId), "Property is required for class AuthRequest.");

            if (authRequest.ClientSecret == null)
                throw new ArgumentNullException(nameof(authRequest.ClientSecret), "Property is required for class AuthRequest.");

            writer.WriteString("client_id", authRequest.ClientId);

            writer.WriteString("client_secret", authRequest.ClientSecret);
        }
    }
}
