// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// ModelOperatingSystem
    /// </summary>
    public partial class ModelOperatingSystem
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelOperatingSystem" /> class.
        /// </summary>
        /// <param name="android"></param>
        public ModelOperatingSystem(Android android)
        {
            Android = android;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelOperatingSystem" /> class.
        /// </summary>
        /// <param name="chromeOs"></param>
        public ModelOperatingSystem(ChromeOs chromeOs)
        {
            ChromeOs = chromeOs;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelOperatingSystem" /> class.
        /// </summary>
        /// <param name="iOs"></param>
        public ModelOperatingSystem(IOs iOs)
        {
            IOs = iOs;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelOperatingSystem" /> class.
        /// </summary>
        /// <param name="linux"></param>
        public ModelOperatingSystem(Linux linux)
        {
            Linux = linux;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelOperatingSystem" /> class.
        /// </summary>
        /// <param name="macOs"></param>
        public ModelOperatingSystem(MacOs macOs)
        {
            MacOs = macOs;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelOperatingSystem" /> class.
        /// </summary>
        /// <param name="otherOs"></param>
        public ModelOperatingSystem(OtherOs otherOs)
        {
            OtherOs = otherOs;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelOperatingSystem" /> class.
        /// </summary>
        /// <param name="windows"></param>
        public ModelOperatingSystem(Windows windows)
        {
            Windows = windows;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Android
        /// </summary>
        public Android? Android { get; set; }

        /// <summary>
        /// Gets or Sets ChromeOs
        /// </summary>
        public ChromeOs? ChromeOs { get; set; }

        /// <summary>
        /// Gets or Sets IOs
        /// </summary>
        public IOs? IOs { get; set; }

        /// <summary>
        /// Gets or Sets Linux
        /// </summary>
        public Linux? Linux { get; set; }

        /// <summary>
        /// Gets or Sets MacOs
        /// </summary>
        public MacOs? MacOs { get; set; }

        /// <summary>
        /// Gets or Sets OtherOs
        /// </summary>
        public OtherOs? OtherOs { get; set; }

        /// <summary>
        /// Gets or Sets Windows
        /// </summary>
        public Windows? Windows { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelOperatingSystem {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ModelOperatingSystem" />
    /// </summary>
    public class ModelOperatingSystemJsonConverter : JsonConverter<ModelOperatingSystem>
    {
        /// <summary>
        /// Deserializes json to <see cref="ModelOperatingSystem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ModelOperatingSystem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> type = default;

            Android? android = null;
            ChromeOs? chromeOs = null;
            IOs? iOs = null;
            Linux? linux = null;
            MacOs? macOs = null;
            OtherOs? otherOs = null;
            Windows? windows = null;

            Utf8JsonReader utf8JsonReaderDiscriminator = utf8JsonReader;
            while (utf8JsonReaderDiscriminator.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (utf8JsonReaderDiscriminator.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReaderDiscriminator.GetString();
                    utf8JsonReaderDiscriminator.Read();
                    if (localVarJsonPropertyName?.Equals("type") ?? false)
                    {
                        string? discriminator = utf8JsonReaderDiscriminator.GetString();
                        if (discriminator?.Equals("android") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderAndroid = utf8JsonReader;
                            android = JsonSerializer.Deserialize<Android>(ref utf8JsonReaderAndroid, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("chrome_os") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderChromeOs = utf8JsonReader;
                            chromeOs = JsonSerializer.Deserialize<ChromeOs>(ref utf8JsonReaderChromeOs, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("i_os") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderIOs = utf8JsonReader;
                            iOs = JsonSerializer.Deserialize<IOs>(ref utf8JsonReaderIOs, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("linux") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderLinux = utf8JsonReader;
                            linux = JsonSerializer.Deserialize<Linux>(ref utf8JsonReaderLinux, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("mac_os") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderMacOs = utf8JsonReader;
                            macOs = JsonSerializer.Deserialize<MacOs>(ref utf8JsonReaderMacOs, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("other_os") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderOtherOs = utf8JsonReader;
                            otherOs = JsonSerializer.Deserialize<OtherOs>(ref utf8JsonReaderOtherOs, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("windows") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderWindows = utf8JsonReader;
                            windows = JsonSerializer.Deserialize<Windows>(ref utf8JsonReaderWindows, jsonSerializerOptions);
                        }
                    }
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class ModelOperatingSystem.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ModelOperatingSystem.");

            if (android != null)
                return new ModelOperatingSystem(android);

            if (chromeOs != null)
                return new ModelOperatingSystem(chromeOs);

            if (iOs != null)
                return new ModelOperatingSystem(iOs);

            if (linux != null)
                return new ModelOperatingSystem(linux);

            if (macOs != null)
                return new ModelOperatingSystem(macOs);

            if (otherOs != null)
                return new ModelOperatingSystem(otherOs);

            if (windows != null)
                return new ModelOperatingSystem(windows);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="ModelOperatingSystem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modelOperatingSystem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ModelOperatingSystem modelOperatingSystem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (modelOperatingSystem.Android != null)
            {
                AndroidJsonConverter androidJsonConverter = (AndroidJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(modelOperatingSystem.Android.GetType()));
                androidJsonConverter.WriteProperties(writer, modelOperatingSystem.Android, jsonSerializerOptions);
            }

            if (modelOperatingSystem.ChromeOs != null)
            {
                ChromeOsJsonConverter chromeOsJsonConverter = (ChromeOsJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(modelOperatingSystem.ChromeOs.GetType()));
                chromeOsJsonConverter.WriteProperties(writer, modelOperatingSystem.ChromeOs, jsonSerializerOptions);
            }

            if (modelOperatingSystem.IOs != null)
            {
                IOsJsonConverter iOsJsonConverter = (IOsJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(modelOperatingSystem.IOs.GetType()));
                iOsJsonConverter.WriteProperties(writer, modelOperatingSystem.IOs, jsonSerializerOptions);
            }

            if (modelOperatingSystem.Linux != null)
            {
                LinuxJsonConverter linuxJsonConverter = (LinuxJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(modelOperatingSystem.Linux.GetType()));
                linuxJsonConverter.WriteProperties(writer, modelOperatingSystem.Linux, jsonSerializerOptions);
            }

            if (modelOperatingSystem.MacOs != null)
            {
                MacOsJsonConverter macOsJsonConverter = (MacOsJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(modelOperatingSystem.MacOs.GetType()));
                macOsJsonConverter.WriteProperties(writer, modelOperatingSystem.MacOs, jsonSerializerOptions);
            }

            if (modelOperatingSystem.OtherOs != null)
            {
                OtherOsJsonConverter otherOsJsonConverter = (OtherOsJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(modelOperatingSystem.OtherOs.GetType()));
                otherOsJsonConverter.WriteProperties(writer, modelOperatingSystem.OtherOs, jsonSerializerOptions);
            }

            if (modelOperatingSystem.Windows != null)
            {
                WindowsJsonConverter windowsJsonConverter = (WindowsJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(modelOperatingSystem.Windows.GetType()));
                windowsJsonConverter.WriteProperties(writer, modelOperatingSystem.Windows, jsonSerializerOptions);
            }

            WriteProperties(writer, modelOperatingSystem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ModelOperatingSystem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modelOperatingSystem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ModelOperatingSystem modelOperatingSystem, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
