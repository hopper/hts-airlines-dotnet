// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// Itinerary of the user when the contract exercise was initiated (only active segments should be provided)
    /// </summary>
    public partial class CfarCreateExerciseItinerary
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CfarCreateExerciseItinerary" /> class.
        /// </summary>
        /// <param name="slices">List of slices of the itinerary; 1 (one way),  2 (round trip) or up to 10 (multi-destination) slices are allowed</param>
        /// <param name="passengerPricing">List of passengers type, count and pricing for the itinerary</param>
        /// <param name="currency">Currency of pricing fields</param>
        /// <param name="ancillaries">Ancillaries attached to the itinerary and their prices. Only ancillaries covered by CFAR must be filled</param>
        /// <param name="totalPrice">Total price to be covered by CFAR (including ancillaries if applicable)</param>
        /// <param name="passengers">Details of the passengers</param>
        /// <param name="fareRules">The fare rules associated to the itinerary. If different fare rules apply to different slices in the itinerary, indicate the most restrictive.</param>
        [JsonConstructor]
        public CfarCreateExerciseItinerary(List<CfarCreateExerciseItinerarySlice> slices, Option<List<CfarCreateExercisePassengerPricing>?> passengerPricing = default, Option<string?> currency = default, Option<List<Ancillary>?> ancillaries = default, Option<string?> totalPrice = default, Option<List<CfarPassenger>?> passengers = default, Option<List<FareRule>?> fareRules = default)
        {
            Slices = slices;
            PassengerPricingOption = passengerPricing;
            CurrencyOption = currency;
            AncillariesOption = ancillaries;
            TotalPriceOption = totalPrice;
            PassengersOption = passengers;
            FareRulesOption = fareRules;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// List of slices of the itinerary; 1 (one way),  2 (round trip) or up to 10 (multi-destination) slices are allowed
        /// </summary>
        /// <value>List of slices of the itinerary; 1 (one way),  2 (round trip) or up to 10 (multi-destination) slices are allowed</value>
        [JsonPropertyName("slices")]
        public List<CfarCreateExerciseItinerarySlice> Slices { get; set; }

        /// <summary>
        /// Used to track the state of PassengerPricing
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CfarCreateExercisePassengerPricing>?> PassengerPricingOption { get; private set; }

        /// <summary>
        /// List of passengers type, count and pricing for the itinerary
        /// </summary>
        /// <value>List of passengers type, count and pricing for the itinerary</value>
        [JsonPropertyName("passenger_pricing")]
        public List<CfarCreateExercisePassengerPricing>? PassengerPricing { get { return this.PassengerPricingOption; } set { this.PassengerPricingOption = new Option<List<CfarCreateExercisePassengerPricing>?>(value); } }

        /// <summary>
        /// Used to track the state of Currency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyOption { get; private set; }

        /// <summary>
        /// Currency of pricing fields
        /// </summary>
        /// <value>Currency of pricing fields</value>
        /* <example>CAD</example> */
        [JsonPropertyName("currency")]
        public string? Currency { get { return this.CurrencyOption; } set { this.CurrencyOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Ancillaries
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Ancillary>?> AncillariesOption { get; private set; }

        /// <summary>
        /// Ancillaries attached to the itinerary and their prices. Only ancillaries covered by CFAR must be filled
        /// </summary>
        /// <value>Ancillaries attached to the itinerary and their prices. Only ancillaries covered by CFAR must be filled</value>
        [JsonPropertyName("ancillaries")]
        public List<Ancillary>? Ancillaries { get { return this.AncillariesOption; } set { this.AncillariesOption = new Option<List<Ancillary>?>(value); } }

        /// <summary>
        /// Used to track the state of TotalPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TotalPriceOption { get; private set; }

        /// <summary>
        /// Total price to be covered by CFAR (including ancillaries if applicable)
        /// </summary>
        /// <value>Total price to be covered by CFAR (including ancillaries if applicable)</value>
        /* <example>401.10</example> */
        [JsonPropertyName("total_price")]
        public string? TotalPrice { get { return this.TotalPriceOption; } set { this.TotalPriceOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Passengers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CfarPassenger>?> PassengersOption { get; private set; }

        /// <summary>
        /// Details of the passengers
        /// </summary>
        /// <value>Details of the passengers</value>
        [JsonPropertyName("passengers")]
        public List<CfarPassenger>? Passengers { get { return this.PassengersOption; } set { this.PassengersOption = new Option<List<CfarPassenger>?>(value); } }

        /// <summary>
        /// Used to track the state of FareRules
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<FareRule>?> FareRulesOption { get; private set; }

        /// <summary>
        /// The fare rules associated to the itinerary. If different fare rules apply to different slices in the itinerary, indicate the most restrictive.
        /// </summary>
        /// <value>The fare rules associated to the itinerary. If different fare rules apply to different slices in the itinerary, indicate the most restrictive.</value>
        [JsonPropertyName("fare_rules")]
        public List<FareRule>? FareRules { get { return this.FareRulesOption; } set { this.FareRulesOption = new Option<List<FareRule>?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CfarCreateExerciseItinerary {\n");
            sb.Append("  Slices: ").Append(Slices).Append("\n");
            sb.Append("  PassengerPricing: ").Append(PassengerPricing).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Ancillaries: ").Append(Ancillaries).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  Passengers: ").Append(Passengers).Append("\n");
            sb.Append("  FareRules: ").Append(FareRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CfarCreateExerciseItinerary" />
    /// </summary>
    public class CfarCreateExerciseItineraryJsonConverter : JsonConverter<CfarCreateExerciseItinerary>
    {
        /// <summary>
        /// Deserializes json to <see cref="CfarCreateExerciseItinerary" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CfarCreateExerciseItinerary Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<CfarCreateExerciseItinerarySlice>?> slices = default;
            Option<List<CfarCreateExercisePassengerPricing>?> passengerPricing = default;
            Option<string?> currency = default;
            Option<List<Ancillary>?> ancillaries = default;
            Option<string?> totalPrice = default;
            Option<List<CfarPassenger>?> passengers = default;
            Option<List<FareRule>?> fareRules = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "slices":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                slices = new Option<List<CfarCreateExerciseItinerarySlice>?>(JsonSerializer.Deserialize<List<CfarCreateExerciseItinerarySlice>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "passenger_pricing":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                passengerPricing = new Option<List<CfarCreateExercisePassengerPricing>?>(JsonSerializer.Deserialize<List<CfarCreateExercisePassengerPricing>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "currency":
                            currency = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ancillaries":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ancillaries = new Option<List<Ancillary>?>(JsonSerializer.Deserialize<List<Ancillary>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "total_price":
                            totalPrice = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "passengers":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                passengers = new Option<List<CfarPassenger>?>(JsonSerializer.Deserialize<List<CfarPassenger>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "fare_rules":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fareRules = new Option<List<FareRule>?>(JsonSerializer.Deserialize<List<FareRule>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!slices.IsSet)
                throw new ArgumentException("Property is required for class CfarCreateExerciseItinerary.", nameof(slices));

            if (slices.IsSet && slices.Value == null)
                throw new ArgumentNullException(nameof(slices), "Property is not nullable for class CfarCreateExerciseItinerary.");

            if (passengerPricing.IsSet && passengerPricing.Value == null)
                throw new ArgumentNullException(nameof(passengerPricing), "Property is not nullable for class CfarCreateExerciseItinerary.");

            if (currency.IsSet && currency.Value == null)
                throw new ArgumentNullException(nameof(currency), "Property is not nullable for class CfarCreateExerciseItinerary.");

            if (ancillaries.IsSet && ancillaries.Value == null)
                throw new ArgumentNullException(nameof(ancillaries), "Property is not nullable for class CfarCreateExerciseItinerary.");

            if (totalPrice.IsSet && totalPrice.Value == null)
                throw new ArgumentNullException(nameof(totalPrice), "Property is not nullable for class CfarCreateExerciseItinerary.");

            if (passengers.IsSet && passengers.Value == null)
                throw new ArgumentNullException(nameof(passengers), "Property is not nullable for class CfarCreateExerciseItinerary.");

            if (fareRules.IsSet && fareRules.Value == null)
                throw new ArgumentNullException(nameof(fareRules), "Property is not nullable for class CfarCreateExerciseItinerary.");

            return new CfarCreateExerciseItinerary(slices.Value!, passengerPricing, currency, ancillaries, totalPrice, passengers, fareRules);
        }

        /// <summary>
        /// Serializes a <see cref="CfarCreateExerciseItinerary" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cfarCreateExerciseItinerary"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CfarCreateExerciseItinerary cfarCreateExerciseItinerary, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, cfarCreateExerciseItinerary, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CfarCreateExerciseItinerary" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cfarCreateExerciseItinerary"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CfarCreateExerciseItinerary cfarCreateExerciseItinerary, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cfarCreateExerciseItinerary.Slices == null)
                throw new ArgumentNullException(nameof(cfarCreateExerciseItinerary.Slices), "Property is required for class CfarCreateExerciseItinerary.");

            if (cfarCreateExerciseItinerary.PassengerPricingOption.IsSet && cfarCreateExerciseItinerary.PassengerPricing == null)
                throw new ArgumentNullException(nameof(cfarCreateExerciseItinerary.PassengerPricing), "Property is required for class CfarCreateExerciseItinerary.");

            if (cfarCreateExerciseItinerary.CurrencyOption.IsSet && cfarCreateExerciseItinerary.Currency == null)
                throw new ArgumentNullException(nameof(cfarCreateExerciseItinerary.Currency), "Property is required for class CfarCreateExerciseItinerary.");

            if (cfarCreateExerciseItinerary.AncillariesOption.IsSet && cfarCreateExerciseItinerary.Ancillaries == null)
                throw new ArgumentNullException(nameof(cfarCreateExerciseItinerary.Ancillaries), "Property is required for class CfarCreateExerciseItinerary.");

            if (cfarCreateExerciseItinerary.TotalPriceOption.IsSet && cfarCreateExerciseItinerary.TotalPrice == null)
                throw new ArgumentNullException(nameof(cfarCreateExerciseItinerary.TotalPrice), "Property is required for class CfarCreateExerciseItinerary.");

            if (cfarCreateExerciseItinerary.PassengersOption.IsSet && cfarCreateExerciseItinerary.Passengers == null)
                throw new ArgumentNullException(nameof(cfarCreateExerciseItinerary.Passengers), "Property is required for class CfarCreateExerciseItinerary.");

            if (cfarCreateExerciseItinerary.FareRulesOption.IsSet && cfarCreateExerciseItinerary.FareRules == null)
                throw new ArgumentNullException(nameof(cfarCreateExerciseItinerary.FareRules), "Property is required for class CfarCreateExerciseItinerary.");

            writer.WritePropertyName("slices");
            JsonSerializer.Serialize(writer, cfarCreateExerciseItinerary.Slices, jsonSerializerOptions);
            if (cfarCreateExerciseItinerary.PassengerPricingOption.IsSet)
            {
                writer.WritePropertyName("passenger_pricing");
                JsonSerializer.Serialize(writer, cfarCreateExerciseItinerary.PassengerPricing, jsonSerializerOptions);
            }
            if (cfarCreateExerciseItinerary.CurrencyOption.IsSet)
                writer.WriteString("currency", cfarCreateExerciseItinerary.Currency);

            if (cfarCreateExerciseItinerary.AncillariesOption.IsSet)
            {
                writer.WritePropertyName("ancillaries");
                JsonSerializer.Serialize(writer, cfarCreateExerciseItinerary.Ancillaries, jsonSerializerOptions);
            }
            if (cfarCreateExerciseItinerary.TotalPriceOption.IsSet)
                writer.WriteString("total_price", cfarCreateExerciseItinerary.TotalPrice);

            if (cfarCreateExerciseItinerary.PassengersOption.IsSet)
            {
                writer.WritePropertyName("passengers");
                JsonSerializer.Serialize(writer, cfarCreateExerciseItinerary.Passengers, jsonSerializerOptions);
            }
            if (cfarCreateExerciseItinerary.FareRulesOption.IsSet)
            {
                writer.WritePropertyName("fare_rules");
                JsonSerializer.Serialize(writer, cfarCreateExerciseItinerary.FareRules, jsonSerializerOptions);
            }
        }
    }
}
