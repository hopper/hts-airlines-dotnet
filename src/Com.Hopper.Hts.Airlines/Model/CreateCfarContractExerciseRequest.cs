// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// A create CFAR contract exercise request
    /// </summary>
    public partial class CreateCfarContractExerciseRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCfarContractExerciseRequest" /> class.
        /// </summary>
        /// <param name="itinerary">itinerary</param>
        /// <param name="pnrReference">pnrReference</param>
        /// <param name="extAttributes">extAttributes</param>
        /// <param name="contractId">A unique identifier for a CFAR contract</param>
        /// <param name="emailAddress">Email address of the user</param>
        /// <param name="airlineRefundPenalty">The penalty fee applied by the airline when issuing a refund for the booking</param>
        /// <param name="airlineRefundMethod">airlineRefundMethod</param>
        /// <param name="currency">The currency of the airline&#39;s refund allowance</param>
        /// <param name="session">session</param>
        /// <param name="callbackUrl">URL on which the customer should be redirected after the exercise (if applicable)</param>
        /// <param name="redirectbackUrl">URL on which the customer should be redirected if the exercise is aborted (if applicable)</param>
        /// <param name="firstName">First name of the cardholder</param>
        /// <param name="lastName">Last name of the cardholder</param>
        [JsonConstructor]
        public CreateCfarContractExerciseRequest(CfarCreateExerciseItinerary itinerary, string pnrReference, Dictionary<string, string> extAttributes, Option<string?> contractId = default, Option<string?> emailAddress = default, Option<string?> airlineRefundPenalty = default, Option<AirlineRefundMethod?> airlineRefundMethod = default, Option<string?> currency = default, Option<CreateAirlineCfarSessionRequest?> session = default, Option<string?> callbackUrl = default, Option<string?> redirectbackUrl = default, Option<string?> firstName = default, Option<string?> lastName = default)
        {
            Itinerary = itinerary;
            PnrReference = pnrReference;
            ExtAttributes = extAttributes;
            ContractIdOption = contractId;
            EmailAddressOption = emailAddress;
            AirlineRefundPenaltyOption = airlineRefundPenalty;
            AirlineRefundMethodOption = airlineRefundMethod;
            CurrencyOption = currency;
            SessionOption = session;
            CallbackUrlOption = callbackUrl;
            RedirectbackUrlOption = redirectbackUrl;
            FirstNameOption = firstName;
            LastNameOption = lastName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AirlineRefundMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AirlineRefundMethod?> AirlineRefundMethodOption { get; private set; }

        /// <summary>
        /// Gets or Sets AirlineRefundMethod
        /// </summary>
        [JsonPropertyName("airline_refund_method")]
        public AirlineRefundMethod? AirlineRefundMethod { get { return this.AirlineRefundMethodOption; } set { this.AirlineRefundMethodOption = new Option<AirlineRefundMethod?>(value); } }

        /// <summary>
        /// Gets or Sets Itinerary
        /// </summary>
        [JsonPropertyName("itinerary")]
        public CfarCreateExerciseItinerary Itinerary { get; set; }

        /// <summary>
        /// Gets or Sets PnrReference
        /// </summary>
        /* <example>ABC123</example> */
        [JsonPropertyName("pnr_reference")]
        public string PnrReference { get; set; }

        /// <summary>
        /// Gets or Sets ExtAttributes
        /// </summary>
        [JsonPropertyName("ext_attributes")]
        public Dictionary<string, string> ExtAttributes { get; set; }

        /// <summary>
        /// Used to track the state of ContractId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContractIdOption { get; private set; }

        /// <summary>
        /// A unique identifier for a CFAR contract
        /// </summary>
        /// <value>A unique identifier for a CFAR contract</value>
        /* <example>1ec9ef29-be31-6ed3-beec-9f5ae0d164ee</example> */
        [JsonPropertyName("contract_id")]
        public string? ContractId { get { return this.ContractIdOption; } set { this.ContractIdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of EmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailAddressOption { get; private set; }

        /// <summary>
        /// Email address of the user
        /// </summary>
        /// <value>Email address of the user</value>
        /* <example>john@doe.com</example> */
        [JsonPropertyName("email_address")]
        public string? EmailAddress { get { return this.EmailAddressOption; } set { this.EmailAddressOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of AirlineRefundPenalty
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AirlineRefundPenaltyOption { get; private set; }

        /// <summary>
        /// The penalty fee applied by the airline when issuing a refund for the booking
        /// </summary>
        /// <value>The penalty fee applied by the airline when issuing a refund for the booking</value>
        /* <example>99.0</example> */
        [JsonPropertyName("airline_refund_penalty")]
        public string? AirlineRefundPenalty { get { return this.AirlineRefundPenaltyOption; } set { this.AirlineRefundPenaltyOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Currency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyOption { get; private set; }

        /// <summary>
        /// The currency of the airline&#39;s refund allowance
        /// </summary>
        /// <value>The currency of the airline&#39;s refund allowance</value>
        /* <example>CAD</example> */
        [JsonPropertyName("currency")]
        public string? Currency { get { return this.CurrencyOption; } set { this.CurrencyOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Session
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateAirlineCfarSessionRequest?> SessionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Session
        /// </summary>
        [JsonPropertyName("session")]
        public CreateAirlineCfarSessionRequest? Session { get { return this.SessionOption; } set { this.SessionOption = new Option<CreateAirlineCfarSessionRequest?>(value); } }

        /// <summary>
        /// Used to track the state of CallbackUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CallbackUrlOption { get; private set; }

        /// <summary>
        /// URL on which the customer should be redirected after the exercise (if applicable)
        /// </summary>
        /// <value>URL on which the customer should be redirected after the exercise (if applicable)</value>
        /* <example>https://hts.hopper.com/</example> */
        [JsonPropertyName("callback_url")]
        public string? CallbackUrl { get { return this.CallbackUrlOption; } set { this.CallbackUrlOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of RedirectbackUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RedirectbackUrlOption { get; private set; }

        /// <summary>
        /// URL on which the customer should be redirected if the exercise is aborted (if applicable)
        /// </summary>
        /// <value>URL on which the customer should be redirected if the exercise is aborted (if applicable)</value>
        /* <example>https://hts.hopper.com/</example> */
        [JsonPropertyName("redirectback_url")]
        public string? RedirectbackUrl { get { return this.RedirectbackUrlOption; } set { this.RedirectbackUrlOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirstNameOption { get; private set; }

        /// <summary>
        /// First name of the cardholder
        /// </summary>
        /// <value>First name of the cardholder</value>
        /* <example>John</example> */
        [JsonPropertyName("first_name")]
        public string? FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastNameOption { get; private set; }

        /// <summary>
        /// Last name of the cardholder
        /// </summary>
        /// <value>Last name of the cardholder</value>
        /* <example>Smith</example> */
        [JsonPropertyName("last_name")]
        public string? LastName { get { return this.LastNameOption; } set { this.LastNameOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCfarContractExerciseRequest {\n");
            sb.Append("  Itinerary: ").Append(Itinerary).Append("\n");
            sb.Append("  PnrReference: ").Append(PnrReference).Append("\n");
            sb.Append("  ExtAttributes: ").Append(ExtAttributes).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  AirlineRefundPenalty: ").Append(AirlineRefundPenalty).Append("\n");
            sb.Append("  AirlineRefundMethod: ").Append(AirlineRefundMethod).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Session: ").Append(Session).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  RedirectbackUrl: ").Append(RedirectbackUrl).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateCfarContractExerciseRequest" />
    /// </summary>
    public class CreateCfarContractExerciseRequestJsonConverter : JsonConverter<CreateCfarContractExerciseRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateCfarContractExerciseRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateCfarContractExerciseRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CfarCreateExerciseItinerary?> itinerary = default;
            Option<string?> pnrReference = default;
            Option<Dictionary<string, string>?> extAttributes = default;
            Option<string?> contractId = default;
            Option<string?> emailAddress = default;
            Option<string?> airlineRefundPenalty = default;
            Option<AirlineRefundMethod?> airlineRefundMethod = default;
            Option<string?> currency = default;
            Option<CreateAirlineCfarSessionRequest?> session = default;
            Option<string?> callbackUrl = default;
            Option<string?> redirectbackUrl = default;
            Option<string?> firstName = default;
            Option<string?> lastName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "itinerary":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                itinerary = new Option<CfarCreateExerciseItinerary?>(JsonSerializer.Deserialize<CfarCreateExerciseItinerary>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pnr_reference":
                            pnrReference = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ext_attributes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                extAttributes = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "contract_id":
                            contractId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email_address":
                            emailAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "airline_refund_penalty":
                            airlineRefundPenalty = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "airline_refund_method":
                            string? airlineRefundMethodRawValue = utf8JsonReader.GetString();
                            if (airlineRefundMethodRawValue != null)
                                airlineRefundMethod = new Option<AirlineRefundMethod?>(AirlineRefundMethodValueConverter.FromStringOrDefault(airlineRefundMethodRawValue));
                            break;
                        case "currency":
                            currency = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "session":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                session = new Option<CreateAirlineCfarSessionRequest?>(JsonSerializer.Deserialize<CreateAirlineCfarSessionRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "callback_url":
                            callbackUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "redirectback_url":
                            redirectbackUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "first_name":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_name":
                            lastName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!itinerary.IsSet)
                throw new ArgumentException("Property is required for class CreateCfarContractExerciseRequest.", nameof(itinerary));

            if (!pnrReference.IsSet)
                throw new ArgumentException("Property is required for class CreateCfarContractExerciseRequest.", nameof(pnrReference));

            if (!extAttributes.IsSet)
                throw new ArgumentException("Property is required for class CreateCfarContractExerciseRequest.", nameof(extAttributes));

            if (itinerary.IsSet && itinerary.Value == null)
                throw new ArgumentNullException(nameof(itinerary), "Property is not nullable for class CreateCfarContractExerciseRequest.");

            if (pnrReference.IsSet && pnrReference.Value == null)
                throw new ArgumentNullException(nameof(pnrReference), "Property is not nullable for class CreateCfarContractExerciseRequest.");

            if (extAttributes.IsSet && extAttributes.Value == null)
                throw new ArgumentNullException(nameof(extAttributes), "Property is not nullable for class CreateCfarContractExerciseRequest.");

            if (contractId.IsSet && contractId.Value == null)
                throw new ArgumentNullException(nameof(contractId), "Property is not nullable for class CreateCfarContractExerciseRequest.");

            if (emailAddress.IsSet && emailAddress.Value == null)
                throw new ArgumentNullException(nameof(emailAddress), "Property is not nullable for class CreateCfarContractExerciseRequest.");

            if (airlineRefundPenalty.IsSet && airlineRefundPenalty.Value == null)
                throw new ArgumentNullException(nameof(airlineRefundPenalty), "Property is not nullable for class CreateCfarContractExerciseRequest.");

            if (airlineRefundMethod.IsSet && airlineRefundMethod.Value == null)
                throw new ArgumentNullException(nameof(airlineRefundMethod), "Property is not nullable for class CreateCfarContractExerciseRequest.");

            if (currency.IsSet && currency.Value == null)
                throw new ArgumentNullException(nameof(currency), "Property is not nullable for class CreateCfarContractExerciseRequest.");

            if (session.IsSet && session.Value == null)
                throw new ArgumentNullException(nameof(session), "Property is not nullable for class CreateCfarContractExerciseRequest.");

            if (callbackUrl.IsSet && callbackUrl.Value == null)
                throw new ArgumentNullException(nameof(callbackUrl), "Property is not nullable for class CreateCfarContractExerciseRequest.");

            if (redirectbackUrl.IsSet && redirectbackUrl.Value == null)
                throw new ArgumentNullException(nameof(redirectbackUrl), "Property is not nullable for class CreateCfarContractExerciseRequest.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class CreateCfarContractExerciseRequest.");

            if (lastName.IsSet && lastName.Value == null)
                throw new ArgumentNullException(nameof(lastName), "Property is not nullable for class CreateCfarContractExerciseRequest.");

            return new CreateCfarContractExerciseRequest(itinerary.Value!, pnrReference.Value!, extAttributes.Value!, contractId, emailAddress, airlineRefundPenalty, airlineRefundMethod, currency, session, callbackUrl, redirectbackUrl, firstName, lastName);
        }

        /// <summary>
        /// Serializes a <see cref="CreateCfarContractExerciseRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateCfarContractExerciseRequest createCfarContractExerciseRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createCfarContractExerciseRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateCfarContractExerciseRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createCfarContractExerciseRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateCfarContractExerciseRequest createCfarContractExerciseRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createCfarContractExerciseRequest.Itinerary == null)
                throw new ArgumentNullException(nameof(createCfarContractExerciseRequest.Itinerary), "Property is required for class CreateCfarContractExerciseRequest.");

            if (createCfarContractExerciseRequest.PnrReference == null)
                throw new ArgumentNullException(nameof(createCfarContractExerciseRequest.PnrReference), "Property is required for class CreateCfarContractExerciseRequest.");

            if (createCfarContractExerciseRequest.ExtAttributes == null)
                throw new ArgumentNullException(nameof(createCfarContractExerciseRequest.ExtAttributes), "Property is required for class CreateCfarContractExerciseRequest.");

            if (createCfarContractExerciseRequest.ContractIdOption.IsSet && createCfarContractExerciseRequest.ContractId == null)
                throw new ArgumentNullException(nameof(createCfarContractExerciseRequest.ContractId), "Property is required for class CreateCfarContractExerciseRequest.");

            if (createCfarContractExerciseRequest.EmailAddressOption.IsSet && createCfarContractExerciseRequest.EmailAddress == null)
                throw new ArgumentNullException(nameof(createCfarContractExerciseRequest.EmailAddress), "Property is required for class CreateCfarContractExerciseRequest.");

            if (createCfarContractExerciseRequest.AirlineRefundPenaltyOption.IsSet && createCfarContractExerciseRequest.AirlineRefundPenalty == null)
                throw new ArgumentNullException(nameof(createCfarContractExerciseRequest.AirlineRefundPenalty), "Property is required for class CreateCfarContractExerciseRequest.");

            if (createCfarContractExerciseRequest.CurrencyOption.IsSet && createCfarContractExerciseRequest.Currency == null)
                throw new ArgumentNullException(nameof(createCfarContractExerciseRequest.Currency), "Property is required for class CreateCfarContractExerciseRequest.");

            if (createCfarContractExerciseRequest.SessionOption.IsSet && createCfarContractExerciseRequest.Session == null)
                throw new ArgumentNullException(nameof(createCfarContractExerciseRequest.Session), "Property is required for class CreateCfarContractExerciseRequest.");

            if (createCfarContractExerciseRequest.CallbackUrlOption.IsSet && createCfarContractExerciseRequest.CallbackUrl == null)
                throw new ArgumentNullException(nameof(createCfarContractExerciseRequest.CallbackUrl), "Property is required for class CreateCfarContractExerciseRequest.");

            if (createCfarContractExerciseRequest.RedirectbackUrlOption.IsSet && createCfarContractExerciseRequest.RedirectbackUrl == null)
                throw new ArgumentNullException(nameof(createCfarContractExerciseRequest.RedirectbackUrl), "Property is required for class CreateCfarContractExerciseRequest.");

            if (createCfarContractExerciseRequest.FirstNameOption.IsSet && createCfarContractExerciseRequest.FirstName == null)
                throw new ArgumentNullException(nameof(createCfarContractExerciseRequest.FirstName), "Property is required for class CreateCfarContractExerciseRequest.");

            if (createCfarContractExerciseRequest.LastNameOption.IsSet && createCfarContractExerciseRequest.LastName == null)
                throw new ArgumentNullException(nameof(createCfarContractExerciseRequest.LastName), "Property is required for class CreateCfarContractExerciseRequest.");

            writer.WritePropertyName("itinerary");
            JsonSerializer.Serialize(writer, createCfarContractExerciseRequest.Itinerary, jsonSerializerOptions);
            writer.WriteString("pnr_reference", createCfarContractExerciseRequest.PnrReference);

            writer.WritePropertyName("ext_attributes");
            JsonSerializer.Serialize(writer, createCfarContractExerciseRequest.ExtAttributes, jsonSerializerOptions);
            if (createCfarContractExerciseRequest.ContractIdOption.IsSet)
                writer.WriteString("contract_id", createCfarContractExerciseRequest.ContractId);

            if (createCfarContractExerciseRequest.EmailAddressOption.IsSet)
                writer.WriteString("email_address", createCfarContractExerciseRequest.EmailAddress);

            if (createCfarContractExerciseRequest.AirlineRefundPenaltyOption.IsSet)
                writer.WriteString("airline_refund_penalty", createCfarContractExerciseRequest.AirlineRefundPenalty);

            if (createCfarContractExerciseRequest.AirlineRefundMethodOption.IsSet)
            {
                var airlineRefundMethodRawValue = AirlineRefundMethodValueConverter.ToJsonValue(createCfarContractExerciseRequest.AirlineRefundMethod!.Value);
                writer.WriteString("airline_refund_method", airlineRefundMethodRawValue);
            }
            if (createCfarContractExerciseRequest.CurrencyOption.IsSet)
                writer.WriteString("currency", createCfarContractExerciseRequest.Currency);

            if (createCfarContractExerciseRequest.SessionOption.IsSet)
            {
                writer.WritePropertyName("session");
                JsonSerializer.Serialize(writer, createCfarContractExerciseRequest.Session, jsonSerializerOptions);
            }
            if (createCfarContractExerciseRequest.CallbackUrlOption.IsSet)
                writer.WriteString("callback_url", createCfarContractExerciseRequest.CallbackUrl);

            if (createCfarContractExerciseRequest.RedirectbackUrlOption.IsSet)
                writer.WriteString("redirectback_url", createCfarContractExerciseRequest.RedirectbackUrl);

            if (createCfarContractExerciseRequest.FirstNameOption.IsSet)
                writer.WriteString("first_name", createCfarContractExerciseRequest.FirstName);

            if (createCfarContractExerciseRequest.LastNameOption.IsSet)
                writer.WriteString("last_name", createCfarContractExerciseRequest.LastName);
        }
    }
}
