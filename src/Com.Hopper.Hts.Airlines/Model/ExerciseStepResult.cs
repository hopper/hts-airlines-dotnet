// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// Defines exercise_step_result
    /// </summary>
    public enum ExerciseStepResult
    {
        /// <summary>
        /// Enum Success for value: success
        /// </summary>
        Success = 1,

        /// <summary>
        /// Enum Failure for value: failure
        /// </summary>
        Failure = 2,

        /// <summary>
        /// Enum TechnicalError for value: technical_error
        /// </summary>
        TechnicalError = 3
    }

    /// <summary>
    /// Converts <see cref="ExerciseStepResult"/> to and from the JSON value
    /// </summary>
    public static class ExerciseStepResultValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ExerciseStepResult"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ExerciseStepResult FromString(string value)
        {
            if (value.Equals("success"))
                return ExerciseStepResult.Success;

            if (value.Equals("failure"))
                return ExerciseStepResult.Failure;

            if (value.Equals("technical_error"))
                return ExerciseStepResult.TechnicalError;

            throw new NotImplementedException($"Could not convert value to type ExerciseStepResult: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ExerciseStepResult"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ExerciseStepResult? FromStringOrDefault(string value)
        {
            if (value.Equals("success"))
                return ExerciseStepResult.Success;

            if (value.Equals("failure"))
                return ExerciseStepResult.Failure;

            if (value.Equals("technical_error"))
                return ExerciseStepResult.TechnicalError;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ExerciseStepResult"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ExerciseStepResult value)
        {
            if (value == ExerciseStepResult.Success)
                return "success";

            if (value == ExerciseStepResult.Failure)
                return "failure";

            if (value == ExerciseStepResult.TechnicalError)
                return "technical_error";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExerciseStepResult"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ExerciseStepResultJsonConverter : JsonConverter<ExerciseStepResult>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ExerciseStepResult Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ExerciseStepResult? result = rawValue == null
                ? null
                : ExerciseStepResultValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ExerciseStepResult to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="exerciseStepResult"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ExerciseStepResult exerciseStepResult, JsonSerializerOptions options)
        {
            writer.WriteStringValue(exerciseStepResult.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExerciseStepResult"/>
    /// </summary>
    public class ExerciseStepResultNullableJsonConverter : JsonConverter<ExerciseStepResult?>
    {
        /// <summary>
        /// Returns a ExerciseStepResult from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ExerciseStepResult? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ExerciseStepResult? result = rawValue == null
                ? null
                : ExerciseStepResultValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="exerciseStepResult"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ExerciseStepResult? exerciseStepResult, JsonSerializerOptions options)
        {
            writer.WriteStringValue(exerciseStepResult?.ToString() ?? "null");
        }
    }
}
