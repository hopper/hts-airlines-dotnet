// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// An object containing the list of flight segments for a fare slice
    /// </summary>
    public partial class DgItinerarySlice
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DgItinerarySlice" /> class.
        /// </summary>
        /// <param name="segments">A list of segments which make up the slice</param>
        /// <param name="fareBrand">Name of the fare brand on the slice</param>
        /// <param name="passengerPricing">List of passengers type, count and pricing for the current slice</param>
        [JsonConstructor]
        public DgItinerarySlice(List<DgItinerarySliceSegment> segments, Option<string?> fareBrand = default, Option<List<DgPassengerPricing>?> passengerPricing = default)
        {
            Segments = segments;
            FareBrandOption = fareBrand;
            PassengerPricingOption = passengerPricing;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A list of segments which make up the slice
        /// </summary>
        /// <value>A list of segments which make up the slice</value>
        [JsonPropertyName("segments")]
        public List<DgItinerarySliceSegment> Segments { get; set; }

        /// <summary>
        /// Used to track the state of FareBrand
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FareBrandOption { get; private set; }

        /// <summary>
        /// Name of the fare brand on the slice
        /// </summary>
        /// <value>Name of the fare brand on the slice</value>
        /* <example>flex</example> */
        [JsonPropertyName("fare_brand")]
        public string? FareBrand { get { return this.FareBrandOption; } set { this.FareBrandOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of PassengerPricing
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DgPassengerPricing>?> PassengerPricingOption { get; private set; }

        /// <summary>
        /// List of passengers type, count and pricing for the current slice
        /// </summary>
        /// <value>List of passengers type, count and pricing for the current slice</value>
        [JsonPropertyName("passenger_pricing")]
        public List<DgPassengerPricing>? PassengerPricing { get { return this.PassengerPricingOption; } set { this.PassengerPricingOption = new Option<List<DgPassengerPricing>?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DgItinerarySlice {\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("  FareBrand: ").Append(FareBrand).Append("\n");
            sb.Append("  PassengerPricing: ").Append(PassengerPricing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DgItinerarySlice" />
    /// </summary>
    public class DgItinerarySliceJsonConverter : JsonConverter<DgItinerarySlice>
    {
        /// <summary>
        /// Deserializes json to <see cref="DgItinerarySlice" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DgItinerarySlice Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<DgItinerarySliceSegment>?> segments = default;
            Option<string?> fareBrand = default;
            Option<List<DgPassengerPricing>?> passengerPricing = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "segments":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                segments = new Option<List<DgItinerarySliceSegment>?>(JsonSerializer.Deserialize<List<DgItinerarySliceSegment>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "fare_brand":
                            fareBrand = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "passenger_pricing":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                passengerPricing = new Option<List<DgPassengerPricing>?>(JsonSerializer.Deserialize<List<DgPassengerPricing>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!segments.IsSet)
                throw new ArgumentException("Property is required for class DgItinerarySlice.", nameof(segments));

            if (segments.IsSet && segments.Value == null)
                throw new ArgumentNullException(nameof(segments), "Property is not nullable for class DgItinerarySlice.");

            if (fareBrand.IsSet && fareBrand.Value == null)
                throw new ArgumentNullException(nameof(fareBrand), "Property is not nullable for class DgItinerarySlice.");

            if (passengerPricing.IsSet && passengerPricing.Value == null)
                throw new ArgumentNullException(nameof(passengerPricing), "Property is not nullable for class DgItinerarySlice.");

            return new DgItinerarySlice(segments.Value!, fareBrand, passengerPricing);
        }

        /// <summary>
        /// Serializes a <see cref="DgItinerarySlice" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgItinerarySlice"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DgItinerarySlice dgItinerarySlice, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dgItinerarySlice, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DgItinerarySlice" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgItinerarySlice"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DgItinerarySlice dgItinerarySlice, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dgItinerarySlice.Segments == null)
                throw new ArgumentNullException(nameof(dgItinerarySlice.Segments), "Property is required for class DgItinerarySlice.");

            if (dgItinerarySlice.FareBrandOption.IsSet && dgItinerarySlice.FareBrand == null)
                throw new ArgumentNullException(nameof(dgItinerarySlice.FareBrand), "Property is required for class DgItinerarySlice.");

            if (dgItinerarySlice.PassengerPricingOption.IsSet && dgItinerarySlice.PassengerPricing == null)
                throw new ArgumentNullException(nameof(dgItinerarySlice.PassengerPricing), "Property is required for class DgItinerarySlice.");

            writer.WritePropertyName("segments");
            JsonSerializer.Serialize(writer, dgItinerarySlice.Segments, jsonSerializerOptions);
            if (dgItinerarySlice.FareBrandOption.IsSet)
                writer.WriteString("fare_brand", dgItinerarySlice.FareBrand);

            if (dgItinerarySlice.PassengerPricingOption.IsSet)
            {
                writer.WritePropertyName("passenger_pricing");
                JsonSerializer.Serialize(writer, dgItinerarySlice.PassengerPricing, jsonSerializerOptions);
            }
        }
    }
}
