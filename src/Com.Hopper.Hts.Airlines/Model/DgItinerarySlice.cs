/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Hopper.Hts.Airlines.Client.OpenAPIDateConverter;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// An object containing the list of flight segments for a fare slice
    /// </summary>
    [DataContract(Name = "dg_itinerary_slice")]
    public partial class DgItinerarySlice : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DgItinerarySlice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DgItinerarySlice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DgItinerarySlice" /> class.
        /// </summary>
        /// <param name="segments">A list of segments which make up the slice (required).</param>
        /// <param name="fareBrand">Name of the fare brand on the slice.</param>
        /// <param name="passengerPricing">List of passengers type, count and pricing for the current slice.</param>
        public DgItinerarySlice(List<DgItinerarySliceSegment> segments = default(List<DgItinerarySliceSegment>), string fareBrand = default(string), List<DgPassengerPricing> passengerPricing = default(List<DgPassengerPricing>))
        {
            // to ensure "segments" is required (not null)
            if (segments == null)
            {
                throw new ArgumentNullException("segments is a required property for DgItinerarySlice and cannot be null");
            }
            this.Segments = segments;
            this.FareBrand = fareBrand;
            this.PassengerPricing = passengerPricing;
        }

        /// <summary>
        /// A list of segments which make up the slice
        /// </summary>
        /// <value>A list of segments which make up the slice</value>
        [DataMember(Name = "segments", IsRequired = true, EmitDefaultValue = true)]
        public List<DgItinerarySliceSegment> Segments { get; set; }

        /// <summary>
        /// Name of the fare brand on the slice
        /// </summary>
        /// <value>Name of the fare brand on the slice</value>
        /*
        <example>flex</example>
        */
        [DataMember(Name = "fare_brand", EmitDefaultValue = false)]
        public string FareBrand { get; set; }

        /// <summary>
        /// List of passengers type, count and pricing for the current slice
        /// </summary>
        /// <value>List of passengers type, count and pricing for the current slice</value>
        [DataMember(Name = "passenger_pricing", EmitDefaultValue = false)]
        public List<DgPassengerPricing> PassengerPricing { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DgItinerarySlice {\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("  FareBrand: ").Append(FareBrand).Append("\n");
            sb.Append("  PassengerPricing: ").Append(PassengerPricing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
