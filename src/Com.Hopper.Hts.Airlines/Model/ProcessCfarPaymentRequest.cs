// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// A process CFAR payment request
    /// </summary>
    public partial class ProcessCfarPaymentRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessCfarPaymentRequest" /> class.
        /// </summary>
        /// <param name="paymentMethodToken">The Token of the Form of Payment used to pay for the CFAR fee. </param>
        /// <param name="firstName">First name of the cardholder</param>
        /// <param name="lastName">Last name of the cardholder</param>
        /// <param name="pnrReference">Reference of the PNR in the airline system</param>
        /// <param name="emailAddress">Email address of the user</param>
        /// <param name="addressLine1">Address of the cardholder (first line)</param>
        /// <param name="addressLine2">Address of the cardholder (second line)</param>
        /// <param name="city">City of the cardholder</param>
        /// <param name="stateOrProvince">State or province of the cardholder</param>
        /// <param name="postalCode">Postal code  of the cardholder</param>
        /// <param name="country">Country of the cardholder</param>
        [JsonConstructor]
        public ProcessCfarPaymentRequest(string paymentMethodToken, string firstName, string lastName, string pnrReference, string emailAddress, Option<string?> addressLine1 = default, Option<string?> addressLine2 = default, Option<string?> city = default, Option<string?> stateOrProvince = default, Option<string?> postalCode = default, Option<string?> country = default)
        {
            PaymentMethodToken = paymentMethodToken;
            FirstName = firstName;
            LastName = lastName;
            PnrReference = pnrReference;
            EmailAddress = emailAddress;
            AddressLine1Option = addressLine1;
            AddressLine2Option = addressLine2;
            CityOption = city;
            StateOrProvinceOption = stateOrProvince;
            PostalCodeOption = postalCode;
            CountryOption = country;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The Token of the Form of Payment used to pay for the CFAR fee. 
        /// </summary>
        /// <value>The Token of the Form of Payment used to pay for the CFAR fee. </value>
        /* <example>MxyYEhDK12CUAA18bJDkAq0ab3y</example> */
        [JsonPropertyName("payment_method_token")]
        public string PaymentMethodToken { get; set; }

        /// <summary>
        /// First name of the cardholder
        /// </summary>
        /// <value>First name of the cardholder</value>
        /* <example>John</example> */
        [JsonPropertyName("first_name")]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name of the cardholder
        /// </summary>
        /// <value>Last name of the cardholder</value>
        /* <example>Smith</example> */
        [JsonPropertyName("last_name")]
        public string LastName { get; set; }

        /// <summary>
        /// Reference of the PNR in the airline system
        /// </summary>
        /// <value>Reference of the PNR in the airline system</value>
        /* <example>ABC123</example> */
        [JsonPropertyName("pnr_reference")]
        public string PnrReference { get; set; }

        /// <summary>
        /// Email address of the user
        /// </summary>
        /// <value>Email address of the user</value>
        /* <example>aaa@bbb.ccc</example> */
        [JsonPropertyName("email_address")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Used to track the state of AddressLine1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine1Option { get; private set; }

        /// <summary>
        /// Address of the cardholder (first line)
        /// </summary>
        /// <value>Address of the cardholder (first line)</value>
        /* <example>123 12th St</example> */
        [JsonPropertyName("address_line1")]
        public string? AddressLine1 { get { return this.AddressLine1Option; } set { this.AddressLine1Option = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of AddressLine2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine2Option { get; private set; }

        /// <summary>
        /// Address of the cardholder (second line)
        /// </summary>
        /// <value>Address of the cardholder (second line)</value>
        /* <example>Building B</example> */
        [JsonPropertyName("address_line2")]
        public string? AddressLine2 { get { return this.AddressLine2Option; } set { this.AddressLine2Option = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of City
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CityOption { get; private set; }

        /// <summary>
        /// City of the cardholder
        /// </summary>
        /// <value>City of the cardholder</value>
        /* <example>Quebec City</example> */
        [JsonPropertyName("city")]
        public string? City { get { return this.CityOption; } set { this.CityOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of StateOrProvince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOrProvinceOption { get; private set; }

        /// <summary>
        /// State or province of the cardholder
        /// </summary>
        /// <value>State or province of the cardholder</value>
        /* <example>QC</example> */
        [JsonPropertyName("state_or_province")]
        public string? StateOrProvince { get { return this.StateOrProvinceOption; } set { this.StateOrProvinceOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of PostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PostalCodeOption { get; private set; }

        /// <summary>
        /// Postal code  of the cardholder
        /// </summary>
        /// <value>Postal code  of the cardholder</value>
        /* <example>G1R 4S9</example> */
        [JsonPropertyName("postal_code")]
        public string? PostalCode { get { return this.PostalCodeOption; } set { this.PostalCodeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Country
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryOption { get; private set; }

        /// <summary>
        /// Country of the cardholder
        /// </summary>
        /// <value>Country of the cardholder</value>
        /* <example>CA</example> */
        [JsonPropertyName("country")]
        public string? Country { get { return this.CountryOption; } set { this.CountryOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessCfarPaymentRequest {\n");
            sb.Append("  PaymentMethodToken: ").Append(PaymentMethodToken).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  PnrReference: ").Append(PnrReference).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  StateOrProvince: ").Append(StateOrProvince).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProcessCfarPaymentRequest" />
    /// </summary>
    public class ProcessCfarPaymentRequestJsonConverter : JsonConverter<ProcessCfarPaymentRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ProcessCfarPaymentRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ProcessCfarPaymentRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> paymentMethodToken = default;
            Option<string?> firstName = default;
            Option<string?> lastName = default;
            Option<string?> pnrReference = default;
            Option<string?> emailAddress = default;
            Option<string?> addressLine1 = default;
            Option<string?> addressLine2 = default;
            Option<string?> city = default;
            Option<string?> stateOrProvince = default;
            Option<string?> postalCode = default;
            Option<string?> country = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "payment_method_token":
                            paymentMethodToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "first_name":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_name":
                            lastName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pnr_reference":
                            pnrReference = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email_address":
                            emailAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "address_line1":
                            addressLine1 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "address_line2":
                            addressLine2 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "city":
                            city = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state_or_province":
                            stateOrProvince = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "postal_code":
                            postalCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "country":
                            country = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!paymentMethodToken.IsSet)
                throw new ArgumentException("Property is required for class ProcessCfarPaymentRequest.", nameof(paymentMethodToken));

            if (!firstName.IsSet)
                throw new ArgumentException("Property is required for class ProcessCfarPaymentRequest.", nameof(firstName));

            if (!lastName.IsSet)
                throw new ArgumentException("Property is required for class ProcessCfarPaymentRequest.", nameof(lastName));

            if (!pnrReference.IsSet)
                throw new ArgumentException("Property is required for class ProcessCfarPaymentRequest.", nameof(pnrReference));

            if (!emailAddress.IsSet)
                throw new ArgumentException("Property is required for class ProcessCfarPaymentRequest.", nameof(emailAddress));

            if (paymentMethodToken.IsSet && paymentMethodToken.Value == null)
                throw new ArgumentNullException(nameof(paymentMethodToken), "Property is not nullable for class ProcessCfarPaymentRequest.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class ProcessCfarPaymentRequest.");

            if (lastName.IsSet && lastName.Value == null)
                throw new ArgumentNullException(nameof(lastName), "Property is not nullable for class ProcessCfarPaymentRequest.");

            if (pnrReference.IsSet && pnrReference.Value == null)
                throw new ArgumentNullException(nameof(pnrReference), "Property is not nullable for class ProcessCfarPaymentRequest.");

            if (emailAddress.IsSet && emailAddress.Value == null)
                throw new ArgumentNullException(nameof(emailAddress), "Property is not nullable for class ProcessCfarPaymentRequest.");

            if (addressLine1.IsSet && addressLine1.Value == null)
                throw new ArgumentNullException(nameof(addressLine1), "Property is not nullable for class ProcessCfarPaymentRequest.");

            if (addressLine2.IsSet && addressLine2.Value == null)
                throw new ArgumentNullException(nameof(addressLine2), "Property is not nullable for class ProcessCfarPaymentRequest.");

            if (city.IsSet && city.Value == null)
                throw new ArgumentNullException(nameof(city), "Property is not nullable for class ProcessCfarPaymentRequest.");

            if (stateOrProvince.IsSet && stateOrProvince.Value == null)
                throw new ArgumentNullException(nameof(stateOrProvince), "Property is not nullable for class ProcessCfarPaymentRequest.");

            if (postalCode.IsSet && postalCode.Value == null)
                throw new ArgumentNullException(nameof(postalCode), "Property is not nullable for class ProcessCfarPaymentRequest.");

            if (country.IsSet && country.Value == null)
                throw new ArgumentNullException(nameof(country), "Property is not nullable for class ProcessCfarPaymentRequest.");

            return new ProcessCfarPaymentRequest(paymentMethodToken.Value!, firstName.Value!, lastName.Value!, pnrReference.Value!, emailAddress.Value!, addressLine1, addressLine2, city, stateOrProvince, postalCode, country);
        }

        /// <summary>
        /// Serializes a <see cref="ProcessCfarPaymentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ProcessCfarPaymentRequest processCfarPaymentRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, processCfarPaymentRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ProcessCfarPaymentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="processCfarPaymentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ProcessCfarPaymentRequest processCfarPaymentRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (processCfarPaymentRequest.PaymentMethodToken == null)
                throw new ArgumentNullException(nameof(processCfarPaymentRequest.PaymentMethodToken), "Property is required for class ProcessCfarPaymentRequest.");

            if (processCfarPaymentRequest.FirstName == null)
                throw new ArgumentNullException(nameof(processCfarPaymentRequest.FirstName), "Property is required for class ProcessCfarPaymentRequest.");

            if (processCfarPaymentRequest.LastName == null)
                throw new ArgumentNullException(nameof(processCfarPaymentRequest.LastName), "Property is required for class ProcessCfarPaymentRequest.");

            if (processCfarPaymentRequest.PnrReference == null)
                throw new ArgumentNullException(nameof(processCfarPaymentRequest.PnrReference), "Property is required for class ProcessCfarPaymentRequest.");

            if (processCfarPaymentRequest.EmailAddress == null)
                throw new ArgumentNullException(nameof(processCfarPaymentRequest.EmailAddress), "Property is required for class ProcessCfarPaymentRequest.");

            if (processCfarPaymentRequest.AddressLine1Option.IsSet && processCfarPaymentRequest.AddressLine1 == null)
                throw new ArgumentNullException(nameof(processCfarPaymentRequest.AddressLine1), "Property is required for class ProcessCfarPaymentRequest.");

            if (processCfarPaymentRequest.AddressLine2Option.IsSet && processCfarPaymentRequest.AddressLine2 == null)
                throw new ArgumentNullException(nameof(processCfarPaymentRequest.AddressLine2), "Property is required for class ProcessCfarPaymentRequest.");

            if (processCfarPaymentRequest.CityOption.IsSet && processCfarPaymentRequest.City == null)
                throw new ArgumentNullException(nameof(processCfarPaymentRequest.City), "Property is required for class ProcessCfarPaymentRequest.");

            if (processCfarPaymentRequest.StateOrProvinceOption.IsSet && processCfarPaymentRequest.StateOrProvince == null)
                throw new ArgumentNullException(nameof(processCfarPaymentRequest.StateOrProvince), "Property is required for class ProcessCfarPaymentRequest.");

            if (processCfarPaymentRequest.PostalCodeOption.IsSet && processCfarPaymentRequest.PostalCode == null)
                throw new ArgumentNullException(nameof(processCfarPaymentRequest.PostalCode), "Property is required for class ProcessCfarPaymentRequest.");

            if (processCfarPaymentRequest.CountryOption.IsSet && processCfarPaymentRequest.Country == null)
                throw new ArgumentNullException(nameof(processCfarPaymentRequest.Country), "Property is required for class ProcessCfarPaymentRequest.");

            writer.WriteString("payment_method_token", processCfarPaymentRequest.PaymentMethodToken);

            writer.WriteString("first_name", processCfarPaymentRequest.FirstName);

            writer.WriteString("last_name", processCfarPaymentRequest.LastName);

            writer.WriteString("pnr_reference", processCfarPaymentRequest.PnrReference);

            writer.WriteString("email_address", processCfarPaymentRequest.EmailAddress);

            if (processCfarPaymentRequest.AddressLine1Option.IsSet)
                writer.WriteString("address_line1", processCfarPaymentRequest.AddressLine1);

            if (processCfarPaymentRequest.AddressLine2Option.IsSet)
                writer.WriteString("address_line2", processCfarPaymentRequest.AddressLine2);

            if (processCfarPaymentRequest.CityOption.IsSet)
                writer.WriteString("city", processCfarPaymentRequest.City);

            if (processCfarPaymentRequest.StateOrProvinceOption.IsSet)
                writer.WriteString("state_or_province", processCfarPaymentRequest.StateOrProvince);

            if (processCfarPaymentRequest.PostalCodeOption.IsSet)
                writer.WriteString("postal_code", processCfarPaymentRequest.PostalCode);

            if (processCfarPaymentRequest.CountryOption.IsSet)
                writer.WriteString("country", processCfarPaymentRequest.Country);
        }
    }
}
