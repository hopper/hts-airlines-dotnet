// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// DgTax
    /// </summary>
    public partial class DgTax
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DgTax" /> class.
        /// </summary>
        /// <param name="name">Name of the tax</param>
        /// <param name="rate">The rate of the tax</param>
        /// <param name="amount">The amount of the tax</param>
        /// <param name="registrationNumber">Registration number of the tax if applicable</param>
        [JsonConstructor]
        public DgTax(string name, string rate, string amount, Option<string?> registrationNumber = default)
        {
            Name = name;
            Rate = rate;
            Amount = amount;
            RegistrationNumberOption = registrationNumber;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Name of the tax
        /// </summary>
        /// <value>Name of the tax</value>
        /* <example>VAT</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// The rate of the tax
        /// </summary>
        /// <value>The rate of the tax</value>
        /* <example>12.00</example> */
        [JsonPropertyName("rate")]
        public string Rate { get; set; }

        /// <summary>
        /// The amount of the tax
        /// </summary>
        /// <value>The amount of the tax</value>
        /* <example>20.00</example> */
        [JsonPropertyName("amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Used to track the state of RegistrationNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RegistrationNumberOption { get; private set; }

        /// <summary>
        /// Registration number of the tax if applicable
        /// </summary>
        /// <value>Registration number of the tax if applicable</value>
        /* <example>0123456ABCDEF</example> */
        [JsonPropertyName("registration_number")]
        public string? RegistrationNumber { get { return this.RegistrationNumberOption; } set { this.RegistrationNumberOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DgTax {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  RegistrationNumber: ").Append(RegistrationNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DgTax" />
    /// </summary>
    public class DgTaxJsonConverter : JsonConverter<DgTax>
    {
        /// <summary>
        /// Deserializes json to <see cref="DgTax" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DgTax Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> rate = default;
            Option<string?> amount = default;
            Option<string?> registrationNumber = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "rate":
                            rate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "amount":
                            amount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "registration_number":
                            registrationNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class DgTax.", nameof(name));

            if (!rate.IsSet)
                throw new ArgumentException("Property is required for class DgTax.", nameof(rate));

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class DgTax.", nameof(amount));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class DgTax.");

            if (rate.IsSet && rate.Value == null)
                throw new ArgumentNullException(nameof(rate), "Property is not nullable for class DgTax.");

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class DgTax.");

            if (registrationNumber.IsSet && registrationNumber.Value == null)
                throw new ArgumentNullException(nameof(registrationNumber), "Property is not nullable for class DgTax.");

            return new DgTax(name.Value!, rate.Value!, amount.Value!, registrationNumber);
        }

        /// <summary>
        /// Serializes a <see cref="DgTax" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgTax"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DgTax dgTax, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dgTax, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DgTax" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgTax"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DgTax dgTax, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dgTax.Name == null)
                throw new ArgumentNullException(nameof(dgTax.Name), "Property is required for class DgTax.");

            if (dgTax.Rate == null)
                throw new ArgumentNullException(nameof(dgTax.Rate), "Property is required for class DgTax.");

            if (dgTax.Amount == null)
                throw new ArgumentNullException(nameof(dgTax.Amount), "Property is required for class DgTax.");

            if (dgTax.RegistrationNumberOption.IsSet && dgTax.RegistrationNumber == null)
                throw new ArgumentNullException(nameof(dgTax.RegistrationNumber), "Property is required for class DgTax.");

            writer.WriteString("name", dgTax.Name);

            writer.WriteString("rate", dgTax.Rate);

            writer.WriteString("amount", dgTax.Amount);

            if (dgTax.RegistrationNumberOption.IsSet)
                writer.WriteString("registration_number", dgTax.RegistrationNumber);
        }
    }
}
