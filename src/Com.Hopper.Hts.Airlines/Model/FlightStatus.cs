// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// The current flight status
    /// </summary>
    /// <value>The current flight status</value>
    public enum FlightStatus
    {
        /// <summary>
        /// Enum Confirmed for value: confirmed
        /// </summary>
        Confirmed = 1,

        /// <summary>
        /// Enum Cancelled for value: cancelled
        /// </summary>
        Cancelled = 2
    }

    /// <summary>
    /// Converts <see cref="FlightStatus"/> to and from the JSON value
    /// </summary>
    public static class FlightStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="FlightStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FlightStatus FromString(string value)
        {
            if (value.Equals("confirmed"))
                return FlightStatus.Confirmed;

            if (value.Equals("cancelled"))
                return FlightStatus.Cancelled;

            throw new NotImplementedException($"Could not convert value to type FlightStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="FlightStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FlightStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("confirmed"))
                return FlightStatus.Confirmed;

            if (value.Equals("cancelled"))
                return FlightStatus.Cancelled;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FlightStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(FlightStatus value)
        {
            if (value == FlightStatus.Confirmed)
                return "confirmed";

            if (value == FlightStatus.Cancelled)
                return "cancelled";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FlightStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class FlightStatusJsonConverter : JsonConverter<FlightStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override FlightStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            FlightStatus? result = rawValue == null
                ? null
                : FlightStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the FlightStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="flightStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, FlightStatus flightStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(flightStatus.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FlightStatus"/>
    /// </summary>
    public class FlightStatusNullableJsonConverter : JsonConverter<FlightStatus?>
    {
        /// <summary>
        /// Returns a FlightStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override FlightStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            FlightStatus? result = rawValue == null
                ? null
                : FlightStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="flightStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, FlightStatus? flightStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(flightStatus?.ToString() ?? "null");
        }
    }
}
