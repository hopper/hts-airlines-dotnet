// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// The flow type for which the session is opened.
    /// </summary>
    /// <value>The flow type for which the session is opened.</value>
    public enum FlowType
    {
        /// <summary>
        /// Enum Purchase for value: purchase
        /// </summary>
        Purchase = 1,

        /// <summary>
        /// Enum Exercise for value: exercise
        /// </summary>
        Exercise = 2
    }

    /// <summary>
    /// Converts <see cref="FlowType"/> to and from the JSON value
    /// </summary>
    public static class FlowTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="FlowType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FlowType FromString(string value)
        {
            if (value.Equals("purchase"))
                return FlowType.Purchase;

            if (value.Equals("exercise"))
                return FlowType.Exercise;

            throw new NotImplementedException($"Could not convert value to type FlowType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="FlowType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FlowType? FromStringOrDefault(string value)
        {
            if (value.Equals("purchase"))
                return FlowType.Purchase;

            if (value.Equals("exercise"))
                return FlowType.Exercise;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FlowType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(FlowType value)
        {
            if (value == FlowType.Purchase)
                return "purchase";

            if (value == FlowType.Exercise)
                return "exercise";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FlowType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class FlowTypeJsonConverter : JsonConverter<FlowType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override FlowType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            FlowType? result = rawValue == null
                ? null
                : FlowTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the FlowType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="flowType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, FlowType flowType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(flowType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FlowType"/>
    /// </summary>
    public class FlowTypeNullableJsonConverter : JsonConverter<FlowType?>
    {
        /// <summary>
        /// Returns a FlowType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override FlowType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            FlowType? result = rawValue == null
                ? null
                : FlowTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="flowType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, FlowType? flowType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(flowType?.ToString() ?? "null");
        }
    }
}
