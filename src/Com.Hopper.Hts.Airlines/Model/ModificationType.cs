// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// The type of modifications in question in this fare rule
    /// </summary>
    /// <value>The type of modifications in question in this fare rule</value>
    public enum ModificationType
    {
        /// <summary>
        /// Enum Cancellation for value: cancellation
        /// </summary>
        Cancellation = 1,

        /// <summary>
        /// Enum Change for value: change
        /// </summary>
        Change = 2
    }

    /// <summary>
    /// Converts <see cref="ModificationType"/> to and from the JSON value
    /// </summary>
    public static class ModificationTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ModificationType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ModificationType FromString(string value)
        {
            if (value.Equals("cancellation"))
                return ModificationType.Cancellation;

            if (value.Equals("change"))
                return ModificationType.Change;

            throw new NotImplementedException($"Could not convert value to type ModificationType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ModificationType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ModificationType? FromStringOrDefault(string value)
        {
            if (value.Equals("cancellation"))
                return ModificationType.Cancellation;

            if (value.Equals("change"))
                return ModificationType.Change;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ModificationType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ModificationType value)
        {
            if (value == ModificationType.Cancellation)
                return "cancellation";

            if (value == ModificationType.Change)
                return "change";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ModificationType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ModificationTypeJsonConverter : JsonConverter<ModificationType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ModificationType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ModificationType? result = rawValue == null
                ? null
                : ModificationTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ModificationType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modificationType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ModificationType modificationType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(modificationType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ModificationType"/>
    /// </summary>
    public class ModificationTypeNullableJsonConverter : JsonConverter<ModificationType?>
    {
        /// <summary>
        /// Returns a ModificationType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ModificationType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ModificationType? result = rawValue == null
                ? null
                : ModificationTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modificationType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ModificationType? modificationType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(modificationType?.ToString() ?? "null");
        }
    }
}
