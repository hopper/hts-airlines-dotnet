// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// A update DG contract status request
    /// </summary>
    public partial class UpdateDgContractStatusRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDgContractStatusRequest" /> class.
        /// </summary>
        /// <param name="status">status</param>
        /// <param name="pnrReference">Reference of the PNR in the airline system.&lt;br/&gt;Mandatory only if new status is \&quot;confirmed\&quot;</param>
        /// <param name="emailAddress">Email address of the user</param>
        /// <param name="phoneNumber">Phone number of the customer</param>
        /// <param name="firstName">First name of the cardholder</param>
        /// <param name="lastName">Last name of the cardholder</param>
        /// <param name="addressLine1">Address of the cardholder (first line)</param>
        /// <param name="addressLine2">Address of the cardholder (second line)</param>
        /// <param name="city">City of the cardholder</param>
        /// <param name="stateOrProvince">State or province of the cardholder</param>
        /// <param name="postalCode">Postal code  of the cardholder</param>
        /// <param name="country">Country of the cardholder</param>
        /// <param name="taxesTotal">Total of taxes</param>
        /// <param name="taxes">List of taxes that is associated with a contract</param>
        /// <param name="formsOfPayment">List of the forms of payment used to purchase the booking</param>
        [JsonConstructor]
        public UpdateDgContractStatusRequest(DgStatus status, Option<string?> pnrReference = default, Option<string?> emailAddress = default, Option<string?> phoneNumber = default, Option<string?> firstName = default, Option<string?> lastName = default, Option<string?> addressLine1 = default, Option<string?> addressLine2 = default, Option<string?> city = default, Option<string?> stateOrProvince = default, Option<string?> postalCode = default, Option<string?> country = default, Option<string?> taxesTotal = default, Option<List<DgTax>?> taxes = default, Option<List<FormOfPayment>?> formsOfPayment = default)
        {
            Status = status;
            PnrReferenceOption = pnrReference;
            EmailAddressOption = emailAddress;
            PhoneNumberOption = phoneNumber;
            FirstNameOption = firstName;
            LastNameOption = lastName;
            AddressLine1Option = addressLine1;
            AddressLine2Option = addressLine2;
            CityOption = city;
            StateOrProvinceOption = stateOrProvince;
            PostalCodeOption = postalCode;
            CountryOption = country;
            TaxesTotalOption = taxesTotal;
            TaxesOption = taxes;
            FormsOfPaymentOption = formsOfPayment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public DgStatus Status { get; set; }

        /// <summary>
        /// Used to track the state of PnrReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PnrReferenceOption { get; private set; }

        /// <summary>
        /// Reference of the PNR in the airline system.&lt;br/&gt;Mandatory only if new status is \&quot;confirmed\&quot;
        /// </summary>
        /// <value>Reference of the PNR in the airline system.&lt;br/&gt;Mandatory only if new status is \&quot;confirmed\&quot;</value>
        /* <example>ABC123</example> */
        [JsonPropertyName("pnr_reference")]
        public string? PnrReference { get { return this.PnrReferenceOption; } set { this.PnrReferenceOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of EmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailAddressOption { get; private set; }

        /// <summary>
        /// Email address of the user
        /// </summary>
        /// <value>Email address of the user</value>
        /* <example>john@doe.com</example> */
        [JsonPropertyName("email_address")]
        public string? EmailAddress { get { return this.EmailAddressOption; } set { this.EmailAddressOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of PhoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneNumberOption { get; private set; }

        /// <summary>
        /// Phone number of the customer
        /// </summary>
        /// <value>Phone number of the customer</value>
        /* <example>12345678900</example> */
        [JsonPropertyName("phone_number")]
        public string? PhoneNumber { get { return this.PhoneNumberOption; } set { this.PhoneNumberOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirstNameOption { get; private set; }

        /// <summary>
        /// First name of the cardholder
        /// </summary>
        /// <value>First name of the cardholder</value>
        /* <example>John</example> */
        [JsonPropertyName("first_name")]
        public string? FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastNameOption { get; private set; }

        /// <summary>
        /// Last name of the cardholder
        /// </summary>
        /// <value>Last name of the cardholder</value>
        /* <example>Smith</example> */
        [JsonPropertyName("last_name")]
        public string? LastName { get { return this.LastNameOption; } set { this.LastNameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of AddressLine1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine1Option { get; private set; }

        /// <summary>
        /// Address of the cardholder (first line)
        /// </summary>
        /// <value>Address of the cardholder (first line)</value>
        /* <example>123 12th St</example> */
        [JsonPropertyName("address_line1")]
        public string? AddressLine1 { get { return this.AddressLine1Option; } set { this.AddressLine1Option = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of AddressLine2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine2Option { get; private set; }

        /// <summary>
        /// Address of the cardholder (second line)
        /// </summary>
        /// <value>Address of the cardholder (second line)</value>
        /* <example>Building B</example> */
        [JsonPropertyName("address_line2")]
        public string? AddressLine2 { get { return this.AddressLine2Option; } set { this.AddressLine2Option = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of City
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CityOption { get; private set; }

        /// <summary>
        /// City of the cardholder
        /// </summary>
        /// <value>City of the cardholder</value>
        /* <example>Quebec City</example> */
        [JsonPropertyName("city")]
        public string? City { get { return this.CityOption; } set { this.CityOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of StateOrProvince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOrProvinceOption { get; private set; }

        /// <summary>
        /// State or province of the cardholder
        /// </summary>
        /// <value>State or province of the cardholder</value>
        /* <example>QC</example> */
        [JsonPropertyName("state_or_province")]
        public string? StateOrProvince { get { return this.StateOrProvinceOption; } set { this.StateOrProvinceOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of PostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PostalCodeOption { get; private set; }

        /// <summary>
        /// Postal code  of the cardholder
        /// </summary>
        /// <value>Postal code  of the cardholder</value>
        /* <example>G1R 4S9</example> */
        [JsonPropertyName("postal_code")]
        public string? PostalCode { get { return this.PostalCodeOption; } set { this.PostalCodeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Country
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryOption { get; private set; }

        /// <summary>
        /// Country of the cardholder
        /// </summary>
        /// <value>Country of the cardholder</value>
        /* <example>CA</example> */
        [JsonPropertyName("country")]
        public string? Country { get { return this.CountryOption; } set { this.CountryOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of TaxesTotal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TaxesTotalOption { get; private set; }

        /// <summary>
        /// Total of taxes
        /// </summary>
        /// <value>Total of taxes</value>
        /* <example>20.00</example> */
        [JsonPropertyName("taxes_total")]
        public string? TaxesTotal { get { return this.TaxesTotalOption; } set { this.TaxesTotalOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Taxes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DgTax>?> TaxesOption { get; private set; }

        /// <summary>
        /// List of taxes that is associated with a contract
        /// </summary>
        /// <value>List of taxes that is associated with a contract</value>
        [JsonPropertyName("taxes")]
        public List<DgTax>? Taxes { get { return this.TaxesOption; } set { this.TaxesOption = new Option<List<DgTax>?>(value); } }

        /// <summary>
        /// Used to track the state of FormsOfPayment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<FormOfPayment>?> FormsOfPaymentOption { get; private set; }

        /// <summary>
        /// List of the forms of payment used to purchase the booking
        /// </summary>
        /// <value>List of the forms of payment used to purchase the booking</value>
        [JsonPropertyName("forms_of_payment")]
        public List<FormOfPayment>? FormsOfPayment { get { return this.FormsOfPaymentOption; } set { this.FormsOfPaymentOption = new Option<List<FormOfPayment>?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateDgContractStatusRequest {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PnrReference: ").Append(PnrReference).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  StateOrProvince: ").Append(StateOrProvince).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  TaxesTotal: ").Append(TaxesTotal).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  FormsOfPayment: ").Append(FormsOfPayment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateDgContractStatusRequest" />
    /// </summary>
    public class UpdateDgContractStatusRequestJsonConverter : JsonConverter<UpdateDgContractStatusRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateDgContractStatusRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateDgContractStatusRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DgStatus?> status = default;
            Option<string?> pnrReference = default;
            Option<string?> emailAddress = default;
            Option<string?> phoneNumber = default;
            Option<string?> firstName = default;
            Option<string?> lastName = default;
            Option<string?> addressLine1 = default;
            Option<string?> addressLine2 = default;
            Option<string?> city = default;
            Option<string?> stateOrProvince = default;
            Option<string?> postalCode = default;
            Option<string?> country = default;
            Option<string?> taxesTotal = default;
            Option<List<DgTax>?> taxes = default;
            Option<List<FormOfPayment>?> formsOfPayment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<DgStatus?>(DgStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "pnr_reference":
                            pnrReference = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email_address":
                            emailAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "phone_number":
                            phoneNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "first_name":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_name":
                            lastName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "address_line1":
                            addressLine1 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "address_line2":
                            addressLine2 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "city":
                            city = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state_or_province":
                            stateOrProvince = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "postal_code":
                            postalCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "country":
                            country = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "taxes_total":
                            taxesTotal = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "taxes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                taxes = new Option<List<DgTax>?>(JsonSerializer.Deserialize<List<DgTax>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "forms_of_payment":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                formsOfPayment = new Option<List<FormOfPayment>?>(JsonSerializer.Deserialize<List<FormOfPayment>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class UpdateDgContractStatusRequest.", nameof(status));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class UpdateDgContractStatusRequest.");

            if (pnrReference.IsSet && pnrReference.Value == null)
                throw new ArgumentNullException(nameof(pnrReference), "Property is not nullable for class UpdateDgContractStatusRequest.");

            if (emailAddress.IsSet && emailAddress.Value == null)
                throw new ArgumentNullException(nameof(emailAddress), "Property is not nullable for class UpdateDgContractStatusRequest.");

            if (phoneNumber.IsSet && phoneNumber.Value == null)
                throw new ArgumentNullException(nameof(phoneNumber), "Property is not nullable for class UpdateDgContractStatusRequest.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class UpdateDgContractStatusRequest.");

            if (lastName.IsSet && lastName.Value == null)
                throw new ArgumentNullException(nameof(lastName), "Property is not nullable for class UpdateDgContractStatusRequest.");

            if (addressLine1.IsSet && addressLine1.Value == null)
                throw new ArgumentNullException(nameof(addressLine1), "Property is not nullable for class UpdateDgContractStatusRequest.");

            if (addressLine2.IsSet && addressLine2.Value == null)
                throw new ArgumentNullException(nameof(addressLine2), "Property is not nullable for class UpdateDgContractStatusRequest.");

            if (city.IsSet && city.Value == null)
                throw new ArgumentNullException(nameof(city), "Property is not nullable for class UpdateDgContractStatusRequest.");

            if (stateOrProvince.IsSet && stateOrProvince.Value == null)
                throw new ArgumentNullException(nameof(stateOrProvince), "Property is not nullable for class UpdateDgContractStatusRequest.");

            if (postalCode.IsSet && postalCode.Value == null)
                throw new ArgumentNullException(nameof(postalCode), "Property is not nullable for class UpdateDgContractStatusRequest.");

            if (country.IsSet && country.Value == null)
                throw new ArgumentNullException(nameof(country), "Property is not nullable for class UpdateDgContractStatusRequest.");

            if (taxesTotal.IsSet && taxesTotal.Value == null)
                throw new ArgumentNullException(nameof(taxesTotal), "Property is not nullable for class UpdateDgContractStatusRequest.");

            if (taxes.IsSet && taxes.Value == null)
                throw new ArgumentNullException(nameof(taxes), "Property is not nullable for class UpdateDgContractStatusRequest.");

            if (formsOfPayment.IsSet && formsOfPayment.Value == null)
                throw new ArgumentNullException(nameof(formsOfPayment), "Property is not nullable for class UpdateDgContractStatusRequest.");

            return new UpdateDgContractStatusRequest(status.Value!.Value!, pnrReference, emailAddress, phoneNumber, firstName, lastName, addressLine1, addressLine2, city, stateOrProvince, postalCode, country, taxesTotal, taxes, formsOfPayment);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateDgContractStatusRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateDgContractStatusRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateDgContractStatusRequest updateDgContractStatusRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateDgContractStatusRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateDgContractStatusRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateDgContractStatusRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateDgContractStatusRequest updateDgContractStatusRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateDgContractStatusRequest.PnrReferenceOption.IsSet && updateDgContractStatusRequest.PnrReference == null)
                throw new ArgumentNullException(nameof(updateDgContractStatusRequest.PnrReference), "Property is required for class UpdateDgContractStatusRequest.");

            if (updateDgContractStatusRequest.EmailAddressOption.IsSet && updateDgContractStatusRequest.EmailAddress == null)
                throw new ArgumentNullException(nameof(updateDgContractStatusRequest.EmailAddress), "Property is required for class UpdateDgContractStatusRequest.");

            if (updateDgContractStatusRequest.PhoneNumberOption.IsSet && updateDgContractStatusRequest.PhoneNumber == null)
                throw new ArgumentNullException(nameof(updateDgContractStatusRequest.PhoneNumber), "Property is required for class UpdateDgContractStatusRequest.");

            if (updateDgContractStatusRequest.FirstNameOption.IsSet && updateDgContractStatusRequest.FirstName == null)
                throw new ArgumentNullException(nameof(updateDgContractStatusRequest.FirstName), "Property is required for class UpdateDgContractStatusRequest.");

            if (updateDgContractStatusRequest.LastNameOption.IsSet && updateDgContractStatusRequest.LastName == null)
                throw new ArgumentNullException(nameof(updateDgContractStatusRequest.LastName), "Property is required for class UpdateDgContractStatusRequest.");

            if (updateDgContractStatusRequest.AddressLine1Option.IsSet && updateDgContractStatusRequest.AddressLine1 == null)
                throw new ArgumentNullException(nameof(updateDgContractStatusRequest.AddressLine1), "Property is required for class UpdateDgContractStatusRequest.");

            if (updateDgContractStatusRequest.AddressLine2Option.IsSet && updateDgContractStatusRequest.AddressLine2 == null)
                throw new ArgumentNullException(nameof(updateDgContractStatusRequest.AddressLine2), "Property is required for class UpdateDgContractStatusRequest.");

            if (updateDgContractStatusRequest.CityOption.IsSet && updateDgContractStatusRequest.City == null)
                throw new ArgumentNullException(nameof(updateDgContractStatusRequest.City), "Property is required for class UpdateDgContractStatusRequest.");

            if (updateDgContractStatusRequest.StateOrProvinceOption.IsSet && updateDgContractStatusRequest.StateOrProvince == null)
                throw new ArgumentNullException(nameof(updateDgContractStatusRequest.StateOrProvince), "Property is required for class UpdateDgContractStatusRequest.");

            if (updateDgContractStatusRequest.PostalCodeOption.IsSet && updateDgContractStatusRequest.PostalCode == null)
                throw new ArgumentNullException(nameof(updateDgContractStatusRequest.PostalCode), "Property is required for class UpdateDgContractStatusRequest.");

            if (updateDgContractStatusRequest.CountryOption.IsSet && updateDgContractStatusRequest.Country == null)
                throw new ArgumentNullException(nameof(updateDgContractStatusRequest.Country), "Property is required for class UpdateDgContractStatusRequest.");

            if (updateDgContractStatusRequest.TaxesTotalOption.IsSet && updateDgContractStatusRequest.TaxesTotal == null)
                throw new ArgumentNullException(nameof(updateDgContractStatusRequest.TaxesTotal), "Property is required for class UpdateDgContractStatusRequest.");

            if (updateDgContractStatusRequest.TaxesOption.IsSet && updateDgContractStatusRequest.Taxes == null)
                throw new ArgumentNullException(nameof(updateDgContractStatusRequest.Taxes), "Property is required for class UpdateDgContractStatusRequest.");

            if (updateDgContractStatusRequest.FormsOfPaymentOption.IsSet && updateDgContractStatusRequest.FormsOfPayment == null)
                throw new ArgumentNullException(nameof(updateDgContractStatusRequest.FormsOfPayment), "Property is required for class UpdateDgContractStatusRequest.");

            var statusRawValue = DgStatusValueConverter.ToJsonValue(updateDgContractStatusRequest.Status);
            writer.WriteString("status", statusRawValue);

            if (updateDgContractStatusRequest.PnrReferenceOption.IsSet)
                writer.WriteString("pnr_reference", updateDgContractStatusRequest.PnrReference);

            if (updateDgContractStatusRequest.EmailAddressOption.IsSet)
                writer.WriteString("email_address", updateDgContractStatusRequest.EmailAddress);

            if (updateDgContractStatusRequest.PhoneNumberOption.IsSet)
                writer.WriteString("phone_number", updateDgContractStatusRequest.PhoneNumber);

            if (updateDgContractStatusRequest.FirstNameOption.IsSet)
                writer.WriteString("first_name", updateDgContractStatusRequest.FirstName);

            if (updateDgContractStatusRequest.LastNameOption.IsSet)
                writer.WriteString("last_name", updateDgContractStatusRequest.LastName);

            if (updateDgContractStatusRequest.AddressLine1Option.IsSet)
                writer.WriteString("address_line1", updateDgContractStatusRequest.AddressLine1);

            if (updateDgContractStatusRequest.AddressLine2Option.IsSet)
                writer.WriteString("address_line2", updateDgContractStatusRequest.AddressLine2);

            if (updateDgContractStatusRequest.CityOption.IsSet)
                writer.WriteString("city", updateDgContractStatusRequest.City);

            if (updateDgContractStatusRequest.StateOrProvinceOption.IsSet)
                writer.WriteString("state_or_province", updateDgContractStatusRequest.StateOrProvince);

            if (updateDgContractStatusRequest.PostalCodeOption.IsSet)
                writer.WriteString("postal_code", updateDgContractStatusRequest.PostalCode);

            if (updateDgContractStatusRequest.CountryOption.IsSet)
                writer.WriteString("country", updateDgContractStatusRequest.Country);

            if (updateDgContractStatusRequest.TaxesTotalOption.IsSet)
                writer.WriteString("taxes_total", updateDgContractStatusRequest.TaxesTotal);

            if (updateDgContractStatusRequest.TaxesOption.IsSet)
            {
                writer.WritePropertyName("taxes");
                JsonSerializer.Serialize(writer, updateDgContractStatusRequest.Taxes, jsonSerializerOptions);
            }
            if (updateDgContractStatusRequest.FormsOfPaymentOption.IsSet)
            {
                writer.WritePropertyName("forms_of_payment");
                JsonSerializer.Serialize(writer, updateDgContractStatusRequest.FormsOfPayment, jsonSerializerOptions);
            }
        }
    }
}
