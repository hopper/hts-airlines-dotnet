// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// An object detailing a segment of a fare slice
    /// </summary>
    public partial class DgExerciseItinerarySliceSegment
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DgExerciseItinerarySliceSegment" /> class.
        /// </summary>
        /// <param name="originAirport">IATA airport code of origin</param>
        /// <param name="destinationAirport">IATA airport code of destination</param>
        /// <param name="departureDateTime">The local date and time of departure in ISO Local Date Time format</param>
        /// <param name="arrivalDateTime">The local date and time of arrival in ISO Local Date Time format</param>
        /// <param name="estimatedDepartureDateTime">The local date and time of estimated time of departure in ISO Local Date Time format</param>
        /// <param name="estimatedArrivalDateTime">The local date and time of estimated time of arrival in ISO Local Date Time format</param>
        /// <param name="flightNumber">The number of the flight</param>
        /// <param name="validatingCarrierCode">The IATA airline code of the validating carrier for this segment</param>
        /// <param name="cabin">cabin</param>
        /// <param name="flightStatus">flightStatus</param>
        /// <param name="checkedIn">Is there at least one checked-in passenger on this flight</param>
        /// <param name="checkedInBags">Is there at least one checked-in bag on this flight</param>
        /// <param name="checkedBagAllowance">Is there a checked bag allowance on this flight</param>
        /// <param name="boarded">Is there at least one passenger boarded on this flight</param>
        /// <param name="flown">Is this segment flown already</param>
        [JsonConstructor]
        public DgExerciseItinerarySliceSegment(string originAirport, string destinationAirport, string departureDateTime, string arrivalDateTime, string estimatedDepartureDateTime, string estimatedArrivalDateTime, string flightNumber, string validatingCarrierCode, Cabin cabin, FlightStatus flightStatus, Option<bool?> checkedIn = default, Option<bool?> checkedInBags = default, Option<bool?> checkedBagAllowance = default, Option<bool?> boarded = default, Option<bool?> flown = default)
        {
            OriginAirport = originAirport;
            DestinationAirport = destinationAirport;
            DepartureDateTime = departureDateTime;
            ArrivalDateTime = arrivalDateTime;
            EstimatedDepartureDateTime = estimatedDepartureDateTime;
            EstimatedArrivalDateTime = estimatedArrivalDateTime;
            FlightNumber = flightNumber;
            ValidatingCarrierCode = validatingCarrierCode;
            Cabin = cabin;
            FlightStatus = flightStatus;
            CheckedInOption = checkedIn;
            CheckedInBagsOption = checkedInBags;
            CheckedBagAllowanceOption = checkedBagAllowance;
            BoardedOption = boarded;
            FlownOption = flown;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Cabin
        /// </summary>
        [JsonPropertyName("cabin")]
        public Cabin Cabin { get; set; }

        /// <summary>
        /// Gets or Sets FlightStatus
        /// </summary>
        [JsonPropertyName("flight_status")]
        public FlightStatus FlightStatus { get; set; }

        /// <summary>
        /// IATA airport code of origin
        /// </summary>
        /// <value>IATA airport code of origin</value>
        /* <example>BOS</example> */
        [JsonPropertyName("origin_airport")]
        public string OriginAirport { get; set; }

        /// <summary>
        /// IATA airport code of destination
        /// </summary>
        /// <value>IATA airport code of destination</value>
        /* <example>LGA</example> */
        [JsonPropertyName("destination_airport")]
        public string DestinationAirport { get; set; }

        /// <summary>
        /// The local date and time of departure in ISO Local Date Time format
        /// </summary>
        /// <value>The local date and time of departure in ISO Local Date Time format</value>
        /* <example>2022-04-02T18:34:30</example> */
        [JsonPropertyName("departure_date_time")]
        public string DepartureDateTime { get; set; }

        /// <summary>
        /// The local date and time of arrival in ISO Local Date Time format
        /// </summary>
        /// <value>The local date and time of arrival in ISO Local Date Time format</value>
        /* <example>2022-04-02T19:12:30</example> */
        [JsonPropertyName("arrival_date_time")]
        public string ArrivalDateTime { get; set; }

        /// <summary>
        /// The local date and time of estimated time of departure in ISO Local Date Time format
        /// </summary>
        /// <value>The local date and time of estimated time of departure in ISO Local Date Time format</value>
        /* <example>2022-04-02T20:34:30</example> */
        [JsonPropertyName("estimated_departure_date_time")]
        public string EstimatedDepartureDateTime { get; set; }

        /// <summary>
        /// The local date and time of estimated time of arrival in ISO Local Date Time format
        /// </summary>
        /// <value>The local date and time of estimated time of arrival in ISO Local Date Time format</value>
        /* <example>2022-04-02T21:12:30</example> */
        [JsonPropertyName("estimated_arrival_date_time")]
        public string EstimatedArrivalDateTime { get; set; }

        /// <summary>
        /// The number of the flight
        /// </summary>
        /// <value>The number of the flight</value>
        /* <example>JB776</example> */
        [JsonPropertyName("flight_number")]
        public string FlightNumber { get; set; }

        /// <summary>
        /// The IATA airline code of the validating carrier for this segment
        /// </summary>
        /// <value>The IATA airline code of the validating carrier for this segment</value>
        /* <example>B6</example> */
        [JsonPropertyName("validating_carrier_code")]
        public string ValidatingCarrierCode { get; set; }

        /// <summary>
        /// Used to track the state of CheckedIn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckedInOption { get; private set; }

        /// <summary>
        /// Is there at least one checked-in passenger on this flight
        /// </summary>
        /// <value>Is there at least one checked-in passenger on this flight</value>
        [JsonPropertyName("checked_in")]
        public bool? CheckedIn { get { return this.CheckedInOption; } set { this.CheckedInOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CheckedInBags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckedInBagsOption { get; private set; }

        /// <summary>
        /// Is there at least one checked-in bag on this flight
        /// </summary>
        /// <value>Is there at least one checked-in bag on this flight</value>
        [JsonPropertyName("checked_in_bags")]
        public bool? CheckedInBags { get { return this.CheckedInBagsOption; } set { this.CheckedInBagsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CheckedBagAllowance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CheckedBagAllowanceOption { get; private set; }

        /// <summary>
        /// Is there a checked bag allowance on this flight
        /// </summary>
        /// <value>Is there a checked bag allowance on this flight</value>
        [JsonPropertyName("checked_bag_allowance")]
        public bool? CheckedBagAllowance { get { return this.CheckedBagAllowanceOption; } set { this.CheckedBagAllowanceOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Boarded
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> BoardedOption { get; private set; }

        /// <summary>
        /// Is there at least one passenger boarded on this flight
        /// </summary>
        /// <value>Is there at least one passenger boarded on this flight</value>
        [JsonPropertyName("boarded")]
        public bool? Boarded { get { return this.BoardedOption; } set { this.BoardedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Flown
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FlownOption { get; private set; }

        /// <summary>
        /// Is this segment flown already
        /// </summary>
        /// <value>Is this segment flown already</value>
        [JsonPropertyName("flown")]
        public bool? Flown { get { return this.FlownOption; } set { this.FlownOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DgExerciseItinerarySliceSegment {\n");
            sb.Append("  OriginAirport: ").Append(OriginAirport).Append("\n");
            sb.Append("  DestinationAirport: ").Append(DestinationAirport).Append("\n");
            sb.Append("  DepartureDateTime: ").Append(DepartureDateTime).Append("\n");
            sb.Append("  ArrivalDateTime: ").Append(ArrivalDateTime).Append("\n");
            sb.Append("  EstimatedDepartureDateTime: ").Append(EstimatedDepartureDateTime).Append("\n");
            sb.Append("  EstimatedArrivalDateTime: ").Append(EstimatedArrivalDateTime).Append("\n");
            sb.Append("  FlightNumber: ").Append(FlightNumber).Append("\n");
            sb.Append("  ValidatingCarrierCode: ").Append(ValidatingCarrierCode).Append("\n");
            sb.Append("  Cabin: ").Append(Cabin).Append("\n");
            sb.Append("  FlightStatus: ").Append(FlightStatus).Append("\n");
            sb.Append("  CheckedIn: ").Append(CheckedIn).Append("\n");
            sb.Append("  CheckedInBags: ").Append(CheckedInBags).Append("\n");
            sb.Append("  CheckedBagAllowance: ").Append(CheckedBagAllowance).Append("\n");
            sb.Append("  Boarded: ").Append(Boarded).Append("\n");
            sb.Append("  Flown: ").Append(Flown).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DgExerciseItinerarySliceSegment" />
    /// </summary>
    public class DgExerciseItinerarySliceSegmentJsonConverter : JsonConverter<DgExerciseItinerarySliceSegment>
    {
        /// <summary>
        /// Deserializes json to <see cref="DgExerciseItinerarySliceSegment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DgExerciseItinerarySliceSegment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> originAirport = default;
            Option<string?> destinationAirport = default;
            Option<string?> departureDateTime = default;
            Option<string?> arrivalDateTime = default;
            Option<string?> estimatedDepartureDateTime = default;
            Option<string?> estimatedArrivalDateTime = default;
            Option<string?> flightNumber = default;
            Option<string?> validatingCarrierCode = default;
            Option<Cabin?> cabin = default;
            Option<FlightStatus?> flightStatus = default;
            Option<bool?> checkedIn = default;
            Option<bool?> checkedInBags = default;
            Option<bool?> checkedBagAllowance = default;
            Option<bool?> boarded = default;
            Option<bool?> flown = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "origin_airport":
                            originAirport = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "destination_airport":
                            destinationAirport = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "departure_date_time":
                            departureDateTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "arrival_date_time":
                            arrivalDateTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "estimated_departure_date_time":
                            estimatedDepartureDateTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "estimated_arrival_date_time":
                            estimatedArrivalDateTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "flight_number":
                            flightNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "validating_carrier_code":
                            validatingCarrierCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "cabin":
                            string? cabinRawValue = utf8JsonReader.GetString();
                            if (cabinRawValue != null)
                                cabin = new Option<Cabin?>(CabinValueConverter.FromStringOrDefault(cabinRawValue));
                            break;
                        case "flight_status":
                            string? flightStatusRawValue = utf8JsonReader.GetString();
                            if (flightStatusRawValue != null)
                                flightStatus = new Option<FlightStatus?>(FlightStatusValueConverter.FromStringOrDefault(flightStatusRawValue));
                            break;
                        case "checked_in":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkedIn = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checked_in_bags":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkedInBags = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "checked_bag_allowance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkedBagAllowance = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "boarded":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                boarded = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "flown":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                flown = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!originAirport.IsSet)
                throw new ArgumentException("Property is required for class DgExerciseItinerarySliceSegment.", nameof(originAirport));

            if (!destinationAirport.IsSet)
                throw new ArgumentException("Property is required for class DgExerciseItinerarySliceSegment.", nameof(destinationAirport));

            if (!departureDateTime.IsSet)
                throw new ArgumentException("Property is required for class DgExerciseItinerarySliceSegment.", nameof(departureDateTime));

            if (!arrivalDateTime.IsSet)
                throw new ArgumentException("Property is required for class DgExerciseItinerarySliceSegment.", nameof(arrivalDateTime));

            if (!estimatedDepartureDateTime.IsSet)
                throw new ArgumentException("Property is required for class DgExerciseItinerarySliceSegment.", nameof(estimatedDepartureDateTime));

            if (!estimatedArrivalDateTime.IsSet)
                throw new ArgumentException("Property is required for class DgExerciseItinerarySliceSegment.", nameof(estimatedArrivalDateTime));

            if (!flightNumber.IsSet)
                throw new ArgumentException("Property is required for class DgExerciseItinerarySliceSegment.", nameof(flightNumber));

            if (!validatingCarrierCode.IsSet)
                throw new ArgumentException("Property is required for class DgExerciseItinerarySliceSegment.", nameof(validatingCarrierCode));

            if (!cabin.IsSet)
                throw new ArgumentException("Property is required for class DgExerciseItinerarySliceSegment.", nameof(cabin));

            if (!flightStatus.IsSet)
                throw new ArgumentException("Property is required for class DgExerciseItinerarySliceSegment.", nameof(flightStatus));

            if (originAirport.IsSet && originAirport.Value == null)
                throw new ArgumentNullException(nameof(originAirport), "Property is not nullable for class DgExerciseItinerarySliceSegment.");

            if (destinationAirport.IsSet && destinationAirport.Value == null)
                throw new ArgumentNullException(nameof(destinationAirport), "Property is not nullable for class DgExerciseItinerarySliceSegment.");

            if (departureDateTime.IsSet && departureDateTime.Value == null)
                throw new ArgumentNullException(nameof(departureDateTime), "Property is not nullable for class DgExerciseItinerarySliceSegment.");

            if (arrivalDateTime.IsSet && arrivalDateTime.Value == null)
                throw new ArgumentNullException(nameof(arrivalDateTime), "Property is not nullable for class DgExerciseItinerarySliceSegment.");

            if (estimatedDepartureDateTime.IsSet && estimatedDepartureDateTime.Value == null)
                throw new ArgumentNullException(nameof(estimatedDepartureDateTime), "Property is not nullable for class DgExerciseItinerarySliceSegment.");

            if (estimatedArrivalDateTime.IsSet && estimatedArrivalDateTime.Value == null)
                throw new ArgumentNullException(nameof(estimatedArrivalDateTime), "Property is not nullable for class DgExerciseItinerarySliceSegment.");

            if (flightNumber.IsSet && flightNumber.Value == null)
                throw new ArgumentNullException(nameof(flightNumber), "Property is not nullable for class DgExerciseItinerarySliceSegment.");

            if (validatingCarrierCode.IsSet && validatingCarrierCode.Value == null)
                throw new ArgumentNullException(nameof(validatingCarrierCode), "Property is not nullable for class DgExerciseItinerarySliceSegment.");

            if (cabin.IsSet && cabin.Value == null)
                throw new ArgumentNullException(nameof(cabin), "Property is not nullable for class DgExerciseItinerarySliceSegment.");

            if (flightStatus.IsSet && flightStatus.Value == null)
                throw new ArgumentNullException(nameof(flightStatus), "Property is not nullable for class DgExerciseItinerarySliceSegment.");

            if (checkedIn.IsSet && checkedIn.Value == null)
                throw new ArgumentNullException(nameof(checkedIn), "Property is not nullable for class DgExerciseItinerarySliceSegment.");

            if (checkedInBags.IsSet && checkedInBags.Value == null)
                throw new ArgumentNullException(nameof(checkedInBags), "Property is not nullable for class DgExerciseItinerarySliceSegment.");

            if (checkedBagAllowance.IsSet && checkedBagAllowance.Value == null)
                throw new ArgumentNullException(nameof(checkedBagAllowance), "Property is not nullable for class DgExerciseItinerarySliceSegment.");

            if (boarded.IsSet && boarded.Value == null)
                throw new ArgumentNullException(nameof(boarded), "Property is not nullable for class DgExerciseItinerarySliceSegment.");

            if (flown.IsSet && flown.Value == null)
                throw new ArgumentNullException(nameof(flown), "Property is not nullable for class DgExerciseItinerarySliceSegment.");

            return new DgExerciseItinerarySliceSegment(originAirport.Value!, destinationAirport.Value!, departureDateTime.Value!, arrivalDateTime.Value!, estimatedDepartureDateTime.Value!, estimatedArrivalDateTime.Value!, flightNumber.Value!, validatingCarrierCode.Value!, cabin.Value!.Value!, flightStatus.Value!.Value!, checkedIn, checkedInBags, checkedBagAllowance, boarded, flown);
        }

        /// <summary>
        /// Serializes a <see cref="DgExerciseItinerarySliceSegment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgExerciseItinerarySliceSegment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DgExerciseItinerarySliceSegment dgExerciseItinerarySliceSegment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dgExerciseItinerarySliceSegment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DgExerciseItinerarySliceSegment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgExerciseItinerarySliceSegment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DgExerciseItinerarySliceSegment dgExerciseItinerarySliceSegment, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dgExerciseItinerarySliceSegment.OriginAirport == null)
                throw new ArgumentNullException(nameof(dgExerciseItinerarySliceSegment.OriginAirport), "Property is required for class DgExerciseItinerarySliceSegment.");

            if (dgExerciseItinerarySliceSegment.DestinationAirport == null)
                throw new ArgumentNullException(nameof(dgExerciseItinerarySliceSegment.DestinationAirport), "Property is required for class DgExerciseItinerarySliceSegment.");

            if (dgExerciseItinerarySliceSegment.DepartureDateTime == null)
                throw new ArgumentNullException(nameof(dgExerciseItinerarySliceSegment.DepartureDateTime), "Property is required for class DgExerciseItinerarySliceSegment.");

            if (dgExerciseItinerarySliceSegment.ArrivalDateTime == null)
                throw new ArgumentNullException(nameof(dgExerciseItinerarySliceSegment.ArrivalDateTime), "Property is required for class DgExerciseItinerarySliceSegment.");

            if (dgExerciseItinerarySliceSegment.EstimatedDepartureDateTime == null)
                throw new ArgumentNullException(nameof(dgExerciseItinerarySliceSegment.EstimatedDepartureDateTime), "Property is required for class DgExerciseItinerarySliceSegment.");

            if (dgExerciseItinerarySliceSegment.EstimatedArrivalDateTime == null)
                throw new ArgumentNullException(nameof(dgExerciseItinerarySliceSegment.EstimatedArrivalDateTime), "Property is required for class DgExerciseItinerarySliceSegment.");

            if (dgExerciseItinerarySliceSegment.FlightNumber == null)
                throw new ArgumentNullException(nameof(dgExerciseItinerarySliceSegment.FlightNumber), "Property is required for class DgExerciseItinerarySliceSegment.");

            if (dgExerciseItinerarySliceSegment.ValidatingCarrierCode == null)
                throw new ArgumentNullException(nameof(dgExerciseItinerarySliceSegment.ValidatingCarrierCode), "Property is required for class DgExerciseItinerarySliceSegment.");

            writer.WriteString("origin_airport", dgExerciseItinerarySliceSegment.OriginAirport);

            writer.WriteString("destination_airport", dgExerciseItinerarySliceSegment.DestinationAirport);

            writer.WriteString("departure_date_time", dgExerciseItinerarySliceSegment.DepartureDateTime);

            writer.WriteString("arrival_date_time", dgExerciseItinerarySliceSegment.ArrivalDateTime);

            writer.WriteString("estimated_departure_date_time", dgExerciseItinerarySliceSegment.EstimatedDepartureDateTime);

            writer.WriteString("estimated_arrival_date_time", dgExerciseItinerarySliceSegment.EstimatedArrivalDateTime);

            writer.WriteString("flight_number", dgExerciseItinerarySliceSegment.FlightNumber);

            writer.WriteString("validating_carrier_code", dgExerciseItinerarySliceSegment.ValidatingCarrierCode);

            var cabinRawValue = CabinValueConverter.ToJsonValue(dgExerciseItinerarySliceSegment.Cabin);
            writer.WriteString("cabin", cabinRawValue);

            var flightStatusRawValue = FlightStatusValueConverter.ToJsonValue(dgExerciseItinerarySliceSegment.FlightStatus);
            writer.WriteString("flight_status", flightStatusRawValue);

            if (dgExerciseItinerarySliceSegment.CheckedInOption.IsSet)
                writer.WriteBoolean("checked_in", dgExerciseItinerarySliceSegment.CheckedInOption.Value!.Value);

            if (dgExerciseItinerarySliceSegment.CheckedInBagsOption.IsSet)
                writer.WriteBoolean("checked_in_bags", dgExerciseItinerarySliceSegment.CheckedInBagsOption.Value!.Value);

            if (dgExerciseItinerarySliceSegment.CheckedBagAllowanceOption.IsSet)
                writer.WriteBoolean("checked_bag_allowance", dgExerciseItinerarySliceSegment.CheckedBagAllowanceOption.Value!.Value);

            if (dgExerciseItinerarySliceSegment.BoardedOption.IsSet)
                writer.WriteBoolean("boarded", dgExerciseItinerarySliceSegment.BoardedOption.Value!.Value);

            if (dgExerciseItinerarySliceSegment.FlownOption.IsSet)
                writer.WriteBoolean("flown", dgExerciseItinerarySliceSegment.FlownOption.Value!.Value);
        }
    }
}
