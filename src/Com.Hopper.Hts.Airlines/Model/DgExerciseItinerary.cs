/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Hopper.Hts.Airlines.Client.OpenAPIDateConverter;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// Itinerary of the user when the contract exercise was initiated (only active segments should be provided)
    /// </summary>
    [DataContract(Name = "dg_exercise_itinerary")]
    public partial class DgExerciseItinerary : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DgExerciseItinerary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DgExerciseItinerary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DgExerciseItinerary" /> class.
        /// </summary>
        /// <param name="passengerCount">List of passengers type and count for the itinerary (required).</param>
        /// <param name="slices">List of slices of the itinerary; 1 (one way),  2 (round trip) or up to 10 (multi-destination) slices are allowed (required).</param>
        /// <param name="passengers">Details of the passengers.</param>
        public DgExerciseItinerary(List<DgPassengerCount> passengerCount = default(List<DgPassengerCount>), List<DgExerciseItinerarySlice> slices = default(List<DgExerciseItinerarySlice>), List<DgPassenger> passengers = default(List<DgPassenger>))
        {
            // to ensure "passengerCount" is required (not null)
            if (passengerCount == null)
            {
                throw new ArgumentNullException("passengerCount is a required property for DgExerciseItinerary and cannot be null");
            }
            this.PassengerCount = passengerCount;
            // to ensure "slices" is required (not null)
            if (slices == null)
            {
                throw new ArgumentNullException("slices is a required property for DgExerciseItinerary and cannot be null");
            }
            this.Slices = slices;
            this.Passengers = passengers;
        }

        /// <summary>
        /// List of passengers type and count for the itinerary
        /// </summary>
        /// <value>List of passengers type and count for the itinerary</value>
        [DataMember(Name = "passenger_count", IsRequired = true, EmitDefaultValue = true)]
        public List<DgPassengerCount> PassengerCount { get; set; }

        /// <summary>
        /// List of slices of the itinerary; 1 (one way),  2 (round trip) or up to 10 (multi-destination) slices are allowed
        /// </summary>
        /// <value>List of slices of the itinerary; 1 (one way),  2 (round trip) or up to 10 (multi-destination) slices are allowed</value>
        [DataMember(Name = "slices", IsRequired = true, EmitDefaultValue = true)]
        public List<DgExerciseItinerarySlice> Slices { get; set; }

        /// <summary>
        /// Details of the passengers
        /// </summary>
        /// <value>Details of the passengers</value>
        [DataMember(Name = "passengers", EmitDefaultValue = true)]
        public List<DgPassenger> Passengers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DgExerciseItinerary {\n");
            sb.Append("  PassengerCount: ").Append(PassengerCount).Append("\n");
            sb.Append("  Slices: ").Append(Slices).Append("\n");
            sb.Append("  Passengers: ").Append(Passengers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
