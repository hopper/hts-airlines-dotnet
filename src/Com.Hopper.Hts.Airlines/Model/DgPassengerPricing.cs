// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// DgPassengerPricing
    /// </summary>
    public partial class DgPassengerPricing
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DgPassengerPricing" /> class.
        /// </summary>
        /// <param name="passengerCount">passengerCount</param>
        /// <param name="individualPrice">Price per passenger</param>
        /// <param name="taxes">Taxes applicable to this itinerary</param>
        [JsonConstructor]
        public DgPassengerPricing(PassengerCount passengerCount, string individualPrice, Option<List<DgPassengerTax>?> taxes = default)
        {
            PassengerCount = passengerCount;
            IndividualPrice = individualPrice;
            TaxesOption = taxes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets PassengerCount
        /// </summary>
        [JsonPropertyName("passenger_count")]
        public PassengerCount PassengerCount { get; set; }

        /// <summary>
        /// Price per passenger
        /// </summary>
        /// <value>Price per passenger</value>
        /* <example>20.55</example> */
        [JsonPropertyName("individual_price")]
        public string IndividualPrice { get; set; }

        /// <summary>
        /// Used to track the state of Taxes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DgPassengerTax>?> TaxesOption { get; private set; }

        /// <summary>
        /// Taxes applicable to this itinerary
        /// </summary>
        /// <value>Taxes applicable to this itinerary</value>
        [JsonPropertyName("taxes")]
        public List<DgPassengerTax>? Taxes { get { return this.TaxesOption; } set { this.TaxesOption = new Option<List<DgPassengerTax>?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DgPassengerPricing {\n");
            sb.Append("  PassengerCount: ").Append(PassengerCount).Append("\n");
            sb.Append("  IndividualPrice: ").Append(IndividualPrice).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DgPassengerPricing" />
    /// </summary>
    public class DgPassengerPricingJsonConverter : JsonConverter<DgPassengerPricing>
    {
        /// <summary>
        /// Deserializes json to <see cref="DgPassengerPricing" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DgPassengerPricing Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<PassengerCount?> passengerCount = default;
            Option<string?> individualPrice = default;
            Option<List<DgPassengerTax>?> taxes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "passenger_count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                passengerCount = new Option<PassengerCount?>(JsonSerializer.Deserialize<PassengerCount>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "individual_price":
                            individualPrice = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "taxes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                taxes = new Option<List<DgPassengerTax>?>(JsonSerializer.Deserialize<List<DgPassengerTax>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!passengerCount.IsSet)
                throw new ArgumentException("Property is required for class DgPassengerPricing.", nameof(passengerCount));

            if (!individualPrice.IsSet)
                throw new ArgumentException("Property is required for class DgPassengerPricing.", nameof(individualPrice));

            if (passengerCount.IsSet && passengerCount.Value == null)
                throw new ArgumentNullException(nameof(passengerCount), "Property is not nullable for class DgPassengerPricing.");

            if (individualPrice.IsSet && individualPrice.Value == null)
                throw new ArgumentNullException(nameof(individualPrice), "Property is not nullable for class DgPassengerPricing.");

            if (taxes.IsSet && taxes.Value == null)
                throw new ArgumentNullException(nameof(taxes), "Property is not nullable for class DgPassengerPricing.");

            return new DgPassengerPricing(passengerCount.Value!, individualPrice.Value!, taxes);
        }

        /// <summary>
        /// Serializes a <see cref="DgPassengerPricing" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgPassengerPricing"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DgPassengerPricing dgPassengerPricing, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dgPassengerPricing, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DgPassengerPricing" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgPassengerPricing"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DgPassengerPricing dgPassengerPricing, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dgPassengerPricing.PassengerCount == null)
                throw new ArgumentNullException(nameof(dgPassengerPricing.PassengerCount), "Property is required for class DgPassengerPricing.");

            if (dgPassengerPricing.IndividualPrice == null)
                throw new ArgumentNullException(nameof(dgPassengerPricing.IndividualPrice), "Property is required for class DgPassengerPricing.");

            if (dgPassengerPricing.TaxesOption.IsSet && dgPassengerPricing.Taxes == null)
                throw new ArgumentNullException(nameof(dgPassengerPricing.Taxes), "Property is required for class DgPassengerPricing.");

            writer.WritePropertyName("passenger_count");
            JsonSerializer.Serialize(writer, dgPassengerPricing.PassengerCount, jsonSerializerOptions);
            writer.WriteString("individual_price", dgPassengerPricing.IndividualPrice);

            if (dgPassengerPricing.TaxesOption.IsSet)
            {
                writer.WritePropertyName("taxes");
                JsonSerializer.Serialize(writer, dgPassengerPricing.Taxes, jsonSerializerOptions);
            }
        }
    }
}
