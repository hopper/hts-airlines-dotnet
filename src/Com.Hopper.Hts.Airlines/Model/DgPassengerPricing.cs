/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Hopper.Hts.Airlines.Client.OpenAPIDateConverter;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// DgPassengerPricing
    /// </summary>
    [DataContract(Name = "dg_passenger_pricing")]
    public partial class DgPassengerPricing : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DgPassengerPricing" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DgPassengerPricing() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DgPassengerPricing" /> class.
        /// </summary>
        /// <param name="passengerCount">passengerCount (required).</param>
        /// <param name="individualPrice">Price per passenger (required).</param>
        /// <param name="taxes">Taxes applicable to this itinerary.</param>
        public DgPassengerPricing(PassengerCount passengerCount = default(PassengerCount), string individualPrice = default(string), List<DgPassengerTax> taxes = default(List<DgPassengerTax>))
        {
            // to ensure "passengerCount" is required (not null)
            if (passengerCount == null)
            {
                throw new ArgumentNullException("passengerCount is a required property for DgPassengerPricing and cannot be null");
            }
            this.PassengerCount = passengerCount;
            // to ensure "individualPrice" is required (not null)
            if (individualPrice == null)
            {
                throw new ArgumentNullException("individualPrice is a required property for DgPassengerPricing and cannot be null");
            }
            this.IndividualPrice = individualPrice;
            this.Taxes = taxes;
        }

        /// <summary>
        /// Gets or Sets PassengerCount
        /// </summary>
        [DataMember(Name = "passenger_count", IsRequired = true, EmitDefaultValue = true)]
        public PassengerCount PassengerCount { get; set; }

        /// <summary>
        /// Price per passenger
        /// </summary>
        /// <value>Price per passenger</value>
        /*
        <example>20.55</example>
        */
        [DataMember(Name = "individual_price", IsRequired = true, EmitDefaultValue = true)]
        public string IndividualPrice { get; set; }

        /// <summary>
        /// Taxes applicable to this itinerary
        /// </summary>
        /// <value>Taxes applicable to this itinerary</value>
        [DataMember(Name = "taxes", EmitDefaultValue = true)]
        public List<DgPassengerTax> Taxes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DgPassengerPricing {\n");
            sb.Append("  PassengerCount: ").Append(PassengerCount).Append("\n");
            sb.Append("  IndividualPrice: ").Append(IndividualPrice).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
