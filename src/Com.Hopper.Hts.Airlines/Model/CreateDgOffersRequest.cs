// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// A create DG offers request
    /// </summary>
    public partial class CreateDgOffersRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDgOffersRequest" /> class.
        /// </summary>
        /// <param name="itinerary">An object detailing the itinerary and fare used to create a DG offer</param>
        /// <param name="requestType">requestType</param>
        /// <param name="extAttributes">extAttributes</param>
        /// <param name="bookingDateTime">A UTC RFC3339 datetime; the date and time at which the booking was made. To be used only with the request type \&quot;post_booking\&quot;</param>
        /// <param name="session">session</param>
        [JsonConstructor]
        public CreateDgOffersRequest(List<DgItinerary> itinerary, DgRequestType requestType, Dictionary<string, string> extAttributes, Option<DateTime?> bookingDateTime = default, Option<CreateAirlineDgSessionRequest?> session = default)
        {
            Itinerary = itinerary;
            RequestType = requestType;
            ExtAttributes = extAttributes;
            BookingDateTimeOption = bookingDateTime;
            SessionOption = session;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets RequestType
        /// </summary>
        [JsonPropertyName("request_type")]
        public DgRequestType RequestType { get; set; }

        /// <summary>
        /// An object detailing the itinerary and fare used to create a DG offer
        /// </summary>
        /// <value>An object detailing the itinerary and fare used to create a DG offer</value>
        [JsonPropertyName("itinerary")]
        public List<DgItinerary> Itinerary { get; set; }

        /// <summary>
        /// Gets or Sets ExtAttributes
        /// </summary>
        [JsonPropertyName("ext_attributes")]
        public Dictionary<string, string> ExtAttributes { get; set; }

        /// <summary>
        /// Used to track the state of BookingDateTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> BookingDateTimeOption { get; private set; }

        /// <summary>
        /// A UTC RFC3339 datetime; the date and time at which the booking was made. To be used only with the request type \&quot;post_booking\&quot;
        /// </summary>
        /// <value>A UTC RFC3339 datetime; the date and time at which the booking was made. To be used only with the request type \&quot;post_booking\&quot;</value>
        /* <example>2022-01-01T18:30Z</example> */
        [JsonPropertyName("booking_date_time")]
        public DateTime? BookingDateTime { get { return this.BookingDateTimeOption; } set { this.BookingDateTimeOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Session
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateAirlineDgSessionRequest?> SessionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Session
        /// </summary>
        [JsonPropertyName("session")]
        public CreateAirlineDgSessionRequest? Session { get { return this.SessionOption; } set { this.SessionOption = new Option<CreateAirlineDgSessionRequest?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateDgOffersRequest {\n");
            sb.Append("  Itinerary: ").Append(Itinerary).Append("\n");
            sb.Append("  RequestType: ").Append(RequestType).Append("\n");
            sb.Append("  ExtAttributes: ").Append(ExtAttributes).Append("\n");
            sb.Append("  BookingDateTime: ").Append(BookingDateTime).Append("\n");
            sb.Append("  Session: ").Append(Session).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateDgOffersRequest" />
    /// </summary>
    public class CreateDgOffersRequestJsonConverter : JsonConverter<CreateDgOffersRequest>
    {
        /// <summary>
        /// The format to use to serialize BookingDateTime
        /// </summary>
        public static string BookingDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CreateDgOffersRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateDgOffersRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<DgItinerary>?> itinerary = default;
            Option<DgRequestType?> requestType = default;
            Option<Dictionary<string, string>?> extAttributes = default;
            Option<DateTime?> bookingDateTime = default;
            Option<CreateAirlineDgSessionRequest?> session = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "itinerary":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                itinerary = new Option<List<DgItinerary>?>(JsonSerializer.Deserialize<List<DgItinerary>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "request_type":
                            string? requestTypeRawValue = utf8JsonReader.GetString();
                            if (requestTypeRawValue != null)
                                requestType = new Option<DgRequestType?>(DgRequestTypeValueConverter.FromStringOrDefault(requestTypeRawValue));
                            break;
                        case "ext_attributes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                extAttributes = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "booking_date_time":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bookingDateTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "session":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                session = new Option<CreateAirlineDgSessionRequest?>(JsonSerializer.Deserialize<CreateAirlineDgSessionRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!itinerary.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOffersRequest.", nameof(itinerary));

            if (!requestType.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOffersRequest.", nameof(requestType));

            if (!extAttributes.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOffersRequest.", nameof(extAttributes));

            if (itinerary.IsSet && itinerary.Value == null)
                throw new ArgumentNullException(nameof(itinerary), "Property is not nullable for class CreateDgOffersRequest.");

            if (requestType.IsSet && requestType.Value == null)
                throw new ArgumentNullException(nameof(requestType), "Property is not nullable for class CreateDgOffersRequest.");

            if (extAttributes.IsSet && extAttributes.Value == null)
                throw new ArgumentNullException(nameof(extAttributes), "Property is not nullable for class CreateDgOffersRequest.");

            if (bookingDateTime.IsSet && bookingDateTime.Value == null)
                throw new ArgumentNullException(nameof(bookingDateTime), "Property is not nullable for class CreateDgOffersRequest.");

            if (session.IsSet && session.Value == null)
                throw new ArgumentNullException(nameof(session), "Property is not nullable for class CreateDgOffersRequest.");

            return new CreateDgOffersRequest(itinerary.Value!, requestType.Value!.Value!, extAttributes.Value!, bookingDateTime, session);
        }

        /// <summary>
        /// Serializes a <see cref="CreateDgOffersRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createDgOffersRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateDgOffersRequest createDgOffersRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createDgOffersRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateDgOffersRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createDgOffersRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateDgOffersRequest createDgOffersRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createDgOffersRequest.Itinerary == null)
                throw new ArgumentNullException(nameof(createDgOffersRequest.Itinerary), "Property is required for class CreateDgOffersRequest.");

            if (createDgOffersRequest.ExtAttributes == null)
                throw new ArgumentNullException(nameof(createDgOffersRequest.ExtAttributes), "Property is required for class CreateDgOffersRequest.");

            if (createDgOffersRequest.SessionOption.IsSet && createDgOffersRequest.Session == null)
                throw new ArgumentNullException(nameof(createDgOffersRequest.Session), "Property is required for class CreateDgOffersRequest.");

            writer.WritePropertyName("itinerary");
            JsonSerializer.Serialize(writer, createDgOffersRequest.Itinerary, jsonSerializerOptions);
            var requestTypeRawValue = DgRequestTypeValueConverter.ToJsonValue(createDgOffersRequest.RequestType);
            writer.WriteString("request_type", requestTypeRawValue);

            writer.WritePropertyName("ext_attributes");
            JsonSerializer.Serialize(writer, createDgOffersRequest.ExtAttributes, jsonSerializerOptions);
            if (createDgOffersRequest.BookingDateTimeOption.IsSet)
                writer.WriteString("booking_date_time", createDgOffersRequest.BookingDateTimeOption.Value!.Value.ToString(BookingDateTimeFormat));

            if (createDgOffersRequest.SessionOption.IsSet)
            {
                writer.WritePropertyName("session");
                JsonSerializer.Serialize(writer, createDgOffersRequest.Session, jsonSerializerOptions);
            }
        }
    }
}
