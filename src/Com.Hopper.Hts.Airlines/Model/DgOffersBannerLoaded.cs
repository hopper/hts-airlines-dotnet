// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// DgOffersBannerLoaded
    /// </summary>
    public partial class DgOffersBannerLoaded
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DgOffersBannerLoaded" /> class.
        /// </summary>
        /// <param name="occurredDateTime">A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime;  the date and time at which an event occurred on a client device</param>
        /// <param name="dgOfferIds">dgOfferIds</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public DgOffersBannerLoaded(DateTime occurredDateTime, List<string> dgOfferIds, string type)
        {
            OccurredDateTime = occurredDateTime;
            DgOfferIds = dgOfferIds;
            Type = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime;  the date and time at which an event occurred on a client device
        /// </summary>
        /// <value>A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime;  the date and time at which an event occurred on a client device</value>
        /* <example>2022-01-24T15:34:30Z</example> */
        [JsonPropertyName("occurred_date_time")]
        public DateTime OccurredDateTime { get; set; }

        /// <summary>
        /// Gets or Sets DgOfferIds
        /// </summary>
        [JsonPropertyName("dg_offer_ids")]
        public List<string> DgOfferIds { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DgOffersBannerLoaded {\n");
            sb.Append("  OccurredDateTime: ").Append(OccurredDateTime).Append("\n");
            sb.Append("  DgOfferIds: ").Append(DgOfferIds).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DgOffersBannerLoaded" />
    /// </summary>
    public class DgOffersBannerLoadedJsonConverter : JsonConverter<DgOffersBannerLoaded>
    {
        /// <summary>
        /// The format to use to serialize OccurredDateTime
        /// </summary>
        public static string OccurredDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DgOffersBannerLoaded" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DgOffersBannerLoaded Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> occurredDateTime = default;
            Option<List<string>?> dgOfferIds = default;
            Option<string?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "occurred_date_time":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                occurredDateTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dg_offer_ids":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dgOfferIds = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!occurredDateTime.IsSet)
                throw new ArgumentException("Property is required for class DgOffersBannerLoaded.", nameof(occurredDateTime));

            if (!dgOfferIds.IsSet)
                throw new ArgumentException("Property is required for class DgOffersBannerLoaded.", nameof(dgOfferIds));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class DgOffersBannerLoaded.", nameof(type));

            if (occurredDateTime.IsSet && occurredDateTime.Value == null)
                throw new ArgumentNullException(nameof(occurredDateTime), "Property is not nullable for class DgOffersBannerLoaded.");

            if (dgOfferIds.IsSet && dgOfferIds.Value == null)
                throw new ArgumentNullException(nameof(dgOfferIds), "Property is not nullable for class DgOffersBannerLoaded.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class DgOffersBannerLoaded.");

            return new DgOffersBannerLoaded(occurredDateTime.Value!.Value!, dgOfferIds.Value!, type.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="DgOffersBannerLoaded" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgOffersBannerLoaded"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DgOffersBannerLoaded dgOffersBannerLoaded, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dgOffersBannerLoaded, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DgOffersBannerLoaded" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgOffersBannerLoaded"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DgOffersBannerLoaded dgOffersBannerLoaded, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dgOffersBannerLoaded.DgOfferIds == null)
                throw new ArgumentNullException(nameof(dgOffersBannerLoaded.DgOfferIds), "Property is required for class DgOffersBannerLoaded.");

            if (dgOffersBannerLoaded.Type == null)
                throw new ArgumentNullException(nameof(dgOffersBannerLoaded.Type), "Property is required for class DgOffersBannerLoaded.");

            writer.WriteString("occurred_date_time", dgOffersBannerLoaded.OccurredDateTime.ToString(OccurredDateTimeFormat));

            writer.WritePropertyName("dg_offer_ids");
            JsonSerializer.Serialize(writer, dgOffersBannerLoaded.DgOfferIds, jsonSerializerOptions);
            writer.WriteString("type", dgOffersBannerLoaded.Type);
        }
    }
}
