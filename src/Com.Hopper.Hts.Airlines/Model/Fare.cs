// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// Fare
    /// </summary>
    public partial class Fare
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Fare" /> class.
        /// </summary>
        /// <param name="price">The price of the slice for all the passengers with this fare</param>
        /// <param name="fareBrand">Name of the fare brand of this fare</param>
        /// <param name="fareBasis">Code of the fare basis applied to this fare</param>
        /// <param name="fareRules">The fare rules associated to the fare</param>
        [JsonConstructor]
        public Fare(Option<string?> price = default, Option<string?> fareBrand = default, Option<string?> fareBasis = default, Option<List<FareRule>?> fareRules = default)
        {
            PriceOption = price;
            FareBrandOption = fareBrand;
            FareBasisOption = fareBasis;
            FareRulesOption = fareRules;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Price
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PriceOption { get; private set; }

        /// <summary>
        /// The price of the slice for all the passengers with this fare
        /// </summary>
        /// <value>The price of the slice for all the passengers with this fare</value>
        /* <example>401.10</example> */
        [JsonPropertyName("price")]
        public string? Price { get { return this.PriceOption; } set { this.PriceOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FareBrand
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FareBrandOption { get; private set; }

        /// <summary>
        /// Name of the fare brand of this fare
        /// </summary>
        /// <value>Name of the fare brand of this fare</value>
        /* <example>flex</example> */
        [JsonPropertyName("fare_brand")]
        public string? FareBrand { get { return this.FareBrandOption; } set { this.FareBrandOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FareBasis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FareBasisOption { get; private set; }

        /// <summary>
        /// Code of the fare basis applied to this fare
        /// </summary>
        /// <value>Code of the fare basis applied to this fare</value>
        /* <example>YBA123US</example> */
        [JsonPropertyName("fare_basis")]
        public string? FareBasis { get { return this.FareBasisOption; } set { this.FareBasisOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FareRules
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<FareRule>?> FareRulesOption { get; private set; }

        /// <summary>
        /// The fare rules associated to the fare
        /// </summary>
        /// <value>The fare rules associated to the fare</value>
        [JsonPropertyName("fare_rules")]
        public List<FareRule>? FareRules { get { return this.FareRulesOption; } set { this.FareRulesOption = new Option<List<FareRule>?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Fare {\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  FareBrand: ").Append(FareBrand).Append("\n");
            sb.Append("  FareBasis: ").Append(FareBasis).Append("\n");
            sb.Append("  FareRules: ").Append(FareRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Fare" />
    /// </summary>
    public class FareJsonConverter : JsonConverter<Fare>
    {
        /// <summary>
        /// Deserializes json to <see cref="Fare" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Fare Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> price = default;
            Option<string?> fareBrand = default;
            Option<string?> fareBasis = default;
            Option<List<FareRule>?> fareRules = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "price":
                            price = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fare_brand":
                            fareBrand = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fare_basis":
                            fareBasis = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fare_rules":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fareRules = new Option<List<FareRule>?>(JsonSerializer.Deserialize<List<FareRule>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (price.IsSet && price.Value == null)
                throw new ArgumentNullException(nameof(price), "Property is not nullable for class Fare.");

            if (fareBrand.IsSet && fareBrand.Value == null)
                throw new ArgumentNullException(nameof(fareBrand), "Property is not nullable for class Fare.");

            if (fareBasis.IsSet && fareBasis.Value == null)
                throw new ArgumentNullException(nameof(fareBasis), "Property is not nullable for class Fare.");

            if (fareRules.IsSet && fareRules.Value == null)
                throw new ArgumentNullException(nameof(fareRules), "Property is not nullable for class Fare.");

            return new Fare(price, fareBrand, fareBasis, fareRules);
        }

        /// <summary>
        /// Serializes a <see cref="Fare" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fare"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Fare fare, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fare, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Fare" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fare"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Fare fare, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fare.PriceOption.IsSet && fare.Price == null)
                throw new ArgumentNullException(nameof(fare.Price), "Property is required for class Fare.");

            if (fare.FareBrandOption.IsSet && fare.FareBrand == null)
                throw new ArgumentNullException(nameof(fare.FareBrand), "Property is required for class Fare.");

            if (fare.FareBasisOption.IsSet && fare.FareBasis == null)
                throw new ArgumentNullException(nameof(fare.FareBasis), "Property is required for class Fare.");

            if (fare.FareRulesOption.IsSet && fare.FareRules == null)
                throw new ArgumentNullException(nameof(fare.FareRules), "Property is required for class Fare.");

            if (fare.PriceOption.IsSet)
                writer.WriteString("price", fare.Price);

            if (fare.FareBrandOption.IsSet)
                writer.WriteString("fare_brand", fare.FareBrand);

            if (fare.FareBasisOption.IsSet)
                writer.WriteString("fare_basis", fare.FareBasis);

            if (fare.FareRulesOption.IsSet)
            {
                writer.WritePropertyName("fare_rules");
                JsonSerializer.Serialize(writer, fare.FareRules, jsonSerializerOptions);
            }
        }
    }
}
