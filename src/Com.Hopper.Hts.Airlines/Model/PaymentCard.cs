// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// PaymentCard
    /// </summary>
    public partial class PaymentCard
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentCard" /> class.
        /// </summary>
        /// <param name="amount">Amount charged on the form of payment</param>
        /// <param name="currency">Currency of the form of payment</param>
        /// <param name="type">type</param>
        /// <param name="token">Token of the payment card generated by HTS Payment Gateway</param>
        /// <param name="lastFourDigits">Last four digits of the payment card</param>
        /// <param name="expirationMonth">the expiry month of the payment card</param>
        /// <param name="expirationYear">the expiry year of the payment card</param>
        [JsonConstructor]
        public PaymentCard(string amount, string currency, string type, Option<string?> token = default, Option<string?> lastFourDigits = default, Option<string?> expirationMonth = default, Option<string?> expirationYear = default)
        {
            Amount = amount;
            Currency = currency;
            Type = type;
            TokenOption = token;
            LastFourDigitsOption = lastFourDigits;
            ExpirationMonthOption = expirationMonth;
            ExpirationYearOption = expirationYear;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Amount charged on the form of payment
        /// </summary>
        /// <value>Amount charged on the form of payment</value>
        [JsonPropertyName("amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Currency of the form of payment
        /// </summary>
        /// <value>Currency of the form of payment</value>
        /* <example>CAD</example> */
        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Used to track the state of Token
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TokenOption { get; private set; }

        /// <summary>
        /// Token of the payment card generated by HTS Payment Gateway
        /// </summary>
        /// <value>Token of the payment card generated by HTS Payment Gateway</value>
        [JsonPropertyName("token")]
        public string? Token { get { return this.TokenOption; } set { this.TokenOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of LastFourDigits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastFourDigitsOption { get; private set; }

        /// <summary>
        /// Last four digits of the payment card
        /// </summary>
        /// <value>Last four digits of the payment card</value>
        [JsonPropertyName("last_four_digits")]
        public string? LastFourDigits { get { return this.LastFourDigitsOption; } set { this.LastFourDigitsOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ExpirationMonth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpirationMonthOption { get; private set; }

        /// <summary>
        /// the expiry month of the payment card
        /// </summary>
        /// <value>the expiry month of the payment card</value>
        /* <example>09</example> */
        [JsonPropertyName("expiration_month")]
        public string? ExpirationMonth { get { return this.ExpirationMonthOption; } set { this.ExpirationMonthOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ExpirationYear
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpirationYearOption { get; private set; }

        /// <summary>
        /// the expiry year of the payment card
        /// </summary>
        /// <value>the expiry year of the payment card</value>
        /* <example>26</example> */
        [JsonPropertyName("expiration_year")]
        public string? ExpirationYear { get { return this.ExpirationYearOption; } set { this.ExpirationYearOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentCard {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  LastFourDigits: ").Append(LastFourDigits).Append("\n");
            sb.Append("  ExpirationMonth: ").Append(ExpirationMonth).Append("\n");
            sb.Append("  ExpirationYear: ").Append(ExpirationYear).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentCard" />
    /// </summary>
    public class PaymentCardJsonConverter : JsonConverter<PaymentCard>
    {
        /// <summary>
        /// Deserializes json to <see cref="PaymentCard" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PaymentCard Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> amount = default;
            Option<string?> currency = default;
            Option<string?> type = default;
            Option<string?> token = default;
            Option<string?> lastFourDigits = default;
            Option<string?> expirationMonth = default;
            Option<string?> expirationYear = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            amount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency":
                            currency = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "token":
                            token = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_four_digits":
                            lastFourDigits = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expiration_month":
                            expirationMonth = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expiration_year":
                            expirationYear = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class PaymentCard.", nameof(amount));

            if (!currency.IsSet)
                throw new ArgumentException("Property is required for class PaymentCard.", nameof(currency));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class PaymentCard.", nameof(type));

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class PaymentCard.");

            if (currency.IsSet && currency.Value == null)
                throw new ArgumentNullException(nameof(currency), "Property is not nullable for class PaymentCard.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PaymentCard.");

            if (token.IsSet && token.Value == null)
                throw new ArgumentNullException(nameof(token), "Property is not nullable for class PaymentCard.");

            if (lastFourDigits.IsSet && lastFourDigits.Value == null)
                throw new ArgumentNullException(nameof(lastFourDigits), "Property is not nullable for class PaymentCard.");

            if (expirationMonth.IsSet && expirationMonth.Value == null)
                throw new ArgumentNullException(nameof(expirationMonth), "Property is not nullable for class PaymentCard.");

            if (expirationYear.IsSet && expirationYear.Value == null)
                throw new ArgumentNullException(nameof(expirationYear), "Property is not nullable for class PaymentCard.");

            return new PaymentCard(amount.Value!, currency.Value!, type.Value!, token, lastFourDigits, expirationMonth, expirationYear);
        }

        /// <summary>
        /// Serializes a <see cref="PaymentCard" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentCard"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PaymentCard paymentCard, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, paymentCard, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PaymentCard" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentCard"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PaymentCard paymentCard, JsonSerializerOptions jsonSerializerOptions)
        {
            if (paymentCard.Amount == null)
                throw new ArgumentNullException(nameof(paymentCard.Amount), "Property is required for class PaymentCard.");

            if (paymentCard.Currency == null)
                throw new ArgumentNullException(nameof(paymentCard.Currency), "Property is required for class PaymentCard.");

            if (paymentCard.Type == null)
                throw new ArgumentNullException(nameof(paymentCard.Type), "Property is required for class PaymentCard.");

            if (paymentCard.TokenOption.IsSet && paymentCard.Token == null)
                throw new ArgumentNullException(nameof(paymentCard.Token), "Property is required for class PaymentCard.");

            if (paymentCard.LastFourDigitsOption.IsSet && paymentCard.LastFourDigits == null)
                throw new ArgumentNullException(nameof(paymentCard.LastFourDigits), "Property is required for class PaymentCard.");

            if (paymentCard.ExpirationMonthOption.IsSet && paymentCard.ExpirationMonth == null)
                throw new ArgumentNullException(nameof(paymentCard.ExpirationMonth), "Property is required for class PaymentCard.");

            if (paymentCard.ExpirationYearOption.IsSet && paymentCard.ExpirationYear == null)
                throw new ArgumentNullException(nameof(paymentCard.ExpirationYear), "Property is required for class PaymentCard.");

            writer.WriteString("amount", paymentCard.Amount);

            writer.WriteString("currency", paymentCard.Currency);

            writer.WriteString("type", paymentCard.Type);

            if (paymentCard.TokenOption.IsSet)
                writer.WriteString("token", paymentCard.Token);

            if (paymentCard.LastFourDigitsOption.IsSet)
                writer.WriteString("last_four_digits", paymentCard.LastFourDigits);

            if (paymentCard.ExpirationMonthOption.IsSet)
                writer.WriteString("expiration_month", paymentCard.ExpirationMonth);

            if (paymentCard.ExpirationYearOption.IsSet)
                writer.WriteString("expiration_year", paymentCard.ExpirationYear);
        }
    }
}
