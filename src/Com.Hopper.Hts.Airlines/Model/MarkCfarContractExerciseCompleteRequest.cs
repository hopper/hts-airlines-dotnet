// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// An update CFAR contract exercise request
    /// </summary>
    public partial class MarkCfarContractExerciseCompleteRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarkCfarContractExerciseCompleteRequest" /> class.
        /// </summary>
        /// <param name="refundAmount">Amount refunded to the customer</param>
        /// <param name="refundMethod">refundMethod</param>
        [JsonConstructor]
        public MarkCfarContractExerciseCompleteRequest(Option<string?> refundAmount = default, Option<AirlineRefundMethod?> refundMethod = default)
        {
            RefundAmountOption = refundAmount;
            RefundMethodOption = refundMethod;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of RefundMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AirlineRefundMethod?> RefundMethodOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefundMethod
        /// </summary>
        [JsonPropertyName("refund_method")]
        public AirlineRefundMethod? RefundMethod { get { return this.RefundMethodOption; } set { this.RefundMethodOption = new Option<AirlineRefundMethod?>(value); } }

        /// <summary>
        /// Used to track the state of RefundAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RefundAmountOption { get; private set; }

        /// <summary>
        /// Amount refunded to the customer
        /// </summary>
        /// <value>Amount refunded to the customer</value>
        /* <example>424.33</example> */
        [JsonPropertyName("refund_amount")]
        public string? RefundAmount { get { return this.RefundAmountOption; } set { this.RefundAmountOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarkCfarContractExerciseCompleteRequest {\n");
            sb.Append("  RefundAmount: ").Append(RefundAmount).Append("\n");
            sb.Append("  RefundMethod: ").Append(RefundMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MarkCfarContractExerciseCompleteRequest" />
    /// </summary>
    public class MarkCfarContractExerciseCompleteRequestJsonConverter : JsonConverter<MarkCfarContractExerciseCompleteRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="MarkCfarContractExerciseCompleteRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MarkCfarContractExerciseCompleteRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> refundAmount = default;
            Option<AirlineRefundMethod?> refundMethod = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "refund_amount":
                            refundAmount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "refund_method":
                            string? refundMethodRawValue = utf8JsonReader.GetString();
                            if (refundMethodRawValue != null)
                                refundMethod = new Option<AirlineRefundMethod?>(AirlineRefundMethodValueConverter.FromStringOrDefault(refundMethodRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (refundAmount.IsSet && refundAmount.Value == null)
                throw new ArgumentNullException(nameof(refundAmount), "Property is not nullable for class MarkCfarContractExerciseCompleteRequest.");

            if (refundMethod.IsSet && refundMethod.Value == null)
                throw new ArgumentNullException(nameof(refundMethod), "Property is not nullable for class MarkCfarContractExerciseCompleteRequest.");

            return new MarkCfarContractExerciseCompleteRequest(refundAmount, refundMethod);
        }

        /// <summary>
        /// Serializes a <see cref="MarkCfarContractExerciseCompleteRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, markCfarContractExerciseCompleteRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MarkCfarContractExerciseCompleteRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="markCfarContractExerciseCompleteRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (markCfarContractExerciseCompleteRequest.RefundAmountOption.IsSet && markCfarContractExerciseCompleteRequest.RefundAmount == null)
                throw new ArgumentNullException(nameof(markCfarContractExerciseCompleteRequest.RefundAmount), "Property is required for class MarkCfarContractExerciseCompleteRequest.");

            if (markCfarContractExerciseCompleteRequest.RefundAmountOption.IsSet)
                writer.WriteString("refund_amount", markCfarContractExerciseCompleteRequest.RefundAmount);

            if (markCfarContractExerciseCompleteRequest.RefundMethodOption.IsSet)
            {
                var refundMethodRawValue = AirlineRefundMethodValueConverter.ToJsonValue(markCfarContractExerciseCompleteRequest.RefundMethod!.Value);
                writer.WriteString("refund_method", refundMethodRawValue);
            }
        }
    }
}
