// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// An object detailing the Passenger Information
    /// </summary>
    public partial class DgPassenger
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DgPassenger" /> class.
        /// </summary>
        /// <param name="passengerReference">Unique reference of the passenger</param>
        /// <param name="passengerType">passengerType</param>
        /// <param name="firstName">Ancillaries attached to the itinerary and their prices</param>
        /// <param name="lastName">Ancillaries attached to the itinerary and their prices</param>
        /// <param name="dateOfBirth">The birth date in ISO Local Date format</param>
        /// <param name="gender">gender</param>
        /// <param name="passportNumber">The passport number of the passenger</param>
        /// <param name="passportCountryIssuance">The country of issuance of the passenger&#39;s passport</param>
        /// <param name="passportIssuanceDate">The date of issuance of the passenger&#39;s passport</param>
        /// <param name="passportExpirationDate">The passport expiration date of the passenger</param>
        /// <param name="nationality">The nationality of the passenger (country code)</param>
        [JsonConstructor]
        public DgPassenger(string passengerReference, DgPassengerType passengerType, Option<string?> firstName = default, Option<string?> lastName = default, Option<DateOnly?> dateOfBirth = default, Option<Gender?> gender = default, Option<string?> passportNumber = default, Option<string?> passportCountryIssuance = default, Option<DateOnly?> passportIssuanceDate = default, Option<DateOnly?> passportExpirationDate = default, Option<string?> nationality = default)
        {
            PassengerReference = passengerReference;
            PassengerType = passengerType;
            FirstNameOption = firstName;
            LastNameOption = lastName;
            DateOfBirthOption = dateOfBirth;
            GenderOption = gender;
            PassportNumberOption = passportNumber;
            PassportCountryIssuanceOption = passportCountryIssuance;
            PassportIssuanceDateOption = passportIssuanceDate;
            PassportExpirationDateOption = passportExpirationDate;
            NationalityOption = nationality;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets PassengerType
        /// </summary>
        [JsonPropertyName("passenger_type")]
        public DgPassengerType PassengerType { get; set; }

        /// <summary>
        /// Used to track the state of Gender
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Gender?> GenderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [JsonPropertyName("gender")]
        public Gender? Gender { get { return this.GenderOption; } set { this.GenderOption = new Option<Gender?>(value); } }

        /// <summary>
        /// Unique reference of the passenger
        /// </summary>
        /// <value>Unique reference of the passenger</value>
        /* <example>1</example> */
        [JsonPropertyName("passenger_reference")]
        public string PassengerReference { get; set; }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirstNameOption { get; private set; }

        /// <summary>
        /// Ancillaries attached to the itinerary and their prices
        /// </summary>
        /// <value>Ancillaries attached to the itinerary and their prices</value>
        /* <example>John</example> */
        [JsonPropertyName("first_name")]
        public string? FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastNameOption { get; private set; }

        /// <summary>
        /// Ancillaries attached to the itinerary and their prices
        /// </summary>
        /// <value>Ancillaries attached to the itinerary and their prices</value>
        /* <example>Smith</example> */
        [JsonPropertyName("last_name")]
        public string? LastName { get { return this.LastNameOption; } set { this.LastNameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of DateOfBirth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DateOfBirthOption { get; private set; }

        /// <summary>
        /// The birth date in ISO Local Date format
        /// </summary>
        /// <value>The birth date in ISO Local Date format</value>
        /* <example>Sun Apr 02 00:00:00 UTC 2000</example> */
        [JsonPropertyName("date_of_birth")]
        public DateOnly? DateOfBirth { get { return this.DateOfBirthOption; } set { this.DateOfBirthOption = new Option<DateOnly?>(value); } }

        /// <summary>
        /// Used to track the state of PassportNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PassportNumberOption { get; private set; }

        /// <summary>
        /// The passport number of the passenger
        /// </summary>
        /// <value>The passport number of the passenger</value>
        /* <example>J12393496</example> */
        [JsonPropertyName("passport_number")]
        public string? PassportNumber { get { return this.PassportNumberOption; } set { this.PassportNumberOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of PassportCountryIssuance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PassportCountryIssuanceOption { get; private set; }

        /// <summary>
        /// The country of issuance of the passenger&#39;s passport
        /// </summary>
        /// <value>The country of issuance of the passenger&#39;s passport</value>
        [JsonPropertyName("passport_country_issuance")]
        public string? PassportCountryIssuance { get { return this.PassportCountryIssuanceOption; } set { this.PassportCountryIssuanceOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of PassportIssuanceDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> PassportIssuanceDateOption { get; private set; }

        /// <summary>
        /// The date of issuance of the passenger&#39;s passport
        /// </summary>
        /// <value>The date of issuance of the passenger&#39;s passport</value>
        /* <example>Mon Apr 02 00:00:00 UTC 2018</example> */
        [JsonPropertyName("passport_issuance_date")]
        public DateOnly? PassportIssuanceDate { get { return this.PassportIssuanceDateOption; } set { this.PassportIssuanceDateOption = new Option<DateOnly?>(value); } }

        /// <summary>
        /// Used to track the state of PassportExpirationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> PassportExpirationDateOption { get; private set; }

        /// <summary>
        /// The passport expiration date of the passenger
        /// </summary>
        /// <value>The passport expiration date of the passenger</value>
        /* <example>Tue Apr 02 00:00:00 UTC 2030</example> */
        [JsonPropertyName("passport_expiration_date")]
        public DateOnly? PassportExpirationDate { get { return this.PassportExpirationDateOption; } set { this.PassportExpirationDateOption = new Option<DateOnly?>(value); } }

        /// <summary>
        /// Used to track the state of Nationality
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NationalityOption { get; private set; }

        /// <summary>
        /// The nationality of the passenger (country code)
        /// </summary>
        /// <value>The nationality of the passenger (country code)</value>
        [JsonPropertyName("nationality")]
        public string? Nationality { get { return this.NationalityOption; } set { this.NationalityOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DgPassenger {\n");
            sb.Append("  PassengerReference: ").Append(PassengerReference).Append("\n");
            sb.Append("  PassengerType: ").Append(PassengerType).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  PassportNumber: ").Append(PassportNumber).Append("\n");
            sb.Append("  PassportCountryIssuance: ").Append(PassportCountryIssuance).Append("\n");
            sb.Append("  PassportIssuanceDate: ").Append(PassportIssuanceDate).Append("\n");
            sb.Append("  PassportExpirationDate: ").Append(PassportExpirationDate).Append("\n");
            sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DgPassenger" />
    /// </summary>
    public class DgPassengerJsonConverter : JsonConverter<DgPassenger>
    {
        /// <summary>
        /// The format to use to serialize DateOfBirth
        /// </summary>
        public static string DateOfBirthFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize PassportIssuanceDate
        /// </summary>
        public static string PassportIssuanceDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize PassportExpirationDate
        /// </summary>
        public static string PassportExpirationDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="DgPassenger" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DgPassenger Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> passengerReference = default;
            Option<DgPassengerType?> passengerType = default;
            Option<string?> firstName = default;
            Option<string?> lastName = default;
            Option<DateOnly?> dateOfBirth = default;
            Option<Gender?> gender = default;
            Option<string?> passportNumber = default;
            Option<string?> passportCountryIssuance = default;
            Option<DateOnly?> passportIssuanceDate = default;
            Option<DateOnly?> passportExpirationDate = default;
            Option<string?> nationality = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "passenger_reference":
                            passengerReference = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "passenger_type":
                            string? passengerTypeRawValue = utf8JsonReader.GetString();
                            if (passengerTypeRawValue != null)
                                passengerType = new Option<DgPassengerType?>(DgPassengerTypeValueConverter.FromStringOrDefault(passengerTypeRawValue));
                            break;
                        case "first_name":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_name":
                            lastName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "date_of_birth":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dateOfBirth = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "gender":
                            string? genderRawValue = utf8JsonReader.GetString();
                            if (genderRawValue != null)
                                gender = new Option<Gender?>(GenderValueConverter.FromStringOrDefault(genderRawValue));
                            break;
                        case "passport_number":
                            passportNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "passport_country_issuance":
                            passportCountryIssuance = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "passport_issuance_date":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                passportIssuanceDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "passport_expiration_date":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                passportExpirationDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "nationality":
                            nationality = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!passengerReference.IsSet)
                throw new ArgumentException("Property is required for class DgPassenger.", nameof(passengerReference));

            if (!passengerType.IsSet)
                throw new ArgumentException("Property is required for class DgPassenger.", nameof(passengerType));

            if (passengerReference.IsSet && passengerReference.Value == null)
                throw new ArgumentNullException(nameof(passengerReference), "Property is not nullable for class DgPassenger.");

            if (passengerType.IsSet && passengerType.Value == null)
                throw new ArgumentNullException(nameof(passengerType), "Property is not nullable for class DgPassenger.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class DgPassenger.");

            if (lastName.IsSet && lastName.Value == null)
                throw new ArgumentNullException(nameof(lastName), "Property is not nullable for class DgPassenger.");

            if (dateOfBirth.IsSet && dateOfBirth.Value == null)
                throw new ArgumentNullException(nameof(dateOfBirth), "Property is not nullable for class DgPassenger.");

            if (gender.IsSet && gender.Value == null)
                throw new ArgumentNullException(nameof(gender), "Property is not nullable for class DgPassenger.");

            if (passportNumber.IsSet && passportNumber.Value == null)
                throw new ArgumentNullException(nameof(passportNumber), "Property is not nullable for class DgPassenger.");

            if (passportCountryIssuance.IsSet && passportCountryIssuance.Value == null)
                throw new ArgumentNullException(nameof(passportCountryIssuance), "Property is not nullable for class DgPassenger.");

            if (passportIssuanceDate.IsSet && passportIssuanceDate.Value == null)
                throw new ArgumentNullException(nameof(passportIssuanceDate), "Property is not nullable for class DgPassenger.");

            if (passportExpirationDate.IsSet && passportExpirationDate.Value == null)
                throw new ArgumentNullException(nameof(passportExpirationDate), "Property is not nullable for class DgPassenger.");

            if (nationality.IsSet && nationality.Value == null)
                throw new ArgumentNullException(nameof(nationality), "Property is not nullable for class DgPassenger.");

            return new DgPassenger(passengerReference.Value!, passengerType.Value!.Value!, firstName, lastName, dateOfBirth, gender, passportNumber, passportCountryIssuance, passportIssuanceDate, passportExpirationDate, nationality);
        }

        /// <summary>
        /// Serializes a <see cref="DgPassenger" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgPassenger"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DgPassenger dgPassenger, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dgPassenger, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DgPassenger" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgPassenger"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DgPassenger dgPassenger, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dgPassenger.PassengerReference == null)
                throw new ArgumentNullException(nameof(dgPassenger.PassengerReference), "Property is required for class DgPassenger.");

            if (dgPassenger.FirstNameOption.IsSet && dgPassenger.FirstName == null)
                throw new ArgumentNullException(nameof(dgPassenger.FirstName), "Property is required for class DgPassenger.");

            if (dgPassenger.LastNameOption.IsSet && dgPassenger.LastName == null)
                throw new ArgumentNullException(nameof(dgPassenger.LastName), "Property is required for class DgPassenger.");

            if (dgPassenger.PassportNumberOption.IsSet && dgPassenger.PassportNumber == null)
                throw new ArgumentNullException(nameof(dgPassenger.PassportNumber), "Property is required for class DgPassenger.");

            if (dgPassenger.PassportCountryIssuanceOption.IsSet && dgPassenger.PassportCountryIssuance == null)
                throw new ArgumentNullException(nameof(dgPassenger.PassportCountryIssuance), "Property is required for class DgPassenger.");

            if (dgPassenger.NationalityOption.IsSet && dgPassenger.Nationality == null)
                throw new ArgumentNullException(nameof(dgPassenger.Nationality), "Property is required for class DgPassenger.");

            writer.WriteString("passenger_reference", dgPassenger.PassengerReference);

            var passengerTypeRawValue = DgPassengerTypeValueConverter.ToJsonValue(dgPassenger.PassengerType);
            writer.WriteString("passenger_type", passengerTypeRawValue);

            if (dgPassenger.FirstNameOption.IsSet)
                writer.WriteString("first_name", dgPassenger.FirstName);

            if (dgPassenger.LastNameOption.IsSet)
                writer.WriteString("last_name", dgPassenger.LastName);

            if (dgPassenger.DateOfBirthOption.IsSet)
                writer.WriteString("date_of_birth", dgPassenger.DateOfBirthOption.Value!.Value.ToString(DateOfBirthFormat));

            if (dgPassenger.GenderOption.IsSet)
            {
                var genderRawValue = GenderValueConverter.ToJsonValue(dgPassenger.Gender!.Value);
                writer.WriteString("gender", genderRawValue);
            }
            if (dgPassenger.PassportNumberOption.IsSet)
                writer.WriteString("passport_number", dgPassenger.PassportNumber);

            if (dgPassenger.PassportCountryIssuanceOption.IsSet)
                writer.WriteString("passport_country_issuance", dgPassenger.PassportCountryIssuance);

            if (dgPassenger.PassportIssuanceDateOption.IsSet)
                writer.WriteString("passport_issuance_date", dgPassenger.PassportIssuanceDateOption.Value!.Value.ToString(PassportIssuanceDateFormat));

            if (dgPassenger.PassportExpirationDateOption.IsSet)
                writer.WriteString("passport_expiration_date", dgPassenger.PassportExpirationDateOption.Value!.Value.ToString(PassportExpirationDateFormat));

            if (dgPassenger.NationalityOption.IsSet)
                writer.WriteString("nationality", dgPassenger.Nationality);
        }
    }
}
