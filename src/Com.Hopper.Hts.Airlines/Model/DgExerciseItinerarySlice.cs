/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Hopper.Hts.Airlines.Client.OpenAPIDateConverter;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// An object containing the list of flight segments for a fare slice
    /// </summary>
    [DataContract(Name = "dg_exercise_itinerary_slice")]
    public partial class DgExerciseItinerarySlice : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DgExerciseItinerarySlice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DgExerciseItinerarySlice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DgExerciseItinerarySlice" /> class.
        /// </summary>
        /// <param name="segments">A list of segments which make up the slice (required).</param>
        /// <param name="irop">Is the slice impacted by an unplanned short-term Irregularity. It includes delays and cancellations that occur on the day of departure of the first impacted flight. Also known as: Flight Irregularity, IROP or IREG..</param>
        /// <param name="invol">Is the slice resulting from a rebooking following an unplanned short-term Irregularity. It includes delays and cancellations that occur on the day of departure of the first impacted flight. Also known as: Flight Irregularity, IROP or IREG..</param>
        /// <param name="previousSlice">previousSlice.</param>
        public DgExerciseItinerarySlice(List<DgExerciseItinerarySliceSegment> segments = default(List<DgExerciseItinerarySliceSegment>), bool irop = default(bool), bool invol = default(bool), DgExerciseItinerarySlice previousSlice = default(DgExerciseItinerarySlice))
        {
            // to ensure "segments" is required (not null)
            if (segments == null)
            {
                throw new ArgumentNullException("segments is a required property for DgExerciseItinerarySlice and cannot be null");
            }
            this.Segments = segments;
            this.Irop = irop;
            this.Invol = invol;
            this.PreviousSlice = previousSlice;
        }

        /// <summary>
        /// A list of segments which make up the slice
        /// </summary>
        /// <value>A list of segments which make up the slice</value>
        [DataMember(Name = "segments", IsRequired = true, EmitDefaultValue = true)]
        public List<DgExerciseItinerarySliceSegment> Segments { get; set; }

        /// <summary>
        /// Is the slice impacted by an unplanned short-term Irregularity. It includes delays and cancellations that occur on the day of departure of the first impacted flight. Also known as: Flight Irregularity, IROP or IREG.
        /// </summary>
        /// <value>Is the slice impacted by an unplanned short-term Irregularity. It includes delays and cancellations that occur on the day of departure of the first impacted flight. Also known as: Flight Irregularity, IROP or IREG.</value>
        [DataMember(Name = "irop", EmitDefaultValue = true)]
        public bool Irop { get; set; }

        /// <summary>
        /// Is the slice resulting from a rebooking following an unplanned short-term Irregularity. It includes delays and cancellations that occur on the day of departure of the first impacted flight. Also known as: Flight Irregularity, IROP or IREG.
        /// </summary>
        /// <value>Is the slice resulting from a rebooking following an unplanned short-term Irregularity. It includes delays and cancellations that occur on the day of departure of the first impacted flight. Also known as: Flight Irregularity, IROP or IREG.</value>
        [DataMember(Name = "invol", EmitDefaultValue = true)]
        public bool Invol { get; set; }

        /// <summary>
        /// Gets or Sets PreviousSlice
        /// </summary>
        [DataMember(Name = "previous_slice", EmitDefaultValue = false)]
        public DgExerciseItinerarySlice PreviousSlice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DgExerciseItinerarySlice {\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("  Irop: ").Append(Irop).Append("\n");
            sb.Append("  Invol: ").Append(Invol).Append("\n");
            sb.Append("  PreviousSlice: ").Append(PreviousSlice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
