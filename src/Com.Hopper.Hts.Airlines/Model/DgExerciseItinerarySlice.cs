// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// An object containing the list of flight segments for a fare slice
    /// </summary>
    public partial class DgExerciseItinerarySlice
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DgExerciseItinerarySlice" /> class.
        /// </summary>
        /// <param name="segments">A list of segments which make up the slice</param>
        /// <param name="irop">Is the slice impacted by an unplanned short-term Irregularity. It includes delays and cancellations that occur on the day of departure of the first impacted flight. Also known as: Flight Irregularity, IROP or IREG.</param>
        /// <param name="invol">Is the slice resulting from a rebooking following an unplanned short-term Irregularity. It includes delays and cancellations that occur on the day of departure of the first impacted flight. Also known as: Flight Irregularity, IROP or IREG.</param>
        /// <param name="previousSlice">previousSlice</param>
        [JsonConstructor]
        public DgExerciseItinerarySlice(List<DgExerciseItinerarySliceSegment> segments, Option<bool?> irop = default, Option<bool?> invol = default, Option<DgExerciseItinerarySlice?> previousSlice = default)
        {
            Segments = segments;
            IropOption = irop;
            InvolOption = invol;
            PreviousSliceOption = previousSlice;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A list of segments which make up the slice
        /// </summary>
        /// <value>A list of segments which make up the slice</value>
        [JsonPropertyName("segments")]
        public List<DgExerciseItinerarySliceSegment> Segments { get; set; }

        /// <summary>
        /// Used to track the state of Irop
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IropOption { get; private set; }

        /// <summary>
        /// Is the slice impacted by an unplanned short-term Irregularity. It includes delays and cancellations that occur on the day of departure of the first impacted flight. Also known as: Flight Irregularity, IROP or IREG.
        /// </summary>
        /// <value>Is the slice impacted by an unplanned short-term Irregularity. It includes delays and cancellations that occur on the day of departure of the first impacted flight. Also known as: Flight Irregularity, IROP or IREG.</value>
        [JsonPropertyName("irop")]
        public bool? Irop { get { return this.IropOption; } set { this.IropOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Invol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InvolOption { get; private set; }

        /// <summary>
        /// Is the slice resulting from a rebooking following an unplanned short-term Irregularity. It includes delays and cancellations that occur on the day of departure of the first impacted flight. Also known as: Flight Irregularity, IROP or IREG.
        /// </summary>
        /// <value>Is the slice resulting from a rebooking following an unplanned short-term Irregularity. It includes delays and cancellations that occur on the day of departure of the first impacted flight. Also known as: Flight Irregularity, IROP or IREG.</value>
        [JsonPropertyName("invol")]
        public bool? Invol { get { return this.InvolOption; } set { this.InvolOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of PreviousSlice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DgExerciseItinerarySlice?> PreviousSliceOption { get; private set; }

        /// <summary>
        /// Gets or Sets PreviousSlice
        /// </summary>
        [JsonPropertyName("previous_slice")]
        public DgExerciseItinerarySlice? PreviousSlice { get { return this.PreviousSliceOption; } set { this.PreviousSliceOption = new Option<DgExerciseItinerarySlice?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DgExerciseItinerarySlice {\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("  Irop: ").Append(Irop).Append("\n");
            sb.Append("  Invol: ").Append(Invol).Append("\n");
            sb.Append("  PreviousSlice: ").Append(PreviousSlice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DgExerciseItinerarySlice" />
    /// </summary>
    public class DgExerciseItinerarySliceJsonConverter : JsonConverter<DgExerciseItinerarySlice>
    {
        /// <summary>
        /// Deserializes json to <see cref="DgExerciseItinerarySlice" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DgExerciseItinerarySlice Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<DgExerciseItinerarySliceSegment>?> segments = default;
            Option<bool?> irop = default;
            Option<bool?> invol = default;
            Option<DgExerciseItinerarySlice?> previousSlice = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "segments":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                segments = new Option<List<DgExerciseItinerarySliceSegment>?>(JsonSerializer.Deserialize<List<DgExerciseItinerarySliceSegment>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "irop":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                irop = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "invol":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                invol = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "previous_slice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                previousSlice = new Option<DgExerciseItinerarySlice?>(JsonSerializer.Deserialize<DgExerciseItinerarySlice>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!segments.IsSet)
                throw new ArgumentException("Property is required for class DgExerciseItinerarySlice.", nameof(segments));

            if (segments.IsSet && segments.Value == null)
                throw new ArgumentNullException(nameof(segments), "Property is not nullable for class DgExerciseItinerarySlice.");

            if (irop.IsSet && irop.Value == null)
                throw new ArgumentNullException(nameof(irop), "Property is not nullable for class DgExerciseItinerarySlice.");

            if (invol.IsSet && invol.Value == null)
                throw new ArgumentNullException(nameof(invol), "Property is not nullable for class DgExerciseItinerarySlice.");

            if (previousSlice.IsSet && previousSlice.Value == null)
                throw new ArgumentNullException(nameof(previousSlice), "Property is not nullable for class DgExerciseItinerarySlice.");

            return new DgExerciseItinerarySlice(segments.Value!, irop, invol, previousSlice);
        }

        /// <summary>
        /// Serializes a <see cref="DgExerciseItinerarySlice" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgExerciseItinerarySlice"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DgExerciseItinerarySlice dgExerciseItinerarySlice, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dgExerciseItinerarySlice, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DgExerciseItinerarySlice" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgExerciseItinerarySlice"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DgExerciseItinerarySlice dgExerciseItinerarySlice, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dgExerciseItinerarySlice.Segments == null)
                throw new ArgumentNullException(nameof(dgExerciseItinerarySlice.Segments), "Property is required for class DgExerciseItinerarySlice.");

            if (dgExerciseItinerarySlice.PreviousSliceOption.IsSet && dgExerciseItinerarySlice.PreviousSlice == null)
                throw new ArgumentNullException(nameof(dgExerciseItinerarySlice.PreviousSlice), "Property is required for class DgExerciseItinerarySlice.");

            writer.WritePropertyName("segments");
            JsonSerializer.Serialize(writer, dgExerciseItinerarySlice.Segments, jsonSerializerOptions);
            if (dgExerciseItinerarySlice.IropOption.IsSet)
                writer.WriteBoolean("irop", dgExerciseItinerarySlice.IropOption.Value!.Value);

            if (dgExerciseItinerarySlice.InvolOption.IsSet)
                writer.WriteBoolean("invol", dgExerciseItinerarySlice.InvolOption.Value!.Value);

            if (dgExerciseItinerarySlice.PreviousSliceOption.IsSet)
            {
                writer.WritePropertyName("previous_slice");
                JsonSerializer.Serialize(writer, dgExerciseItinerarySlice.PreviousSlice, jsonSerializerOptions);
            }
        }
    }
}
