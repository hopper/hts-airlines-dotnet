// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// CreateAirlineSessionRequest
    /// </summary>
    public partial class CreateAirlineSessionRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAirlineSessionRequest" /> class.
        /// </summary>
        /// <param name="flowType">flowType</param>
        /// <param name="pointOfSale">An ISO 3166-1-alpha-2 country code; the point of sale of the user</param>
        /// <param name="language">A ISO_639-1 country code; the language associated with the user</param>
        /// <param name="userInfo">userInfo</param>
        /// <param name="sessionId">The custom identifier for the customer&#39;s session. If omitted, a new session ID will be generated.</param>
        /// <param name="device">device</param>
        /// <param name="product">product</param>
        [JsonConstructor]
        public CreateAirlineSessionRequest(FlowType flowType, string pointOfSale, string language, Option<UserInfo?> userInfo = default, Option<string?> sessionId = default, Option<Device?> device = default, Option<Product?> product = default)
        {
            FlowType = flowType;
            PointOfSale = pointOfSale;
            Language = language;
            UserInfoOption = userInfo;
            SessionIdOption = sessionId;
            DeviceOption = device;
            ProductOption = product;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets FlowType
        /// </summary>
        [JsonPropertyName("flow_type")]
        public FlowType FlowType { get; set; }

        /// <summary>
        /// Used to track the state of Product
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Product?> ProductOption { get; private set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [JsonPropertyName("product")]
        public Product? Product { get { return this.ProductOption; } set { this.ProductOption = new Option<Product?>(value); } }

        /// <summary>
        /// An ISO 3166-1-alpha-2 country code; the point of sale of the user
        /// </summary>
        /// <value>An ISO 3166-1-alpha-2 country code; the point of sale of the user</value>
        /* <example>US</example> */
        [JsonPropertyName("point_of_sale")]
        public string PointOfSale { get; set; }

        /// <summary>
        /// A ISO_639-1 country code; the language associated with the user
        /// </summary>
        /// <value>A ISO_639-1 country code; the language associated with the user</value>
        /* <example>es</example> */
        [JsonPropertyName("language")]
        public string Language { get; set; }

        /// <summary>
        /// Used to track the state of UserInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UserInfo?> UserInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserInfo
        /// </summary>
        [JsonPropertyName("user_info")]
        public UserInfo? UserInfo { get { return this.UserInfoOption; } set { this.UserInfoOption = new Option<UserInfo?>(value); } }

        /// <summary>
        /// Used to track the state of SessionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SessionIdOption { get; private set; }

        /// <summary>
        /// The custom identifier for the customer&#39;s session. If omitted, a new session ID will be generated.
        /// </summary>
        /// <value>The custom identifier for the customer&#39;s session. If omitted, a new session ID will be generated.</value>
        /* <example>d93dd7c9-39c0-499d-903b-d837282231c7</example> */
        [JsonPropertyName("session_id")]
        public string? SessionId { get { return this.SessionIdOption; } set { this.SessionIdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Device
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Device?> DeviceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [JsonPropertyName("device")]
        public Device? Device { get { return this.DeviceOption; } set { this.DeviceOption = new Option<Device?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateAirlineSessionRequest {\n");
            sb.Append("  FlowType: ").Append(FlowType).Append("\n");
            sb.Append("  PointOfSale: ").Append(PointOfSale).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  UserInfo: ").Append(UserInfo).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateAirlineSessionRequest" />
    /// </summary>
    public class CreateAirlineSessionRequestJsonConverter : JsonConverter<CreateAirlineSessionRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateAirlineSessionRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateAirlineSessionRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<FlowType?> flowType = default;
            Option<string?> pointOfSale = default;
            Option<string?> language = default;
            Option<UserInfo?> userInfo = default;
            Option<string?> sessionId = default;
            Option<Device?> device = default;
            Option<Product?> product = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "flow_type":
                            string? flowTypeRawValue = utf8JsonReader.GetString();
                            if (flowTypeRawValue != null)
                                flowType = new Option<FlowType?>(FlowTypeValueConverter.FromStringOrDefault(flowTypeRawValue));
                            break;
                        case "point_of_sale":
                            pointOfSale = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "language":
                            language = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_info":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userInfo = new Option<UserInfo?>(JsonSerializer.Deserialize<UserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "session_id":
                            sessionId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "device":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                device = new Option<Device?>(JsonSerializer.Deserialize<Device>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "product":
                            string? productRawValue = utf8JsonReader.GetString();
                            if (productRawValue != null)
                                product = new Option<Product?>(ProductValueConverter.FromStringOrDefault(productRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!flowType.IsSet)
                throw new ArgumentException("Property is required for class CreateAirlineSessionRequest.", nameof(flowType));

            if (!pointOfSale.IsSet)
                throw new ArgumentException("Property is required for class CreateAirlineSessionRequest.", nameof(pointOfSale));

            if (!language.IsSet)
                throw new ArgumentException("Property is required for class CreateAirlineSessionRequest.", nameof(language));

            if (flowType.IsSet && flowType.Value == null)
                throw new ArgumentNullException(nameof(flowType), "Property is not nullable for class CreateAirlineSessionRequest.");

            if (pointOfSale.IsSet && pointOfSale.Value == null)
                throw new ArgumentNullException(nameof(pointOfSale), "Property is not nullable for class CreateAirlineSessionRequest.");

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class CreateAirlineSessionRequest.");

            if (userInfo.IsSet && userInfo.Value == null)
                throw new ArgumentNullException(nameof(userInfo), "Property is not nullable for class CreateAirlineSessionRequest.");

            if (sessionId.IsSet && sessionId.Value == null)
                throw new ArgumentNullException(nameof(sessionId), "Property is not nullable for class CreateAirlineSessionRequest.");

            if (device.IsSet && device.Value == null)
                throw new ArgumentNullException(nameof(device), "Property is not nullable for class CreateAirlineSessionRequest.");

            if (product.IsSet && product.Value == null)
                throw new ArgumentNullException(nameof(product), "Property is not nullable for class CreateAirlineSessionRequest.");

            return new CreateAirlineSessionRequest(flowType.Value!.Value!, pointOfSale.Value!, language.Value!, userInfo, sessionId, device, product);
        }

        /// <summary>
        /// Serializes a <see cref="CreateAirlineSessionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createAirlineSessionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateAirlineSessionRequest createAirlineSessionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createAirlineSessionRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateAirlineSessionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createAirlineSessionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateAirlineSessionRequest createAirlineSessionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createAirlineSessionRequest.PointOfSale == null)
                throw new ArgumentNullException(nameof(createAirlineSessionRequest.PointOfSale), "Property is required for class CreateAirlineSessionRequest.");

            if (createAirlineSessionRequest.Language == null)
                throw new ArgumentNullException(nameof(createAirlineSessionRequest.Language), "Property is required for class CreateAirlineSessionRequest.");

            if (createAirlineSessionRequest.UserInfoOption.IsSet && createAirlineSessionRequest.UserInfo == null)
                throw new ArgumentNullException(nameof(createAirlineSessionRequest.UserInfo), "Property is required for class CreateAirlineSessionRequest.");

            if (createAirlineSessionRequest.SessionIdOption.IsSet && createAirlineSessionRequest.SessionId == null)
                throw new ArgumentNullException(nameof(createAirlineSessionRequest.SessionId), "Property is required for class CreateAirlineSessionRequest.");

            if (createAirlineSessionRequest.DeviceOption.IsSet && createAirlineSessionRequest.Device == null)
                throw new ArgumentNullException(nameof(createAirlineSessionRequest.Device), "Property is required for class CreateAirlineSessionRequest.");

            var flowTypeRawValue = FlowTypeValueConverter.ToJsonValue(createAirlineSessionRequest.FlowType);
            writer.WriteString("flow_type", flowTypeRawValue);

            writer.WriteString("point_of_sale", createAirlineSessionRequest.PointOfSale);

            writer.WriteString("language", createAirlineSessionRequest.Language);

            if (createAirlineSessionRequest.UserInfoOption.IsSet)
            {
                writer.WritePropertyName("user_info");
                JsonSerializer.Serialize(writer, createAirlineSessionRequest.UserInfo, jsonSerializerOptions);
            }
            if (createAirlineSessionRequest.SessionIdOption.IsSet)
                writer.WriteString("session_id", createAirlineSessionRequest.SessionId);

            if (createAirlineSessionRequest.DeviceOption.IsSet)
            {
                writer.WritePropertyName("device");
                JsonSerializer.Serialize(writer, createAirlineSessionRequest.Device, jsonSerializerOptions);
            }
            if (createAirlineSessionRequest.ProductOption.IsSet)
            {
                var productRawValue = ProductValueConverter.ToJsonValue(createAirlineSessionRequest.Product!.Value);
                writer.WriteString("product", productRawValue);
            }
        }
    }
}
