// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// The time at which the modification is requested
    /// </summary>
    /// <value>The time at which the modification is requested</value>
    public enum ModificationTime
    {
        /// <summary>
        /// Enum AfterDeparture for value: after_departure
        /// </summary>
        AfterDeparture = 1,

        /// <summary>
        /// Enum Anytime for value: anytime
        /// </summary>
        Anytime = 2,

        /// <summary>
        /// Enum BeforeDeparture for value: before_departure
        /// </summary>
        BeforeDeparture = 3
    }

    /// <summary>
    /// Converts <see cref="ModificationTime"/> to and from the JSON value
    /// </summary>
    public static class ModificationTimeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ModificationTime"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ModificationTime FromString(string value)
        {
            if (value.Equals("after_departure"))
                return ModificationTime.AfterDeparture;

            if (value.Equals("anytime"))
                return ModificationTime.Anytime;

            if (value.Equals("before_departure"))
                return ModificationTime.BeforeDeparture;

            throw new NotImplementedException($"Could not convert value to type ModificationTime: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ModificationTime"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ModificationTime? FromStringOrDefault(string value)
        {
            if (value.Equals("after_departure"))
                return ModificationTime.AfterDeparture;

            if (value.Equals("anytime"))
                return ModificationTime.Anytime;

            if (value.Equals("before_departure"))
                return ModificationTime.BeforeDeparture;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ModificationTime"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ModificationTime value)
        {
            if (value == ModificationTime.AfterDeparture)
                return "after_departure";

            if (value == ModificationTime.Anytime)
                return "anytime";

            if (value == ModificationTime.BeforeDeparture)
                return "before_departure";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ModificationTime"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ModificationTimeJsonConverter : JsonConverter<ModificationTime>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ModificationTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ModificationTime? result = rawValue == null
                ? null
                : ModificationTimeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ModificationTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modificationTime"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ModificationTime modificationTime, JsonSerializerOptions options)
        {
            writer.WriteStringValue(modificationTime.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ModificationTime"/>
    /// </summary>
    public class ModificationTimeNullableJsonConverter : JsonConverter<ModificationTime?>
    {
        /// <summary>
        /// Returns a ModificationTime from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ModificationTime? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ModificationTime? result = rawValue == null
                ? null
                : ModificationTimeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modificationTime"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ModificationTime? modificationTime, JsonSerializerOptions options)
        {
            writer.WriteStringValue(modificationTime?.ToString() ?? "null");
        }
    }
}
