// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// A created Dg offer
    /// </summary>
    public partial class CreateDgOfferItemResponse
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDgOfferItemResponse" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for an offer</param>
        /// <param name="premium">Total amount to be paid for DG</param>
        /// <param name="coverage">Total amount to be refunded upon DG exercise</param>
        /// <param name="coveragePercentage">Percentage of the ticket’s value to be refunded upon DG exercise</param>
        /// <param name="serviceCap">serviceCap</param>
        /// <param name="currency">Currency of offer</param>
        /// <param name="taxesTotal">Total of applicable taxes</param>
        /// <param name="requestType">requestType</param>
        /// <param name="maxHoursBeforeDeparture">The number of hours before each flight or slice departure from which a purchased contract would start to cover disruptions</param>
        /// <param name="minMinutesDelay">The minimum flight or slice departure delay in minutes to be covered</param>
        /// <param name="createdDateTime">A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a DG offer was created</param>
        /// <param name="contractExpiryDateTime">A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which the DG contract will expire once purchased</param>
        /// <param name="itinerary">itinerary</param>
        /// <param name="extAttributes">extAttributes</param>
        /// <param name="contents">contents</param>
        /// <param name="taxes">List of applicable taxes</param>
        /// <param name="termsConditionsUrl">The terms and conditions for this offer</param>
        /// <param name="faqUrl">The faq url for this offer</param>
        /// <param name="merchandisingUrl">The url for rendering offer merchandising</param>
        [JsonConstructor]
        public CreateDgOfferItemResponse(string id, string premium, string coverage, string coveragePercentage, string serviceCap, string currency, string taxesTotal, DgRequestType requestType, long maxHoursBeforeDeparture, long minMinutesDelay, DateTime createdDateTime, DateTime contractExpiryDateTime, DgItinerary itinerary, Dictionary<string, string> extAttributes, Dictionary<string, DgContents> contents, Option<List<DgTax>?> taxes = default, Option<string?> termsConditionsUrl = default, Option<string?> faqUrl = default, Option<string?> merchandisingUrl = default)
        {
            Id = id;
            Premium = premium;
            Coverage = coverage;
            CoveragePercentage = coveragePercentage;
            ServiceCap = serviceCap;
            Currency = currency;
            TaxesTotal = taxesTotal;
            RequestType = requestType;
            MaxHoursBeforeDeparture = maxHoursBeforeDeparture;
            MinMinutesDelay = minMinutesDelay;
            CreatedDateTime = createdDateTime;
            ContractExpiryDateTime = contractExpiryDateTime;
            Itinerary = itinerary;
            ExtAttributes = extAttributes;
            Contents = contents;
            TaxesOption = taxes;
            TermsConditionsUrlOption = termsConditionsUrl;
            FaqUrlOption = faqUrl;
            MerchandisingUrlOption = merchandisingUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets RequestType
        /// </summary>
        [JsonPropertyName("request_type")]
        public DgRequestType RequestType { get; set; }

        /// <summary>
        /// Unique identifier for an offer
        /// </summary>
        /// <value>Unique identifier for an offer</value>
        /* <example>1ec9eed3-4486-6460-9d6c-2fb8469d35db</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Total amount to be paid for DG
        /// </summary>
        /// <value>Total amount to be paid for DG</value>
        /* <example>40.80</example> */
        [JsonPropertyName("premium")]
        public string Premium { get; set; }

        /// <summary>
        /// Total amount to be refunded upon DG exercise
        /// </summary>
        /// <value>Total amount to be refunded upon DG exercise</value>
        /* <example>400.00</example> */
        [JsonPropertyName("coverage")]
        public string Coverage { get; set; }

        /// <summary>
        /// Percentage of the ticket’s value to be refunded upon DG exercise
        /// </summary>
        /// <value>Percentage of the ticket’s value to be refunded upon DG exercise</value>
        /* <example>80.00</example> */
        [JsonPropertyName("coverage_percentage")]
        public string CoveragePercentage { get; set; }

        /// <summary>
        /// Gets or Sets ServiceCap
        /// </summary>
        /* <example>1000.00</example> */
        [JsonPropertyName("service_cap")]
        public string ServiceCap { get; set; }

        /// <summary>
        /// Currency of offer
        /// </summary>
        /// <value>Currency of offer</value>
        /* <example>CAD</example> */
        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Total of applicable taxes
        /// </summary>
        /// <value>Total of applicable taxes</value>
        /* <example>20.00</example> */
        [JsonPropertyName("taxes_total")]
        public string TaxesTotal { get; set; }

        /// <summary>
        /// The number of hours before each flight or slice departure from which a purchased contract would start to cover disruptions
        /// </summary>
        /// <value>The number of hours before each flight or slice departure from which a purchased contract would start to cover disruptions</value>
        /* <example>24</example> */
        [JsonPropertyName("max_hours_before_departure")]
        public long MaxHoursBeforeDeparture { get; set; }

        /// <summary>
        /// The minimum flight or slice departure delay in minutes to be covered
        /// </summary>
        /// <value>The minimum flight or slice departure delay in minutes to be covered</value>
        /* <example>1</example> */
        [JsonPropertyName("min_minutes_delay")]
        public long MinMinutesDelay { get; set; }

        /// <summary>
        /// A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a DG offer was created
        /// </summary>
        /// <value>A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which a DG offer was created</value>
        /* <example>2020-11-02T18:34:30Z</example> */
        [JsonPropertyName("created_date_time")]
        public DateTime CreatedDateTime { get; set; }

        /// <summary>
        /// A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which the DG contract will expire once purchased
        /// </summary>
        /// <value>A UTC [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) datetime; the date and time at which the DG contract will expire once purchased</value>
        /* <example>2020-12-20T12:15:48Z</example> */
        [JsonPropertyName("contract_expiry_date_time")]
        public DateTime ContractExpiryDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Itinerary
        /// </summary>
        [JsonPropertyName("itinerary")]
        public DgItinerary Itinerary { get; set; }

        /// <summary>
        /// Gets or Sets ExtAttributes
        /// </summary>
        [JsonPropertyName("ext_attributes")]
        public Dictionary<string, string> ExtAttributes { get; set; }

        /// <summary>
        /// Gets or Sets Contents
        /// </summary>
        [JsonPropertyName("contents")]
        public Dictionary<string, DgContents> Contents { get; set; }

        /// <summary>
        /// Used to track the state of Taxes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DgTax>?> TaxesOption { get; private set; }

        /// <summary>
        /// List of applicable taxes
        /// </summary>
        /// <value>List of applicable taxes</value>
        [JsonPropertyName("taxes")]
        public List<DgTax>? Taxes { get { return this.TaxesOption; } set { this.TaxesOption = new Option<List<DgTax>?>(value); } }

        /// <summary>
        /// Used to track the state of TermsConditionsUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TermsConditionsUrlOption { get; private set; }

        /// <summary>
        /// The terms and conditions for this offer
        /// </summary>
        /// <value>The terms and conditions for this offer</value>
        [JsonPropertyName("terms_conditions_url")]
        public string? TermsConditionsUrl { get { return this.TermsConditionsUrlOption; } set { this.TermsConditionsUrlOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FaqUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FaqUrlOption { get; private set; }

        /// <summary>
        /// The faq url for this offer
        /// </summary>
        /// <value>The faq url for this offer</value>
        [JsonPropertyName("faq_url")]
        public string? FaqUrl { get { return this.FaqUrlOption; } set { this.FaqUrlOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of MerchandisingUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MerchandisingUrlOption { get; private set; }

        /// <summary>
        /// The url for rendering offer merchandising
        /// </summary>
        /// <value>The url for rendering offer merchandising</value>
        [JsonPropertyName("merchandising_url")]
        public string? MerchandisingUrl { get { return this.MerchandisingUrlOption; } set { this.MerchandisingUrlOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateDgOfferItemResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Premium: ").Append(Premium).Append("\n");
            sb.Append("  Coverage: ").Append(Coverage).Append("\n");
            sb.Append("  CoveragePercentage: ").Append(CoveragePercentage).Append("\n");
            sb.Append("  ServiceCap: ").Append(ServiceCap).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  TaxesTotal: ").Append(TaxesTotal).Append("\n");
            sb.Append("  RequestType: ").Append(RequestType).Append("\n");
            sb.Append("  MaxHoursBeforeDeparture: ").Append(MaxHoursBeforeDeparture).Append("\n");
            sb.Append("  MinMinutesDelay: ").Append(MinMinutesDelay).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  ContractExpiryDateTime: ").Append(ContractExpiryDateTime).Append("\n");
            sb.Append("  Itinerary: ").Append(Itinerary).Append("\n");
            sb.Append("  ExtAttributes: ").Append(ExtAttributes).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  TermsConditionsUrl: ").Append(TermsConditionsUrl).Append("\n");
            sb.Append("  FaqUrl: ").Append(FaqUrl).Append("\n");
            sb.Append("  MerchandisingUrl: ").Append(MerchandisingUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateDgOfferItemResponse" />
    /// </summary>
    public class CreateDgOfferItemResponseJsonConverter : JsonConverter<CreateDgOfferItemResponse>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTime
        /// </summary>
        public static string CreatedDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ContractExpiryDateTime
        /// </summary>
        public static string ContractExpiryDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CreateDgOfferItemResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateDgOfferItemResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> premium = default;
            Option<string?> coverage = default;
            Option<string?> coveragePercentage = default;
            Option<string?> serviceCap = default;
            Option<string?> currency = default;
            Option<string?> taxesTotal = default;
            Option<DgRequestType?> requestType = default;
            Option<long?> maxHoursBeforeDeparture = default;
            Option<long?> minMinutesDelay = default;
            Option<DateTime?> createdDateTime = default;
            Option<DateTime?> contractExpiryDateTime = default;
            Option<DgItinerary?> itinerary = default;
            Option<Dictionary<string, string>?> extAttributes = default;
            Option<Dictionary<string, DgContents>?> contents = default;
            Option<List<DgTax>?> taxes = default;
            Option<string?> termsConditionsUrl = default;
            Option<string?> faqUrl = default;
            Option<string?> merchandisingUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "premium":
                            premium = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "coverage":
                            coverage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "coverage_percentage":
                            coveragePercentage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "service_cap":
                            serviceCap = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency":
                            currency = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "taxes_total":
                            taxesTotal = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "request_type":
                            string? requestTypeRawValue = utf8JsonReader.GetString();
                            if (requestTypeRawValue != null)
                                requestType = new Option<DgRequestType?>(DgRequestTypeValueConverter.FromStringOrDefault(requestTypeRawValue));
                            break;
                        case "max_hours_before_departure":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                maxHoursBeforeDeparture = new Option<long?>(utf8JsonReader.GetInt32());
                            break;
                        case "min_minutes_delay":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                minMinutesDelay = new Option<long?>(utf8JsonReader.GetInt32());
                            break;
                        case "created_date_time":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "contract_expiry_date_time":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contractExpiryDateTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "itinerary":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                itinerary = new Option<DgItinerary?>(JsonSerializer.Deserialize<DgItinerary>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ext_attributes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                extAttributes = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "contents":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contents = new Option<Dictionary<string, DgContents>?>(JsonSerializer.Deserialize<Dictionary<string, DgContents>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "taxes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                taxes = new Option<List<DgTax>?>(JsonSerializer.Deserialize<List<DgTax>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "terms_conditions_url":
                            termsConditionsUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "faq_url":
                            faqUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "merchandising_url":
                            merchandisingUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOfferItemResponse.", nameof(id));

            if (!premium.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOfferItemResponse.", nameof(premium));

            if (!coverage.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOfferItemResponse.", nameof(coverage));

            if (!coveragePercentage.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOfferItemResponse.", nameof(coveragePercentage));

            if (!serviceCap.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOfferItemResponse.", nameof(serviceCap));

            if (!currency.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOfferItemResponse.", nameof(currency));

            if (!taxesTotal.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOfferItemResponse.", nameof(taxesTotal));

            if (!requestType.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOfferItemResponse.", nameof(requestType));

            if (!maxHoursBeforeDeparture.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOfferItemResponse.", nameof(maxHoursBeforeDeparture));

            if (!minMinutesDelay.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOfferItemResponse.", nameof(minMinutesDelay));

            if (!createdDateTime.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOfferItemResponse.", nameof(createdDateTime));

            if (!contractExpiryDateTime.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOfferItemResponse.", nameof(contractExpiryDateTime));

            if (!itinerary.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOfferItemResponse.", nameof(itinerary));

            if (!extAttributes.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOfferItemResponse.", nameof(extAttributes));

            if (!contents.IsSet)
                throw new ArgumentException("Property is required for class CreateDgOfferItemResponse.", nameof(contents));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (premium.IsSet && premium.Value == null)
                throw new ArgumentNullException(nameof(premium), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (coverage.IsSet && coverage.Value == null)
                throw new ArgumentNullException(nameof(coverage), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (coveragePercentage.IsSet && coveragePercentage.Value == null)
                throw new ArgumentNullException(nameof(coveragePercentage), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (serviceCap.IsSet && serviceCap.Value == null)
                throw new ArgumentNullException(nameof(serviceCap), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (currency.IsSet && currency.Value == null)
                throw new ArgumentNullException(nameof(currency), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (taxesTotal.IsSet && taxesTotal.Value == null)
                throw new ArgumentNullException(nameof(taxesTotal), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (requestType.IsSet && requestType.Value == null)
                throw new ArgumentNullException(nameof(requestType), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (maxHoursBeforeDeparture.IsSet && maxHoursBeforeDeparture.Value == null)
                throw new ArgumentNullException(nameof(maxHoursBeforeDeparture), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (minMinutesDelay.IsSet && minMinutesDelay.Value == null)
                throw new ArgumentNullException(nameof(minMinutesDelay), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (createdDateTime.IsSet && createdDateTime.Value == null)
                throw new ArgumentNullException(nameof(createdDateTime), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (contractExpiryDateTime.IsSet && contractExpiryDateTime.Value == null)
                throw new ArgumentNullException(nameof(contractExpiryDateTime), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (itinerary.IsSet && itinerary.Value == null)
                throw new ArgumentNullException(nameof(itinerary), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (extAttributes.IsSet && extAttributes.Value == null)
                throw new ArgumentNullException(nameof(extAttributes), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (contents.IsSet && contents.Value == null)
                throw new ArgumentNullException(nameof(contents), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (taxes.IsSet && taxes.Value == null)
                throw new ArgumentNullException(nameof(taxes), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (termsConditionsUrl.IsSet && termsConditionsUrl.Value == null)
                throw new ArgumentNullException(nameof(termsConditionsUrl), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (faqUrl.IsSet && faqUrl.Value == null)
                throw new ArgumentNullException(nameof(faqUrl), "Property is not nullable for class CreateDgOfferItemResponse.");

            if (merchandisingUrl.IsSet && merchandisingUrl.Value == null)
                throw new ArgumentNullException(nameof(merchandisingUrl), "Property is not nullable for class CreateDgOfferItemResponse.");

            return new CreateDgOfferItemResponse(id.Value!, premium.Value!, coverage.Value!, coveragePercentage.Value!, serviceCap.Value!, currency.Value!, taxesTotal.Value!, requestType.Value!.Value!, maxHoursBeforeDeparture.Value!.Value!, minMinutesDelay.Value!.Value!, createdDateTime.Value!.Value!, contractExpiryDateTime.Value!.Value!, itinerary.Value!, extAttributes.Value!, contents.Value!, taxes, termsConditionsUrl, faqUrl, merchandisingUrl);
        }

        /// <summary>
        /// Serializes a <see cref="CreateDgOfferItemResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createDgOfferItemResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateDgOfferItemResponse createDgOfferItemResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createDgOfferItemResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateDgOfferItemResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createDgOfferItemResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateDgOfferItemResponse createDgOfferItemResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createDgOfferItemResponse.Id == null)
                throw new ArgumentNullException(nameof(createDgOfferItemResponse.Id), "Property is required for class CreateDgOfferItemResponse.");

            if (createDgOfferItemResponse.Premium == null)
                throw new ArgumentNullException(nameof(createDgOfferItemResponse.Premium), "Property is required for class CreateDgOfferItemResponse.");

            if (createDgOfferItemResponse.Coverage == null)
                throw new ArgumentNullException(nameof(createDgOfferItemResponse.Coverage), "Property is required for class CreateDgOfferItemResponse.");

            if (createDgOfferItemResponse.CoveragePercentage == null)
                throw new ArgumentNullException(nameof(createDgOfferItemResponse.CoveragePercentage), "Property is required for class CreateDgOfferItemResponse.");

            if (createDgOfferItemResponse.ServiceCap == null)
                throw new ArgumentNullException(nameof(createDgOfferItemResponse.ServiceCap), "Property is required for class CreateDgOfferItemResponse.");

            if (createDgOfferItemResponse.Currency == null)
                throw new ArgumentNullException(nameof(createDgOfferItemResponse.Currency), "Property is required for class CreateDgOfferItemResponse.");

            if (createDgOfferItemResponse.TaxesTotal == null)
                throw new ArgumentNullException(nameof(createDgOfferItemResponse.TaxesTotal), "Property is required for class CreateDgOfferItemResponse.");

            if (createDgOfferItemResponse.Itinerary == null)
                throw new ArgumentNullException(nameof(createDgOfferItemResponse.Itinerary), "Property is required for class CreateDgOfferItemResponse.");

            if (createDgOfferItemResponse.ExtAttributes == null)
                throw new ArgumentNullException(nameof(createDgOfferItemResponse.ExtAttributes), "Property is required for class CreateDgOfferItemResponse.");

            if (createDgOfferItemResponse.Contents == null)
                throw new ArgumentNullException(nameof(createDgOfferItemResponse.Contents), "Property is required for class CreateDgOfferItemResponse.");

            if (createDgOfferItemResponse.TaxesOption.IsSet && createDgOfferItemResponse.Taxes == null)
                throw new ArgumentNullException(nameof(createDgOfferItemResponse.Taxes), "Property is required for class CreateDgOfferItemResponse.");

            if (createDgOfferItemResponse.TermsConditionsUrlOption.IsSet && createDgOfferItemResponse.TermsConditionsUrl == null)
                throw new ArgumentNullException(nameof(createDgOfferItemResponse.TermsConditionsUrl), "Property is required for class CreateDgOfferItemResponse.");

            if (createDgOfferItemResponse.FaqUrlOption.IsSet && createDgOfferItemResponse.FaqUrl == null)
                throw new ArgumentNullException(nameof(createDgOfferItemResponse.FaqUrl), "Property is required for class CreateDgOfferItemResponse.");

            if (createDgOfferItemResponse.MerchandisingUrlOption.IsSet && createDgOfferItemResponse.MerchandisingUrl == null)
                throw new ArgumentNullException(nameof(createDgOfferItemResponse.MerchandisingUrl), "Property is required for class CreateDgOfferItemResponse.");

            writer.WriteString("id", createDgOfferItemResponse.Id);

            writer.WriteString("premium", createDgOfferItemResponse.Premium);

            writer.WriteString("coverage", createDgOfferItemResponse.Coverage);

            writer.WriteString("coverage_percentage", createDgOfferItemResponse.CoveragePercentage);

            writer.WriteString("service_cap", createDgOfferItemResponse.ServiceCap);

            writer.WriteString("currency", createDgOfferItemResponse.Currency);

            writer.WriteString("taxes_total", createDgOfferItemResponse.TaxesTotal);

            var requestTypeRawValue = DgRequestTypeValueConverter.ToJsonValue(createDgOfferItemResponse.RequestType);
            writer.WriteString("request_type", requestTypeRawValue);

            writer.WriteNumber("max_hours_before_departure", createDgOfferItemResponse.MaxHoursBeforeDeparture);

            writer.WriteNumber("min_minutes_delay", createDgOfferItemResponse.MinMinutesDelay);

            writer.WriteString("created_date_time", createDgOfferItemResponse.CreatedDateTime.ToString(CreatedDateTimeFormat));

            writer.WriteString("contract_expiry_date_time", createDgOfferItemResponse.ContractExpiryDateTime.ToString(ContractExpiryDateTimeFormat));

            writer.WritePropertyName("itinerary");
            JsonSerializer.Serialize(writer, createDgOfferItemResponse.Itinerary, jsonSerializerOptions);
            writer.WritePropertyName("ext_attributes");
            JsonSerializer.Serialize(writer, createDgOfferItemResponse.ExtAttributes, jsonSerializerOptions);
            writer.WritePropertyName("contents");
            JsonSerializer.Serialize(writer, createDgOfferItemResponse.Contents, jsonSerializerOptions);
            if (createDgOfferItemResponse.TaxesOption.IsSet)
            {
                writer.WritePropertyName("taxes");
                JsonSerializer.Serialize(writer, createDgOfferItemResponse.Taxes, jsonSerializerOptions);
            }
            if (createDgOfferItemResponse.TermsConditionsUrlOption.IsSet)
                writer.WriteString("terms_conditions_url", createDgOfferItemResponse.TermsConditionsUrl);

            if (createDgOfferItemResponse.FaqUrlOption.IsSet)
                writer.WriteString("faq_url", createDgOfferItemResponse.FaqUrl);

            if (createDgOfferItemResponse.MerchandisingUrlOption.IsSet)
                writer.WriteString("merchandising_url", createDgOfferItemResponse.MerchandisingUrl);
        }
    }
}
