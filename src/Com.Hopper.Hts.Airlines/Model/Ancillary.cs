// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// Ancillary
    /// </summary>
    public partial class Ancillary
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ancillary" /> class.
        /// </summary>
        /// <param name="totalPrice">Total price of ancillaries of this type</param>
        /// <param name="type">type</param>
        /// <param name="passengerReference">Unique reference of the passenger associated to this ancillary</param>
        /// <param name="covered">Is this ancillary covered by the product. By default true if not specified</param>
        [JsonConstructor]
        public Ancillary(string totalPrice, AncillaryType type, Option<string?> passengerReference = default, Option<bool?> covered = default)
        {
            TotalPrice = totalPrice;
            Type = type;
            PassengerReferenceOption = passengerReference;
            CoveredOption = covered;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public AncillaryType Type { get; set; }

        /// <summary>
        /// Total price of ancillaries of this type
        /// </summary>
        /// <value>Total price of ancillaries of this type</value>
        /* <example>20.55</example> */
        [JsonPropertyName("total_price")]
        public string TotalPrice { get; set; }

        /// <summary>
        /// Used to track the state of PassengerReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PassengerReferenceOption { get; private set; }

        /// <summary>
        /// Unique reference of the passenger associated to this ancillary
        /// </summary>
        /// <value>Unique reference of the passenger associated to this ancillary</value>
        /* <example>1</example> */
        [JsonPropertyName("passenger_reference")]
        public string? PassengerReference { get { return this.PassengerReferenceOption; } set { this.PassengerReferenceOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Covered
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CoveredOption { get; private set; }

        /// <summary>
        /// Is this ancillary covered by the product. By default true if not specified
        /// </summary>
        /// <value>Is this ancillary covered by the product. By default true if not specified</value>
        [JsonPropertyName("covered")]
        public bool? Covered { get { return this.CoveredOption; } set { this.CoveredOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Ancillary {\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PassengerReference: ").Append(PassengerReference).Append("\n");
            sb.Append("  Covered: ").Append(Covered).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Ancillary" />
    /// </summary>
    public class AncillaryJsonConverter : JsonConverter<Ancillary>
    {
        /// <summary>
        /// Deserializes json to <see cref="Ancillary" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Ancillary Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> totalPrice = default;
            Option<AncillaryType?> type = default;
            Option<string?> passengerReference = default;
            Option<bool?> covered = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "total_price":
                            totalPrice = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<AncillaryType?>(AncillaryTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "passenger_reference":
                            passengerReference = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "covered":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                covered = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!totalPrice.IsSet)
                throw new ArgumentException("Property is required for class Ancillary.", nameof(totalPrice));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class Ancillary.", nameof(type));

            if (totalPrice.IsSet && totalPrice.Value == null)
                throw new ArgumentNullException(nameof(totalPrice), "Property is not nullable for class Ancillary.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Ancillary.");

            if (passengerReference.IsSet && passengerReference.Value == null)
                throw new ArgumentNullException(nameof(passengerReference), "Property is not nullable for class Ancillary.");

            if (covered.IsSet && covered.Value == null)
                throw new ArgumentNullException(nameof(covered), "Property is not nullable for class Ancillary.");

            return new Ancillary(totalPrice.Value!, type.Value!.Value!, passengerReference, covered);
        }

        /// <summary>
        /// Serializes a <see cref="Ancillary" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ancillary"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Ancillary ancillary, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, ancillary, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Ancillary" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ancillary"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Ancillary ancillary, JsonSerializerOptions jsonSerializerOptions)
        {
            if (ancillary.TotalPrice == null)
                throw new ArgumentNullException(nameof(ancillary.TotalPrice), "Property is required for class Ancillary.");

            if (ancillary.PassengerReferenceOption.IsSet && ancillary.PassengerReference == null)
                throw new ArgumentNullException(nameof(ancillary.PassengerReference), "Property is required for class Ancillary.");

            writer.WriteString("total_price", ancillary.TotalPrice);

            var typeRawValue = AncillaryTypeValueConverter.ToJsonValue(ancillary.Type);
            writer.WriteString("type", typeRawValue);

            if (ancillary.PassengerReferenceOption.IsSet)
                writer.WriteString("passenger_reference", ancillary.PassengerReference);

            if (ancillary.CoveredOption.IsSet)
                writer.WriteBoolean("covered", ancillary.CoveredOption.Value!.Value);
        }
    }
}
