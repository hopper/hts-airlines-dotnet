// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// Defines dg_request_type
    /// </summary>
    public enum DgRequestType
    {
        /// <summary>
        /// Enum PostBooking for value: post_booking
        /// </summary>
        PostBooking = 1,

        /// <summary>
        /// Enum Reprice for value: reprice
        /// </summary>
        Reprice = 2,

        /// <summary>
        /// Enum Ancillary for value: ancillary
        /// </summary>
        Ancillary = 3,

        /// <summary>
        /// Enum Bundle for value: bundle
        /// </summary>
        Bundle = 4,

        /// <summary>
        /// Enum Fare for value: fare
        /// </summary>
        Fare = 5
    }

    /// <summary>
    /// Converts <see cref="DgRequestType"/> to and from the JSON value
    /// </summary>
    public static class DgRequestTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="DgRequestType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DgRequestType FromString(string value)
        {
            if (value.Equals("post_booking"))
                return DgRequestType.PostBooking;

            if (value.Equals("reprice"))
                return DgRequestType.Reprice;

            if (value.Equals("ancillary"))
                return DgRequestType.Ancillary;

            if (value.Equals("bundle"))
                return DgRequestType.Bundle;

            if (value.Equals("fare"))
                return DgRequestType.Fare;

            throw new NotImplementedException($"Could not convert value to type DgRequestType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="DgRequestType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DgRequestType? FromStringOrDefault(string value)
        {
            if (value.Equals("post_booking"))
                return DgRequestType.PostBooking;

            if (value.Equals("reprice"))
                return DgRequestType.Reprice;

            if (value.Equals("ancillary"))
                return DgRequestType.Ancillary;

            if (value.Equals("bundle"))
                return DgRequestType.Bundle;

            if (value.Equals("fare"))
                return DgRequestType.Fare;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DgRequestType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(DgRequestType value)
        {
            if (value == DgRequestType.PostBooking)
                return "post_booking";

            if (value == DgRequestType.Reprice)
                return "reprice";

            if (value == DgRequestType.Ancillary)
                return "ancillary";

            if (value == DgRequestType.Bundle)
                return "bundle";

            if (value == DgRequestType.Fare)
                return "fare";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DgRequestType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class DgRequestTypeJsonConverter : JsonConverter<DgRequestType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DgRequestType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DgRequestType? result = rawValue == null
                ? null
                : DgRequestTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DgRequestType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgRequestType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DgRequestType dgRequestType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dgRequestType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DgRequestType"/>
    /// </summary>
    public class DgRequestTypeNullableJsonConverter : JsonConverter<DgRequestType?>
    {
        /// <summary>
        /// Returns a DgRequestType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DgRequestType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DgRequestType? result = rawValue == null
                ? null
                : DgRequestTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dgRequestType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DgRequestType? dgRequestType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dgRequestType?.ToString() ?? "null");
        }
    }
}
