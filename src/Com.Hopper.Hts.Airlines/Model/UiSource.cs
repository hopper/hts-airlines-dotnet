// <auto-generated>
/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Com.Hopper.Hts.Airlines.Client;

namespace Com.Hopper.Hts.Airlines.Model
{
    /// <summary>
    /// Defines ui_source
    /// </summary>
    public enum UiSource
    {
        /// <summary>
        /// Enum BannerVariantA for value: banner_variant_a
        /// </summary>
        BannerVariantA = 1,

        /// <summary>
        /// Enum BannerVariantB for value: banner_variant_b
        /// </summary>
        BannerVariantB = 2,

        /// <summary>
        /// Enum BannerVariantC for value: banner_variant_c
        /// </summary>
        BannerVariantC = 3,

        /// <summary>
        /// Enum Takeover for value: takeover
        /// </summary>
        Takeover = 4
    }

    /// <summary>
    /// Converts <see cref="UiSource"/> to and from the JSON value
    /// </summary>
    public static class UiSourceValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="UiSource"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UiSource FromString(string value)
        {
            if (value.Equals("banner_variant_a"))
                return UiSource.BannerVariantA;

            if (value.Equals("banner_variant_b"))
                return UiSource.BannerVariantB;

            if (value.Equals("banner_variant_c"))
                return UiSource.BannerVariantC;

            if (value.Equals("takeover"))
                return UiSource.Takeover;

            throw new NotImplementedException($"Could not convert value to type UiSource: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="UiSource"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UiSource? FromStringOrDefault(string value)
        {
            if (value.Equals("banner_variant_a"))
                return UiSource.BannerVariantA;

            if (value.Equals("banner_variant_b"))
                return UiSource.BannerVariantB;

            if (value.Equals("banner_variant_c"))
                return UiSource.BannerVariantC;

            if (value.Equals("takeover"))
                return UiSource.Takeover;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="UiSource"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(UiSource value)
        {
            if (value == UiSource.BannerVariantA)
                return "banner_variant_a";

            if (value == UiSource.BannerVariantB)
                return "banner_variant_b";

            if (value == UiSource.BannerVariantC)
                return "banner_variant_c";

            if (value == UiSource.Takeover)
                return "takeover";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UiSource"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class UiSourceJsonConverter : JsonConverter<UiSource>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UiSource Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UiSource? result = rawValue == null
                ? null
                : UiSourceValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the UiSource to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="uiSource"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UiSource uiSource, JsonSerializerOptions options)
        {
            writer.WriteStringValue(uiSource.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UiSource"/>
    /// </summary>
    public class UiSourceNullableJsonConverter : JsonConverter<UiSource?>
    {
        /// <summary>
        /// Returns a UiSource from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UiSource? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UiSource? result = rawValue == null
                ? null
                : UiSourceValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="uiSource"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UiSource? uiSource, JsonSerializerOptions options)
        {
            writer.WriteStringValue(uiSource?.ToString() ?? "null");
        }
    }
}
