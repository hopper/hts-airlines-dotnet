/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Type and number of passengers
    /// </summary>
    [DataContract(Name = "passenger_count")]
    public partial class PassengerCount : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public PassengerType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PassengerCount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PassengerCount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PassengerCount" /> class.
        /// </summary>
        /// <param name="count">Number of passenger type (required).</param>
        /// <param name="type">type (required).</param>
        public PassengerCount(int count = default(int), PassengerType type = default(PassengerType))
        {
            this.Count = count;
            this.Type = type;
        }

        /// <summary>
        /// Number of passenger type
        /// </summary>
        /// <value>Number of passenger type</value>
        /*
        <example>3</example>
        */
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
        public long Count { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PassengerCount {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Count (long) minimum
            if (this.Count < (long)0)
            {
                yield return new ValidationResult("Invalid value for Count, must be a value greater than 0.", new [] { "Count" });
            }

            yield break;
        }
    }

}
