/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An object detailing the Passenger Information
    /// </summary>
    [DataContract(Name = "cfar_passenger")]
    public partial class CfarPassenger : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PassengerType
        /// </summary>
        [DataMember(Name = "passenger_type", IsRequired = true, EmitDefaultValue = true)]
        public PassengerType PassengerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CfarPassenger" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CfarPassenger() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CfarPassenger" /> class.
        /// </summary>
        /// <param name="passengerReference">Unique reference of the passenger (required).</param>
        /// <param name="passengerType">passengerType (required).</param>
        /// <param name="firstName">First name of the passenger.</param>
        /// <param name="lastName">Lastname of the passenger.</param>
        public CfarPassenger(string passengerReference = default(string), PassengerType passengerType = default(PassengerType), string firstName = default(string), string lastName = default(string))
        {
            // to ensure "passengerReference" is required (not null)
            if (passengerReference == null)
            {
                throw new ArgumentNullException("passengerReference is a required property for CfarPassenger and cannot be null");
            }
            this.PassengerReference = passengerReference;
            this.PassengerType = passengerType;
            this.FirstName = firstName;
            this.LastName = lastName;
        }

        /// <summary>
        /// Unique reference of the passenger
        /// </summary>
        /// <value>Unique reference of the passenger</value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "passenger_reference", IsRequired = true, EmitDefaultValue = true)]
        public string PassengerReference { get; set; }

        /// <summary>
        /// First name of the passenger
        /// </summary>
        /// <value>First name of the passenger</value>
        /*
        <example>John</example>
        */
        [DataMember(Name = "first_name", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Lastname of the passenger
        /// </summary>
        /// <value>Lastname of the passenger</value>
        /*
        <example>Smith</example>
        */
        [DataMember(Name = "last_name", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CfarPassenger {\n");
            sb.Append("  PassengerReference: ").Append(PassengerReference).Append("\n");
            sb.Append("  PassengerType: ").Append(PassengerType).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
