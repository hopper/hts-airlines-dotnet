/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CfarEvent
    /// </summary>
    [JsonConverter(typeof(CfarEventJsonConverter))]
    [DataContract(Name = "cfar_event")]
    public partial class CfarEvent : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CfarEvent" /> class
        /// with the <see cref="BookingConfirmed1" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of BookingConfirmed1.</param>
        public CfarEvent(BookingConfirmed1 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CfarEvent" /> class
        /// with the <see cref="CfarDenyPurchase" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CfarDenyPurchase.</param>
        public CfarEvent(CfarDenyPurchase actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CfarEvent" /> class
        /// with the <see cref="CfarEventWithContract" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CfarEventWithContract.</param>
        public CfarEvent(CfarEventWithContract actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CfarEvent" /> class
        /// with the <see cref="CfarExerciseCallbackLaunched" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CfarExerciseCallbackLaunched.</param>
        public CfarEvent(CfarExerciseCallbackLaunched actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CfarEvent" /> class
        /// with the <see cref="CfarExerciseCustomerDataComplete" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CfarExerciseCustomerDataComplete.</param>
        public CfarEvent(CfarExerciseCustomerDataComplete actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CfarEvent" /> class
        /// with the <see cref="CfarExercisePortalComplete" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CfarExercisePortalComplete.</param>
        public CfarEvent(CfarExercisePortalComplete actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CfarEvent" /> class
        /// with the <see cref="CfarExercisePortalDisplay" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CfarExercisePortalDisplay.</param>
        public CfarEvent(CfarExercisePortalDisplay actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CfarEvent" /> class
        /// with the <see cref="CfarExerciseVerificationComplete" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CfarExerciseVerificationComplete.</param>
        public CfarEvent(CfarExerciseVerificationComplete actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CfarEvent" /> class
        /// with the <see cref="CfarExerciseVerificationSent" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CfarExerciseVerificationSent.</param>
        public CfarEvent(CfarExerciseVerificationSent actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CfarEvent" /> class
        /// with the <see cref="CfarForcedChoiceWarning" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CfarForcedChoiceWarning.</param>
        public CfarEvent(CfarForcedChoiceWarning actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CfarEvent" /> class
        /// with the <see cref="CfarOffersBannerDisplay" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CfarOffersBannerDisplay.</param>
        public CfarEvent(CfarOffersBannerDisplay actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CfarEvent" /> class
        /// with the <see cref="CfarOffersTakeoverDisplay" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CfarOffersTakeoverDisplay.</param>
        public CfarEvent(CfarOffersTakeoverDisplay actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CfarEvent" /> class
        /// with the <see cref="CfarViewInfo" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CfarViewInfo.</param>
        public CfarEvent(CfarViewInfo actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CfarEvent" /> class
        /// with the <see cref="OffersDisplayed1" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of OffersDisplayed1.</param>
        public CfarEvent(OffersDisplayed1 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(BookingConfirmed1) || value is BookingConfirmed1)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CfarDenyPurchase) || value is CfarDenyPurchase)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CfarEventWithContract) || value is CfarEventWithContract)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CfarExerciseCallbackLaunched) || value is CfarExerciseCallbackLaunched)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CfarExerciseCustomerDataComplete) || value is CfarExerciseCustomerDataComplete)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CfarExercisePortalComplete) || value is CfarExercisePortalComplete)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CfarExercisePortalDisplay) || value is CfarExercisePortalDisplay)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CfarExerciseVerificationComplete) || value is CfarExerciseVerificationComplete)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CfarExerciseVerificationSent) || value is CfarExerciseVerificationSent)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CfarForcedChoiceWarning) || value is CfarForcedChoiceWarning)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CfarOffersBannerDisplay) || value is CfarOffersBannerDisplay)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CfarOffersTakeoverDisplay) || value is CfarOffersTakeoverDisplay)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CfarViewInfo) || value is CfarViewInfo)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(OffersDisplayed1) || value is OffersDisplayed1)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: BookingConfirmed1, CfarDenyPurchase, CfarEventWithContract, CfarExerciseCallbackLaunched, CfarExerciseCustomerDataComplete, CfarExercisePortalComplete, CfarExercisePortalDisplay, CfarExerciseVerificationComplete, CfarExerciseVerificationSent, CfarForcedChoiceWarning, CfarOffersBannerDisplay, CfarOffersTakeoverDisplay, CfarViewInfo, OffersDisplayed1");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `BookingConfirmed1`. If the actual instance is not `BookingConfirmed1`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of BookingConfirmed1</returns>
        public BookingConfirmed1 GetBookingConfirmed1()
        {
            return (BookingConfirmed1)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CfarDenyPurchase`. If the actual instance is not `CfarDenyPurchase`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CfarDenyPurchase</returns>
        public CfarDenyPurchase GetCfarDenyPurchase()
        {
            return (CfarDenyPurchase)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CfarEventWithContract`. If the actual instance is not `CfarEventWithContract`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CfarEventWithContract</returns>
        public CfarEventWithContract GetCfarEventWithContract()
        {
            return (CfarEventWithContract)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CfarExerciseCallbackLaunched`. If the actual instance is not `CfarExerciseCallbackLaunched`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CfarExerciseCallbackLaunched</returns>
        public CfarExerciseCallbackLaunched GetCfarExerciseCallbackLaunched()
        {
            return (CfarExerciseCallbackLaunched)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CfarExerciseCustomerDataComplete`. If the actual instance is not `CfarExerciseCustomerDataComplete`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CfarExerciseCustomerDataComplete</returns>
        public CfarExerciseCustomerDataComplete GetCfarExerciseCustomerDataComplete()
        {
            return (CfarExerciseCustomerDataComplete)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CfarExercisePortalComplete`. If the actual instance is not `CfarExercisePortalComplete`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CfarExercisePortalComplete</returns>
        public CfarExercisePortalComplete GetCfarExercisePortalComplete()
        {
            return (CfarExercisePortalComplete)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CfarExercisePortalDisplay`. If the actual instance is not `CfarExercisePortalDisplay`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CfarExercisePortalDisplay</returns>
        public CfarExercisePortalDisplay GetCfarExercisePortalDisplay()
        {
            return (CfarExercisePortalDisplay)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CfarExerciseVerificationComplete`. If the actual instance is not `CfarExerciseVerificationComplete`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CfarExerciseVerificationComplete</returns>
        public CfarExerciseVerificationComplete GetCfarExerciseVerificationComplete()
        {
            return (CfarExerciseVerificationComplete)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CfarExerciseVerificationSent`. If the actual instance is not `CfarExerciseVerificationSent`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CfarExerciseVerificationSent</returns>
        public CfarExerciseVerificationSent GetCfarExerciseVerificationSent()
        {
            return (CfarExerciseVerificationSent)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CfarForcedChoiceWarning`. If the actual instance is not `CfarForcedChoiceWarning`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CfarForcedChoiceWarning</returns>
        public CfarForcedChoiceWarning GetCfarForcedChoiceWarning()
        {
            return (CfarForcedChoiceWarning)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CfarOffersBannerDisplay`. If the actual instance is not `CfarOffersBannerDisplay`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CfarOffersBannerDisplay</returns>
        public CfarOffersBannerDisplay GetCfarOffersBannerDisplay()
        {
            return (CfarOffersBannerDisplay)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CfarOffersTakeoverDisplay`. If the actual instance is not `CfarOffersTakeoverDisplay`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CfarOffersTakeoverDisplay</returns>
        public CfarOffersTakeoverDisplay GetCfarOffersTakeoverDisplay()
        {
            return (CfarOffersTakeoverDisplay)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CfarViewInfo`. If the actual instance is not `CfarViewInfo`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CfarViewInfo</returns>
        public CfarViewInfo GetCfarViewInfo()
        {
            return (CfarViewInfo)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `OffersDisplayed1`. If the actual instance is not `OffersDisplayed1`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of OffersDisplayed1</returns>
        public OffersDisplayed1 GetOffersDisplayed1()
        {
            return (OffersDisplayed1)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CfarEvent {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, CfarEvent.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of CfarEvent
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of CfarEvent</returns>
        public static CfarEvent FromJson(string jsonString)
        {
            CfarEvent newCfarEvent = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newCfarEvent;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(BookingConfirmed1).GetProperty("AdditionalProperties") == null)
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<BookingConfirmed1>(jsonString, CfarEvent.SerializerSettings));
                }
                else
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<BookingConfirmed1>(jsonString, CfarEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("BookingConfirmed1");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into BookingConfirmed1: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CfarDenyPurchase).GetProperty("AdditionalProperties") == null)
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarDenyPurchase>(jsonString, CfarEvent.SerializerSettings));
                }
                else
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarDenyPurchase>(jsonString, CfarEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CfarDenyPurchase");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CfarDenyPurchase: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CfarEventWithContract).GetProperty("AdditionalProperties") == null)
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarEventWithContract>(jsonString, CfarEvent.SerializerSettings));
                }
                else
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarEventWithContract>(jsonString, CfarEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CfarEventWithContract");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CfarEventWithContract: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CfarExerciseCallbackLaunched).GetProperty("AdditionalProperties") == null)
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarExerciseCallbackLaunched>(jsonString, CfarEvent.SerializerSettings));
                }
                else
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarExerciseCallbackLaunched>(jsonString, CfarEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CfarExerciseCallbackLaunched");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CfarExerciseCallbackLaunched: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CfarExerciseCustomerDataComplete).GetProperty("AdditionalProperties") == null)
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarExerciseCustomerDataComplete>(jsonString, CfarEvent.SerializerSettings));
                }
                else
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarExerciseCustomerDataComplete>(jsonString, CfarEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CfarExerciseCustomerDataComplete");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CfarExerciseCustomerDataComplete: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CfarExercisePortalComplete).GetProperty("AdditionalProperties") == null)
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarExercisePortalComplete>(jsonString, CfarEvent.SerializerSettings));
                }
                else
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarExercisePortalComplete>(jsonString, CfarEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CfarExercisePortalComplete");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CfarExercisePortalComplete: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CfarExercisePortalDisplay).GetProperty("AdditionalProperties") == null)
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarExercisePortalDisplay>(jsonString, CfarEvent.SerializerSettings));
                }
                else
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarExercisePortalDisplay>(jsonString, CfarEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CfarExercisePortalDisplay");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CfarExercisePortalDisplay: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CfarExerciseVerificationComplete).GetProperty("AdditionalProperties") == null)
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarExerciseVerificationComplete>(jsonString, CfarEvent.SerializerSettings));
                }
                else
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarExerciseVerificationComplete>(jsonString, CfarEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CfarExerciseVerificationComplete");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CfarExerciseVerificationComplete: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CfarExerciseVerificationSent).GetProperty("AdditionalProperties") == null)
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarExerciseVerificationSent>(jsonString, CfarEvent.SerializerSettings));
                }
                else
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarExerciseVerificationSent>(jsonString, CfarEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CfarExerciseVerificationSent");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CfarExerciseVerificationSent: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CfarForcedChoiceWarning).GetProperty("AdditionalProperties") == null)
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarForcedChoiceWarning>(jsonString, CfarEvent.SerializerSettings));
                }
                else
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarForcedChoiceWarning>(jsonString, CfarEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CfarForcedChoiceWarning");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CfarForcedChoiceWarning: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CfarOffersBannerDisplay).GetProperty("AdditionalProperties") == null)
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarOffersBannerDisplay>(jsonString, CfarEvent.SerializerSettings));
                }
                else
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarOffersBannerDisplay>(jsonString, CfarEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CfarOffersBannerDisplay");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CfarOffersBannerDisplay: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CfarOffersTakeoverDisplay).GetProperty("AdditionalProperties") == null)
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarOffersTakeoverDisplay>(jsonString, CfarEvent.SerializerSettings));
                }
                else
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarOffersTakeoverDisplay>(jsonString, CfarEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CfarOffersTakeoverDisplay");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CfarOffersTakeoverDisplay: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CfarViewInfo).GetProperty("AdditionalProperties") == null)
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarViewInfo>(jsonString, CfarEvent.SerializerSettings));
                }
                else
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<CfarViewInfo>(jsonString, CfarEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CfarViewInfo");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CfarViewInfo: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(OffersDisplayed1).GetProperty("AdditionalProperties") == null)
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<OffersDisplayed1>(jsonString, CfarEvent.SerializerSettings));
                }
                else
                {
                    newCfarEvent = new CfarEvent(JsonConvert.DeserializeObject<OffersDisplayed1>(jsonString, CfarEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("OffersDisplayed1");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into OffersDisplayed1: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newCfarEvent;
        }


        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for CfarEvent
    /// </summary>
    public class CfarEventJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(CfarEvent).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch(reader.TokenType) 
            {
                case JsonToken.StartObject:
                    return CfarEvent.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return CfarEvent.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
