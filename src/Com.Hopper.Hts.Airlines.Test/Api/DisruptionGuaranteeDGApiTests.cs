/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Com.Hopper.Hts.Airlines.Api;
using Com.Hopper.Hts.Airlines.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Com.Hopper.Hts.Airlines.Test.Api
{
    /// <summary>
    ///  Class for testing DisruptionGuaranteeDGApi
    /// </summary>
    public sealed class DisruptionGuaranteeDGApiTests : ApiTestsBase
    {
        private readonly IDisruptionGuaranteeDGApi _instance;

        public DisruptionGuaranteeDGApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IDisruptionGuaranteeDGApi>();
        }

        /// <summary>
        /// Test GetDgContractsId
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDgContractsIdAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetDgContractsIdAsync(id);
            var model = response.Ok();
            Assert.IsType<DgContract>(model);
        }

        /// <summary>
        /// Test PostCustomerDgEvents
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostCustomerDgEventsAsyncTest()
        {
            DgEvent dgEvent = default!;
            await _instance.PostCustomerDgEventsAsync(dgEvent);
        }

        /// <summary>
        /// Test PostDgContractExercises
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostDgContractExercisesAsyncTest()
        {
            CreateDgContractExerciseRequest createDgContractExerciseRequest = default!;
            Client.Option<string> hCSessionID = default!;
            var response = await _instance.PostDgContractExercisesAsync(createDgContractExerciseRequest, hCSessionID);
            var model = response.Created();
            Assert.IsType<CreateDgContractExerciseResponse>(model);
        }

        /// <summary>
        /// Test PostDgContracts
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostDgContractsAsyncTest()
        {
            CreateDgContractRequest createDgContractRequest = default!;
            var response = await _instance.PostDgContractsAsync(createDgContractRequest);
            var model = response.Created();
            Assert.IsType<DgContract>(model);
        }

        /// <summary>
        /// Test PostDgContractsIdPayment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostDgContractsIdPaymentAsyncTest()
        {
            string id = default!;
            ProcessDgPaymentRequest processDgPaymentRequest = default!;
            var response = await _instance.PostDgContractsIdPaymentAsync(id, processDgPaymentRequest);
            var model = response.Ok();
            Assert.IsType<DgPayment>(model);
        }

        /// <summary>
        /// Test PostDgOffers
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostDgOffersAsyncTest()
        {
            CreateDgOffersRequest createDgOffersRequest = default!;
            Client.Option<string> hCSessionID = default!;
            var response = await _instance.PostDgOffersAsync(createDgOffersRequest, hCSessionID);
            var model = response.Created();
            Assert.IsType<List<CreateDgOfferItemResponse>>(model);
        }

        /// <summary>
        /// Test PutDgContractsIdItinerarySlices
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PutDgContractsIdItinerarySlicesAsyncTest()
        {
            string id = default!;
            List<DgItinerarySlice> dgItinerarySlice = default!;
            var response = await _instance.PutDgContractsIdItinerarySlicesAsync(id, dgItinerarySlice);
            var model = response.Ok();
            Assert.IsType<DgContract>(model);
        }

        /// <summary>
        /// Test PutDgContractsIdUpdateStatus
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PutDgContractsIdUpdateStatusAsyncTest()
        {
            string id = default!;
            UpdateDgContractStatusRequest updateDgContractStatusRequest = default!;
            var response = await _instance.PutDgContractsIdUpdateStatusAsync(id, updateDgContractStatusRequest);
            var model = response.Ok();
            Assert.IsType<DgContract>(model);
        }
    }
}
