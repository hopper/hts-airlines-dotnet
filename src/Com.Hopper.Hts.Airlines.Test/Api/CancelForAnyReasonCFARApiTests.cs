/*
 * Airline API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Com.Hopper.Hts.Airlines.Api;
using Com.Hopper.Hts.Airlines.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Com.Hopper.Hts.Airlines.Test.Api
{
    /// <summary>
    ///  Class for testing CancelForAnyReasonCFARApi
    /// </summary>
    public sealed class CancelForAnyReasonCFARApiTests : ApiTestsBase
    {
        private readonly ICancelForAnyReasonCFARApi _instance;

        public CancelForAnyReasonCFARApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ICancelForAnyReasonCFARApi>();
        }

        /// <summary>
        /// Test GetCfarContractsId
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetCfarContractsIdAsyncTest()
        {
            string id = default!;
            Client.Option<string> hCSessionID = default!;
            var response = await _instance.GetCfarContractsIdAsync(id, hCSessionID);
            var model = response.Ok();
            Assert.IsType<CfarContract>(model);
        }

        /// <summary>
        /// Test PostCfarContractExercises
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostCfarContractExercisesAsyncTest()
        {
            CreateCfarContractExerciseRequest createCfarContractExerciseRequest = default!;
            Client.Option<string> hCSessionID = default!;
            var response = await _instance.PostCfarContractExercisesAsync(createCfarContractExerciseRequest, hCSessionID);
            var model = response.Created();
            Assert.IsType<CfarContractExercise>(model);
        }

        /// <summary>
        /// Test PostCfarContracts
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostCfarContractsAsyncTest()
        {
            CreateCfarContractRequest createCfarContractRequest = default!;
            var response = await _instance.PostCfarContractsAsync(createCfarContractRequest);
            var model = response.Created();
            Assert.IsType<CfarContract>(model);
        }

        /// <summary>
        /// Test PostCfarContractsIdPayment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostCfarContractsIdPaymentAsyncTest()
        {
            string id = default!;
            ProcessCfarPaymentRequest processCfarPaymentRequest = default!;
            Client.Option<string> hCSessionID = default!;
            var response = await _instance.PostCfarContractsIdPaymentAsync(id, processCfarPaymentRequest, hCSessionID);
            var model = response.Ok();
            Assert.IsType<CfarPayment>(model);
        }

        /// <summary>
        /// Test PostCfarOffers
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostCfarOffersAsyncTest()
        {
            CreateCfarOfferRequest createCfarOfferRequest = default!;
            Client.Option<string> hCSessionID = default!;
            var response = await _instance.PostCfarOffersAsync(createCfarOfferRequest, hCSessionID);
            var model = response.Created();
            Assert.IsType<List<CfarOffer>>(model);
        }

        /// <summary>
        /// Test PutCfarContractExercisesIdMarkCompleted
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PutCfarContractExercisesIdMarkCompletedAsyncTest()
        {
            string id = default!;
            MarkCfarContractExerciseCompleteRequest markCfarContractExerciseCompleteRequest = default!;
            Client.Option<string> hCSessionID = default!;
            var response = await _instance.PutCfarContractExercisesIdMarkCompletedAsync(id, markCfarContractExerciseCompleteRequest, hCSessionID);
            var model = response.Ok();
            Assert.IsType<CfarContractExercise>(model);
        }

        /// <summary>
        /// Test PutCfarContractsIdFormsOfPayment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PutCfarContractsIdFormsOfPaymentAsyncTest()
        {
            string id = default!;
            UpdateCfarFormOfPaymentRequest updateCfarFormOfPaymentRequest = default!;
            Client.Option<string> hCSessionID = default!;
            var response = await _instance.PutCfarContractsIdFormsOfPaymentAsync(id, updateCfarFormOfPaymentRequest, hCSessionID);
            var model = response.Ok();
            Assert.IsType<CfarContract>(model);
        }

        /// <summary>
        /// Test PutCfarContractsIdUpdateStatus
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PutCfarContractsIdUpdateStatusAsyncTest()
        {
            string id = default!;
            UpdateCfarContractRequest updateCfarContractRequest = default!;
            Client.Option<string> hCSessionID = default!;
            var response = await _instance.PutCfarContractsIdUpdateStatusAsync(id, updateCfarContractRequest, hCSessionID);
            var model = response.Ok();
            Assert.IsType<CfarContract>(model);
        }
    }
}
